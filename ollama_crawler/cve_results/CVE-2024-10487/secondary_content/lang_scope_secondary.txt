Title: Scope
URL: https://www.puppet.com/docs/puppet/7/lang_scope

Puppet.com
Forge
Education


                                    Try Puppet
                                


































        Docs
        






Products
Puppet Enterprise
Open Source Puppet
Bolt
Security Compliance Management
Continuous Delivery
Puppet Development Kit
Puppet DB
Puppet Plugin for VMware



        Support
        






Get
Technical Support Plans
Support Lifecycle Policy
New Puppet Enterprise Customer?



        Community
        






About Puppet
Company
Developer Experience
Community
Puppet Champions
Puppet Test Pilots
Community Calendar
Slack Channel







 









































PRODUCT AND VERSION


      Current product
      










      Current version
      








Puppet  7.34.0

Release notes

Puppet release notes
Puppet  7.34.0Security


Puppet known issues
Puppet Server release notes
Puppet Server known Issues
PuppetDB release notes (link)

Facter release notes
Facter 4.10.0
Facter 4.9.0
Facter 4.8.0
Facter 4.7.1
Facter 4.7.0
Facter 4.6.1
Facter 4.6.0
Facter 4.5.2


Facter known issues
What's new since Puppet 6?
Upgrading from Puppet 6 to Puppet 7

Experimental featuresMsgpack support

Archived documentation



Puppet overview
What is Puppet?
Why use Puppet desired state management?
Key concepts behind Puppet
The Puppet platform 
Puppet platform lifecycle 
Open source Puppet vs Puppet Enterprise (PE)
The Puppet ecosystem
Use cases
Glossary
Navigating the documentation



Set up Puppet

Install Puppet
System requirements
Installing Puppet  
Installing and configuring agents
Manually verify packages
Managing Platform versions



Configure Puppet settings
Puppet settings
Key configuration settings

Puppet's configuration files
puppet.conf: The main config file
environment.conf: Per-environment settings
fileserver.conf: Custom fileserver mount points
puppetdb.conf: PuppetDB server locations
autosign.conf: Basic certificate autosigning 
csr_attributes.yaml: Certificate extensions 
custom_trusted_oid_mapping.yaml: Short names for cert extension OIDs
device.conf: Network hardware access
routes.yaml: Advanced plugin routing


Adding file server mount points
Checking the values of settings
Editing settings on the command line
Configuration Reference



Upgrading
Upgrade Puppet Server

Upgrade agents
Upgrade agents using the puppet_agent module
Upgrade *nix agents
Upgrade Windows agents
Upgrade macOS agents


Upgrade PuppetDB



Environments
About environments
Creating environments
Environment isolation



Directories and files
Code and data directory (codedir)
Config directory (confdir)
Main manifest directory
The modulepath
SSL directory (ssldir)
Cache directory (vardir)


Report reference



Platform components

Puppet Server
About Puppet Server
Deprecated features
Server and agent compatibility
Installing Puppet Server

Configuring Puppet Server
Configuring Puppet Server

Puppet Server configuration files
auth.conf
ca.conf
global.conf
logback.xml
metrics.conf
product.conf
puppetserver.conf
web-routes.conf
webserver.conf


Migrating to the HOCON auth.conf format
Advanced logging configuration
Differing behavior in puppet.conf



Using and extending Puppet Server
Subcommands
Using Ruby gems
Intermediate CA
Infrastructure certificate revocation list (CRL)
External SSL termination

Server metrics
Monitoring Puppet Server metrics
HTTP Client Metrics


Tuning guide
Applying metrics to improve performance
Submitting usage telemetry
Scaling Puppet Server
Restarting Puppet Server"



Developer information
Developer debugging
Running from source
Tracing code events



Puppet Server HTTP API
Puppet Server HTTP API overview
PSON

Puppet v3 API
Catalog
Node
Facts
File Bucket File
File Content
File Metadata
Report



Puppet v4 APICatalog API


CA v1 API
Certificate
Certificate Request
Certificate Status
Certificate Revocation List
Expirations
Certificate Clean


Schemas (JSON)



API endpoints

Metrics API endpoints
v1 metrics
v2 (Jolokia) metrics



Status API endpoints
Services endpoint
Simple endpoint



Administrative API endpoints
Environment cache
JRuby pool



Server-specific Puppet API endpoints
Environment classes
Environment modules
Static file content





Certificate authority and SSL
Puppet Server CA commands
Intermediate CA
Autosigning certificate requests
CSR attributes and certificate extensions
Regenerating certificates in a Puppet deployment
External CA
External SSL termination





Facter  
Facter: CLI
Facter: Core Facts

Custom facts overviewEnvironment facts 

Writing custom facts
External facts
Configuring Facter with facter.conf


PuppetDB

Puppet services and tools
Puppet commands
Running Puppet commands on Windows  

primary Puppet serverAbout Puppet Server

Puppet agent on *nix systems
Puppet agent on Windows
Puppet apply
Puppet device



Puppet reports
Reporting
Report reference
Writing custom report processors
Report format



Life cycle of a Puppet run
Agent-server HTTPS communications
Catalog compilation
Static catalogs 





Using Puppet code
Classifying nodes
Managing environment content with a Puppetfile
Using content from Puppet Forge

Designing system configs (roles and profiles)
The roles and profiles method 
Roles and profiles example 
Designing advanced profiles 
Designing convenient roles 



Separating data (Hiera)
About Hiera  
Getting started with Hiera  
Configuring Hiera
Creating and editing data 
Looking up data with Hiera  
Writing new data backends 

Debugging Hiera
Unexpected values
Common errors


Upgrading to Hiera 5 



Use case examples
Manage NTP
Manage sudo 
Manage DNS
Manage firewall rules
Forge examples





Syntax and settings

The Puppet language
Puppet language overview
Puppet language syntax examples
The Puppet language style guide 
Files and paths on Windows  
Code comments 
Variables
Resources

Resource types
Resource Type Reference (Single-Page)
Built-in types
Optional resource types for Windows
Resource Type: exec
Using exec on Windows  
Resource Type: file
Using file on Windows
Resource Type: filebucket
Resource Type: group
Using user and group on Windows
Resource types overview
Resource Type: notify
Resource Type: package
Using package on Windows  
Resource Type: resources
Resource Type: schedule
Resource Type: service
Using service
Resource Type: stage
Resource Type: tidy
Resource Type: user


Relationships and ordering
Classes
Defined resource types
Bolt tasks
Expressions and operators
Conditional statements and expressions
Function calls
Built-in function reference
Node definitions

Facts and built-in variables
Accessing facts from Puppet code
Built-in variables


Reserved words and acceptable names

Custom resources

Develop types and providers with the Resource APIResource API reference


Low-level method for developing types and providers
Type development
Provider development
Creating resources





Custom functions
Custom functions overview 
Writing custom functions in the Puppet language

Writing custom functions in Ruby
Custom functions in Ruby overview
Ruby function signatures
Using special features in implementation methods
Iterative functions
Refactoring legacy 3.x functions



Deferring a function
Deferred functions overview
Using a template with Deferred values
Write a deferred function to store secrets
Integrations with secret stores





Values, data types, and aliases
Type aliases
Typecasting
Abstract data types
Arrays
Binary
Booleans
Data type syntax
Default
Error data type
Hashes
Numbers
Regular expressions
Resource and class references
Resource types
Sensitive
Strings
Time-related data types
Undef



Templates
Creating templates using Embedded Puppet
Creating templates using Embedded Ruby



Advanced constructs
Iteration and loops
Lambdas
Resource default statements
Resource collectors
Virtual resources
Exported resources
Tags
Run stages



Details of complex behaviors
Containment
Scope
Namespaces and autoloading


Securing sensitive data


Metaparameter reference
Configuration Reference
Built-in function reference

Puppet Man Pages

Core tools
Man Page: puppet agent
Man Page: puppet apply
Man Page: puppet module
Man Page: puppet resource
Man Page: puppet lookup



Occasionally useful
Man Page: puppet config
Man Page: puppet describe
Man Page: puppet device
Man Page: puppet doc
Man Page: puppet help
Man Page: puppet node
Man Page: puppet parser



Niche
Man Page: puppet catalog
Man Page: puppet facts
Man Page: puppet filebucket
Man Page: puppet report







Developing modules

Modules
Modules overview
Plug-ins in modules
Module cheat sheet
Installing and managing modules from the command line
Beginner's guide to writing modules
Module metadata
Documenting modules
Documenting modules with Puppet Strings  
Puppet Strings style guide

Publishing modulesUsing the Forge API

Contributing to Puppet modules


Puppet Development Kit (PDK)
Puppet VSCode extension

PowerShell DSC Resources
Converting DSC Resources
Distributing arbitrary DSC resources
Upgrading Puppet DSC modules 
Troubleshooting DSC Resources 


Ruby API for developing extensions


Scope

A scope is a specific area of code that
    is partially isolated from other areas of code.
Scopes limit the reach of: 

Variables. 

Resource defaults. 


Scopes do not limit the reach of: 

Resource titles, which are all global. 

Resource references, which can refer to a resource
              declared in any scope. 





A particular scope has access to its own contents, and also receives
        additional contents from its parent scope, node scope, and top scope. The rules for how
          Puppet determines a local scope’s parent are described
          in scope lookup
          rules.
In the diagram above: 
Top scope can access variables and defaults
              only from its own scope.
Node scope can access variables and defaults
              from its own scope and top scope.
Each of the example::parent, example::other, and example::four classes can access
              variables and defaults from their own scope, node scope, and top scope. 
The example::child class can access variables
              and defaults from its own scope, the example::parent scope, node scope, and top scope. 


Top scope
Code that is outside any class definition, type definition, or node definition
        exists at top scope. Variables and defaults declared at top scope are
        available everywhere.

# site.pp
$variable = "Hi!"

class example {
  notify {"Message from elsewhere: $variable":}
}

include example
$ puppet apply site.pp
notice: Message from elsewhere: Hi!


Node scope
Code inside a node definition exists at node scope. Only one
        node scope can exist at a time because only one node definition can match a given node.
Variables and defaults declared at node scope are available everywhere except top
        scope.


Note: Classes and resources declared at top scope bypass node scope
          entirely, and so cannot access variables or defaults from node scope.In this
        example, node scope can access top scope variables, but not vice-versa.# site.pp
$top_variable = "Available!"
node 'puppet.example.com' {
  $variable = "Hi!"
  notify {"Message from here: $variable":}
  notify {"Top scope: $top_variable":}
}
notify {"Message from top scope: $variable":}
$ puppet apply site.pp
notice: Message from here: Hi!
notice: Top scope: Available!
notice: Message from top scope:


Local scopes
Code inside a class
          definition, defined type, or lambda exists in a local scope.
Variables and defaults declared in a local scope are only available in that scope and
        its children. There are two different sets of rules for when scopes are considered
        related. For more information, see scope lookup
          rules.
In this example, a local scope can see out into node and top scope, but outer scopes cannot
        see in:# /etc/puppetlabs/code/modules/scope_example/manifests/init.pp
class scope_example {
  $variable = "Hi!"
  notify {"Message from here: $variable":}
  notify {"Node scope: $node_variable Top scope: $top_variable":}
}

# /etc/puppetlabs/code/environments/production/manifests/site.pp
$top_variable = "Available!"
node 'puppet.example.com' {
  $node_variable = "Available!"
  include scope_example
  notify {"Message from node scope: $variable":}
}
notify {"Message from top scope: $variable":}
$ puppet apply site.pp
notice: Message from here: Hi!
notice: Node scope: Available! Top scope: Available!
notice: Message from node scope:
notice: Message from top scope:


Overriding received values
Variables and defaults declared at node scope can override those received from top scope.
        Those declared at local scope can override those received from node and top scope, as well
        as any parent scopes. If multiple variables with the same name are available, Puppet uses the most local one.

# /etc/puppetlabs/code/modules/scope_example/manifests/init.pp
class scope_example {
  $variable = "Hi, I'm local!"
  notify {"Message from here: $variable":}
}

# /etc/puppetlabs/code/environments/production/manifests/site.pp
$variable = "Hi, I'm top!"

node 'puppet.example.com' {
  $variable = "Hi, I'm node!"
  include scope_example
}
$ puppet apply site.pp
notice: Message from here: Hi, I'm local!

Resource defaults are processed by attribute rather than as a block. Thus,
        defaults that declare different attributes are merged, and only the attributes that conflict
        are overridden.
In this example, /tmp/example would be a
        directory owned by the puppet user, and would
        combine the defaults from top and local
        scope:# /etc/puppetlabs/code/modules/scope_example/manifests/init.pp
class scope_example {
  File { ensure => directory, }

  file {'/tmp/example':}
}

# /etc/puppetlabs/code/environments/production/manifests/site.pp
File {
  ensure => file,
  owner  => 'puppet',
}

include scope_example


Scope of external node classifier data
Variables provided by an ENC are set at the top scope. However, all of the classes
        assigned by an ENC are declared at the node scope.
This results the most expected behavior: variables from an ENC are available everywhere,
        and classes can use node-specific variables.
Note: This means compilation fails
          if a site manifest tries to set a variable that was already set at top scope by an
          ENC.Node scope only exists if there is at least one node definition in the main
        manifest. If no node definitions exist, then ENC classes get declared at top scope.

Named scopes and anonymous scopes
A class definition creates a named scope, whose name is the same as the class’s
        name. Top scope is also a named scope; its name is the empty string.
Node scope and the local scopes created by lambdas and defined resources are
          anonymous and cannot be directly referenced.

Accessing out-of-scope variables
Variables declared in named scopes can be referenced directly from anywhere, including
        scopes that otherwise would not have access to them, by using their qualified global
          name.
Qualified variable names are formatted using the double-colon namespace separator between
        segments:$<NAME OF SCOPE>::<NAME OF VARIABLE>

In the following example, the variable $local_copy is set
        to the value of the $confdir variable from the apache::params
        class:include apache::params
$local_copy = $apache::params::confdir



Note:
A class must be declared to access its variables; just having the class
            available in your modules is insufficient.
This means the availability of out-of-scope variables is evaluation-order dependent.
            Make sure you only access out-of-scope variables if the class accessing them can
            guarantee that the other class is already declared, usually by explicitly declaring it
            with include before trying to read its variables.


Because the top scope’s name is the empty string, $::my_variable refers to the top-scope value of $my_variable, even if $my_variable has a
        different value in local scope.
Variables declared in anonymous scopes can only be accessed normally and do not have
        qualified global names.



Scope lookup rules

The scope lookup rules determine when a local scope becomes
  the parent of another local scope.
There are two sets of scope lookup rules: static scope and dynamic scope.
    Puppet uses:
Static scope for variables.
Dynamic scope for resource
     defaults.


Static scope
In static scope, which Puppet uses for looking up variables,
        parent scopes are assigned in the following ways:

Classes can receive parent scopes by class inheritance, using the inherits keyword. A derived class receives the contents of its base class
              in addition to the contents of node and top scope.


A lambda’s
              parent scope is the local scope in which the lambda is written. It can access
              variables in that scope by their short names.



All other local scopes have no parents — they receive their own contents, the contents of
        node scope (if applicable), and top scope.


Note: Static scope has the following characteristics:

Scope contents are predictable and do not depend on evaluation order.


Scope contents can be determined simply by looking at the relevant class
                definition; the place where a class or defined type is declared has no effect. The
                only exception is node definitions — if a class is declared outside a node, it does
                not receive the contents of node scope.





Dynamic scope
In dynamic scope, which Puppet uses for looking up resource
        defaults, parent scopes are assigned by both inheritance and declaration, with preference
        given to inheritance. The full list of rules is:

Each scope has only one parent, but can have an unlimited chain of grandparents, and
              receives the merged contents of all of them, with nearer ancestors overriding more
              distant ones.


The parent of a derived class is its base class.


The parent of any other class or defined resource is the first scope in which it was
              declared.


When you declare a derived class whose base class hasn’t already been declared, the
              base class is immediately declared in the current scope, and its parent assigned
              accordingly. This effectively “inserts” the base class between the derived class and
              the current scope. If the base class has already been declared elsewhere, its existing
              parent scope is not changed.





Note: Dynamic scope has the following characteristics:

A scope’s parent cannot be identified by looking at the definition of a class — you
                must examine every place where the class or resource might have been declared.


In some cases, you can only determine a scope’s contents by executing the code.


Because classes can be declared multiple times with the include function, the contents of a given scope are evaluation-order
                dependent.






 




          Was this page helpful?
        
Yes
No







              Don’t fill this out if you’re human: 






Thank you for your feedback!

            Feel free to add a comment or suggestion.
            





Send
Please enter your feedback





              Don’t fill this out if you’re human: 







            We’re sorry to hear that! 
            Please tell us why so we can help.
          

            Enter your feedback and email. This form is sent to the Puppet docs team.
            We ask for your email as we might contact you regarding your feedback.
          

            If you need help with the product itself, visit Puppet Support
            or ask in Puppet Community on Slack.
          

            Feedback:
            






            Email Address:
            






            To learn about how Puppet uses your personal information,
            visit our privacy policy.
          


Send
Please enter your feedback and contact email

          If you leave us your email, we may contact you regarding your feedback.
          For more information on how Puppet uses your personal information, see
          our
          privacy policy.
        





            Don’t fill this out if you’re human: 








    See an issue? Please file a JIRA ticket in our
    [DOCUMENTATION]
      project.
  











Puppet by Perforce gives IT operations teams back their time and offers peace of mind with infrastructure automation that enables security and compliance.






Legal
Privacy Policy
Terms of Use
Security


©  Puppet, Inc., a Perforce company. All rights reserved.




Puppet and other identified trademarks are the property of Puppet, Inc., Perforce Software, Inc., or an affiliate. Such trademarks are claimed and/or registered in the U.S. and other countries and regions. All third-party trademarks are the property of their respective holders. References to third-party trademarks do not imply endorsement or sponsorship of any products or services by the trademark holder. Contact Puppet, Inc., for further details.

