Title: Puppet agent on Windows
URL: https://www.puppet.com/docs/puppet/7/services_agent_windows

Puppet.com
Forge
Education


                                    Try Puppet
                                


































        Docs
        






Products
Puppet Enterprise
Open Source Puppet
Bolt
Security Compliance Management
Continuous Delivery
Puppet Development Kit
Puppet DB
Puppet Plugin for VMware



        Support
        






Get
Technical Support Plans
Support Lifecycle Policy
New Puppet Enterprise Customer?



        Community
        






About Puppet
Company
Developer Experience
Community
Puppet Champions
Puppet Test Pilots
Community Calendar
Slack Channel







 









































PRODUCT AND VERSION


      Current product
      










      Current version
      








Puppet  7.34.0

Release notes

Puppet release notes
Puppet  7.34.0Security


Puppet known issues
Puppet Server release notes
Puppet Server known Issues
PuppetDB release notes (link)

Facter release notes
Facter 4.10.0
Facter 4.9.0
Facter 4.8.0
Facter 4.7.1
Facter 4.7.0
Facter 4.6.1
Facter 4.6.0
Facter 4.5.2


Facter known issues
What's new since Puppet 6?
Upgrading from Puppet 6 to Puppet 7

Experimental featuresMsgpack support

Archived documentation



Puppet overview
What is Puppet?
Why use Puppet desired state management?
Key concepts behind Puppet
The Puppet platform 
Puppet platform lifecycle 
Open source Puppet vs Puppet Enterprise (PE)
The Puppet ecosystem
Use cases
Glossary
Navigating the documentation



Set up Puppet

Install Puppet
System requirements
Installing Puppet  
Installing and configuring agents
Manually verify packages
Managing Platform versions



Configure Puppet settings
Puppet settings
Key configuration settings

Puppet's configuration files
puppet.conf: The main config file
environment.conf: Per-environment settings
fileserver.conf: Custom fileserver mount points
puppetdb.conf: PuppetDB server locations
autosign.conf: Basic certificate autosigning 
csr_attributes.yaml: Certificate extensions 
custom_trusted_oid_mapping.yaml: Short names for cert extension OIDs
device.conf: Network hardware access
routes.yaml: Advanced plugin routing


Adding file server mount points
Checking the values of settings
Editing settings on the command line
Configuration Reference



Upgrading
Upgrade Puppet Server

Upgrade agents
Upgrade agents using the puppet_agent module
Upgrade *nix agents
Upgrade Windows agents
Upgrade macOS agents


Upgrade PuppetDB



Environments
About environments
Creating environments
Environment isolation



Directories and files
Code and data directory (codedir)
Config directory (confdir)
Main manifest directory
The modulepath
SSL directory (ssldir)
Cache directory (vardir)


Report reference



Platform components

Puppet Server
About Puppet Server
Deprecated features
Server and agent compatibility
Installing Puppet Server

Configuring Puppet Server
Configuring Puppet Server

Puppet Server configuration files
auth.conf
ca.conf
global.conf
logback.xml
metrics.conf
product.conf
puppetserver.conf
web-routes.conf
webserver.conf


Migrating to the HOCON auth.conf format
Advanced logging configuration
Differing behavior in puppet.conf



Using and extending Puppet Server
Subcommands
Using Ruby gems
Intermediate CA
Infrastructure certificate revocation list (CRL)
External SSL termination

Server metrics
Monitoring Puppet Server metrics
HTTP Client Metrics


Tuning guide
Applying metrics to improve performance
Submitting usage telemetry
Scaling Puppet Server
Restarting Puppet Server"



Developer information
Developer debugging
Running from source
Tracing code events



Puppet Server HTTP API
Puppet Server HTTP API overview
PSON

Puppet v3 API
Catalog
Node
Facts
File Bucket File
File Content
File Metadata
Report



Puppet v4 APICatalog API


CA v1 API
Certificate
Certificate Request
Certificate Status
Certificate Revocation List
Expirations
Certificate Clean


Schemas (JSON)



API endpoints

Metrics API endpoints
v1 metrics
v2 (Jolokia) metrics



Status API endpoints
Services endpoint
Simple endpoint



Administrative API endpoints
Environment cache
JRuby pool



Server-specific Puppet API endpoints
Environment classes
Environment modules
Static file content





Certificate authority and SSL
Puppet Server CA commands
Intermediate CA
Autosigning certificate requests
CSR attributes and certificate extensions
Regenerating certificates in a Puppet deployment
External CA
External SSL termination





Facter  
Facter: CLI
Facter: Core Facts

Custom facts overviewEnvironment facts 

Writing custom facts
External facts
Configuring Facter with facter.conf


PuppetDB

Puppet services and tools
Puppet commands
Running Puppet commands on Windows  

primary Puppet serverAbout Puppet Server

Puppet agent on *nix systems
Puppet agent on Windows
Puppet apply
Puppet device



Puppet reports
Reporting
Report reference
Writing custom report processors
Report format



Life cycle of a Puppet run
Agent-server HTTPS communications
Catalog compilation
Static catalogs 





Using Puppet code
Classifying nodes
Managing environment content with a Puppetfile
Using content from Puppet Forge

Designing system configs (roles and profiles)
The roles and profiles method 
Roles and profiles example 
Designing advanced profiles 
Designing convenient roles 



Separating data (Hiera)
About Hiera  
Getting started with Hiera  
Configuring Hiera
Creating and editing data 
Looking up data with Hiera  
Writing new data backends 

Debugging Hiera
Unexpected values
Common errors


Upgrading to Hiera 5 



Use case examples
Manage NTP
Manage sudo 
Manage DNS
Manage firewall rules
Forge examples





Syntax and settings

The Puppet language
Puppet language overview
Puppet language syntax examples
The Puppet language style guide 
Files and paths on Windows  
Code comments 
Variables
Resources

Resource types
Resource Type Reference (Single-Page)
Built-in types
Optional resource types for Windows
Resource Type: exec
Using exec on Windows  
Resource Type: file
Using file on Windows
Resource Type: filebucket
Resource Type: group
Using user and group on Windows
Resource types overview
Resource Type: notify
Resource Type: package
Using package on Windows  
Resource Type: resources
Resource Type: schedule
Resource Type: service
Using service
Resource Type: stage
Resource Type: tidy
Resource Type: user


Relationships and ordering
Classes
Defined resource types
Bolt tasks
Expressions and operators
Conditional statements and expressions
Function calls
Built-in function reference
Node definitions

Facts and built-in variables
Accessing facts from Puppet code
Built-in variables


Reserved words and acceptable names

Custom resources

Develop types and providers with the Resource APIResource API reference


Low-level method for developing types and providers
Type development
Provider development
Creating resources





Custom functions
Custom functions overview 
Writing custom functions in the Puppet language

Writing custom functions in Ruby
Custom functions in Ruby overview
Ruby function signatures
Using special features in implementation methods
Iterative functions
Refactoring legacy 3.x functions



Deferring a function
Deferred functions overview
Using a template with Deferred values
Write a deferred function to store secrets
Integrations with secret stores





Values, data types, and aliases
Type aliases
Typecasting
Abstract data types
Arrays
Binary
Booleans
Data type syntax
Default
Error data type
Hashes
Numbers
Regular expressions
Resource and class references
Resource types
Sensitive
Strings
Time-related data types
Undef



Templates
Creating templates using Embedded Puppet
Creating templates using Embedded Ruby



Advanced constructs
Iteration and loops
Lambdas
Resource default statements
Resource collectors
Virtual resources
Exported resources
Tags
Run stages



Details of complex behaviors
Containment
Scope
Namespaces and autoloading


Securing sensitive data


Metaparameter reference
Configuration Reference
Built-in function reference

Puppet Man Pages

Core tools
Man Page: puppet agent
Man Page: puppet apply
Man Page: puppet module
Man Page: puppet resource
Man Page: puppet lookup



Occasionally useful
Man Page: puppet config
Man Page: puppet describe
Man Page: puppet device
Man Page: puppet doc
Man Page: puppet help
Man Page: puppet node
Man Page: puppet parser



Niche
Man Page: puppet catalog
Man Page: puppet facts
Man Page: puppet filebucket
Man Page: puppet report







Developing modules

Modules
Modules overview
Plug-ins in modules
Module cheat sheet
Installing and managing modules from the command line
Beginner's guide to writing modules
Module metadata
Documenting modules
Documenting modules with Puppet Strings  
Puppet Strings style guide

Publishing modulesUsing the Forge API

Contributing to Puppet modules


Puppet Development Kit (PDK)
Puppet VSCode extension

PowerShell DSC Resources
Converting DSC Resources
Distributing arbitrary DSC resources
Upgrading Puppet DSC modules 
Troubleshooting DSC Resources 


Ruby API for developing extensions



Puppet agent on Windows


Puppet agent is the application that manages
        configurations on your nodes. It requires a Puppet primary
        server to fetch configuration catalogs.
For more information about invoking the Puppet agent command, see the >puppet agent man page.



Puppet agent's run
        environment

Puppet agent runs as a
        specific user, by default LocalSystem, and initiates outbound connections on port 8140.
Ports
By default, Puppet’s HTTPS traffic uses port 8140. Your operating
                system and firewall must allow Puppet agent to
                initiate outbound connections on this port.
If you want to use a non-default port, change the serverport
                setting on all agent nodes, and ensure that you change your Puppet primary server’s port as well.
User
Puppet agent runs as the LocalSystem user, which lets it manage the configuration of the entire
                system, but prevents it from accessing files on UNC shares.
Puppet agent can also run as a different user. You
                can change the user in the Service Control Manager (SCM). To start the SCM, click
                    Start -> Run… and then enter Services.msc.
You can also specify a different user when installing Puppet. To
                do this, install using the CLI and specify the required MSI properties: PUPPET_AGENT_ACCOUNT_USER,PUPPET_AGENT_ACCOUNT_PASSWORD, and PUPPET_AGENT_ACCOUNT_DOMAIN.
Puppet agent’s user can be a local or domain user. If this user
                isn’t already a local administrator, the Puppet
                installer adds it to the Administrators group. The
                installer also grants Logon as Service to the user.


Managing systems with Puppet
        agent

In a normal Puppet
        configuration, every node periodically does configuration runs to revert unwanted changes
        and to pick up recent updates.
On Windows nodes, there are two main
            ways to do this:
Run Puppet as a service.
The easiest method. The Puppet agent service does configuration runs
                        at a set interval, which can be configured.
Run Puppet agent on
                        demand.
You can also use Bolt or deployMCollective to run on demand on many nodes.


Because the Windows version of the Puppet agent service is much simpler than the *nix version, there’s no real performance to be gained by
            running Puppet as a scheduled task. If you want scheduled
            configuration runs, use the Windows service.


Running Puppet agent as a
    service

The Puppet installer
    configures Puppet agent to run as a Windows service and starts it. No further action is needed. Puppet agent does configuration runs at a set interval.
Configuring the run
        interval
The Puppet agent
        service defaults to doing a configuration run every 30 minutes. If you don’t need frequent
        configuration runs, a longer run interval lets your Puppet
          primary servers handle many more agent nodes.
You can configure this with the runinterval setting in puppet.conf:# C:\ProgramData\PuppetLabs\puppet\etc\puppet.conf
[agent]
  runinterval = 2h

After you change the run interval, the next run happens on the previous schedule, and subsequent
        runs happen on the new schedule.
Configuring the service start up
        type
The Puppet agent service
        defaults to starting automatically. If you want to start it manually or disable it, you can
        configure this during installation.
To do this, install using the CLI and specify the PUPPET_AGENT_STARTUP_MODE MSI
        property.
You can also configure this after installation with the Service Control Manager (SCM). To start
        the SCM, click Start -> Run... and enter
          Services.msc.
You can also configure agent service with the sc.exe command. To
        prevent the service from starting on boot, run the following command from the Command Prompt
          (cmd.exe):sc config puppet start= demand

Important: The space after start= is mandatory and
          must be run in cmd.exe. This command won’t work from PowerShell.

To stop
        and restart the service, run the following
        commands:sc stop puppet
sc start puppet

To change the arguments used when triggering a Puppet agent run, add flags to the
        command:sc start puppet --debug --logdest eventlogThis
        example changes the level of detail that gets written to the Event Log.


Running Puppet agent on
        demand

Some sites prefer to run Puppet agent on demand, and others occasionally need to do an
        on-demand run. 
You can start Puppet agent runs while logged in to the
            target system, or remotely with Bolt or MCollective.
While logged in to the target system
On Windows, log in as an
                administrator, and start the configuration run by selecting Start -> Run Puppet Agent. If Windows prompts for User Account Control
                confirmation, click Yes.
                The status result of the run is shown in a command prompt window.

Running other Puppet
                commands
To run other Puppet-related commands, start a command
                prompt with administrative privileges. You can do so by right-clicking the
                    Command Prompt or Start Command Prompts with
                    Puppet program and clicking Run as
                    administrator. Click Yes if the system asks for UAC
                confirmation.

Remotely
Open source Puppet users can use
                    Bolt to run tasks and commands on remote systems. 
Alternatively, you can install MCollective and the puppet agent plugin to get similar capabilities, but Puppet doesn't provide standalone MCollective packages for Windows. 
Important: As of Puppet agent 5.5.4,
                        MCollective is deprecated and will be removed in a
                    future version of Puppet agent. If you use Puppet Enterprise, consider migrating from MCollective to Puppet orchestrator. If
                    you use open source Puppet, migrate MCollective agents and filters using tools like Bolt and the PuppetDB Puppet Query Language.





Disabling and re-enabling Puppet
      runs

Whether you’re troubleshooting errors, working in a
      maintenance window, or developing in a sandbox environment, you might need to temporarily
      disable the Puppet agent from running. 


Start a command prompt with Run as administrator.


To disable the agent, run:
puppet agent --disable "<MESSAGE>"


To enable the agent, run:
puppet agent --enable




Configuring Puppet agent on Windows


The Puppet agent comes with
        a default configuration that you might want to change.
Configure Puppet agent with puppet.conf, using the [agent] section, the [main]
            section, or both. For more information on which settings are relevant to Puppet agent, see important settings. 
Logging for Puppet agent on Windows systems
When running as a service, Puppet agent logs messages
                to the Windows Event Log. You can view its logs by
                browsing the Event Viewer. Click Control
                    Panel -> System and Security ->
                    Administrative Tools -> Event
                    Viewer.
By default, Puppet logs to the Application event log. However, you can configure Puppet to log to a separate Puppet log instead. 
To enable the Puppet log, create the requisite
                registry key by opening a command prompt and running one of the following
                commands:
Bash:

reg add HKLM\System\CurrentControlSet\Services\EventLog\Puppet\Puppet /v EventMessageFile /t REG_EXPAND_SZ /d "%SystemRoot%\System32\EventCreate.exe"


PowerShell and the New-EventLog
                cmdlet:if ([System.Diagnostics.Eventlog]::SourceExists("puppet")) { Remove-EventLog -Source 'puppet' } & New-EventLog -Source puppet -LogName Puppet

Note that for agents older than 5.5.17 on the 5.5.x stream, 6.4.4 on the 6.4.x stream
                and 6.8.0 on the primary server stream, use the same Bash command listed above, but
                the following PowerShell command
                instead:if ([System.Diagnostics.Eventlog]::SourceExists("puppet")) { Remove-EventLog -Source 'puppet' } & New-EventLog -Source puppet -LogName Puppet  -MessageResource "%SystemRoot%\System32\EventCreate.exe" 

After you add the registry key, you need to reboot your machine for the logging to be
                redirected.


Note: If you are using an older version of Puppet,
                    double check that you have the most up to date path to
                        EventCreate.exe.

For existing agents, these commands can be placed in an exec resource to configure
                agents going forward.


Note: Any previously recorded event log messages are not moved; only new messages
                    are recorded in the newly created Puppet log.

You can adjust how verbose the logs are with the log_level setting, which
                defaults to notice.
When running in the foreground with the --verbose,
                    --debug, or --test options, Puppet agent logs
                directly to the terminal.
When started with the --logdest <FILE> option,
                    Puppet agent logs to the file specified by
                    <FILE>. Note that there are no file size
                checks for the --logdest <FILE> option.

Reporting for Puppet agent on Windows systems
In addition to local logging, Puppet agent submits a
                report to the primary server after each run. This can be disabled by setting report = false in puppet.conf.

Setting Puppet agent CPU priority
When CPU usage is high, lower the priority of the Puppet agent service by using the process
                    priority setting, a cross platform configuration option. Process priority
                can also be set in the primary server configuration.


 




          Was this page helpful?
        
Yes
No







              Don’t fill this out if you’re human: 






Thank you for your feedback!

            Feel free to add a comment or suggestion.
            





Send
Please enter your feedback





              Don’t fill this out if you’re human: 







            We’re sorry to hear that! 
            Please tell us why so we can help.
          

            Enter your feedback and email. This form is sent to the Puppet docs team.
            We ask for your email as we might contact you regarding your feedback.
          

            If you need help with the product itself, visit Puppet Support
            or ask in Puppet Community on Slack.
          

            Feedback:
            






            Email Address:
            






            To learn about how Puppet uses your personal information,
            visit our privacy policy.
          


Send
Please enter your feedback and contact email

          If you leave us your email, we may contact you regarding your feedback.
          For more information on how Puppet uses your personal information, see
          our
          privacy policy.
        





            Don’t fill this out if you’re human: 








    See an issue? Please file a JIRA ticket in our
    [DOCUMENTATION]
      project.
  











Puppet by Perforce gives IT operations teams back their time and offers peace of mind with infrastructure automation that enables security and compliance.






Legal
Privacy Policy
Terms of Use
Security


©  Puppet, Inc., a Perforce company. All rights reserved.




Puppet and other identified trademarks are the property of Puppet, Inc., Perforce Software, Inc., or an affiliate. Such trademarks are claimed and/or registered in the U.S. and other countries and regions. All third-party trademarks are the property of their respective holders. References to third-party trademarks do not imply endorsement or sponsorship of any products or services by the trademark holder. Contact Puppet, Inc., for further details.

