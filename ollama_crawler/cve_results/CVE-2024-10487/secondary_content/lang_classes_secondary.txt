Title: Classes
URL: https://www.puppet.com/docs/puppet/7/lang_classes

Puppet.com
Forge
Education


                                    Try Puppet
                                


































        Docs
        






Products
Puppet Enterprise
Open Source Puppet
Bolt
Security Compliance Management
Continuous Delivery
Puppet Development Kit
Puppet DB
Puppet Plugin for VMware



        Support
        






Get
Technical Support Plans
Support Lifecycle Policy
New Puppet Enterprise Customer?



        Community
        






About Puppet
Company
Developer Experience
Community
Puppet Champions
Puppet Test Pilots
Community Calendar
Slack Channel







 









































PRODUCT AND VERSION


      Current product
      










      Current version
      








Puppet  7.34.0

Release notes

Puppet release notes
Puppet  7.34.0Security


Puppet known issues
Puppet Server release notes
Puppet Server known Issues
PuppetDB release notes (link)

Facter release notes
Facter 4.10.0
Facter 4.9.0
Facter 4.8.0
Facter 4.7.1
Facter 4.7.0
Facter 4.6.1
Facter 4.6.0
Facter 4.5.2


Facter known issues
What's new since Puppet 6?
Upgrading from Puppet 6 to Puppet 7

Experimental featuresMsgpack support

Archived documentation



Puppet overview
What is Puppet?
Why use Puppet desired state management?
Key concepts behind Puppet
The Puppet platform 
Puppet platform lifecycle 
Open source Puppet vs Puppet Enterprise (PE)
The Puppet ecosystem
Use cases
Glossary
Navigating the documentation



Set up Puppet

Install Puppet
System requirements
Installing Puppet  
Installing and configuring agents
Manually verify packages
Managing Platform versions



Configure Puppet settings
Puppet settings
Key configuration settings

Puppet's configuration files
puppet.conf: The main config file
environment.conf: Per-environment settings
fileserver.conf: Custom fileserver mount points
puppetdb.conf: PuppetDB server locations
autosign.conf: Basic certificate autosigning 
csr_attributes.yaml: Certificate extensions 
custom_trusted_oid_mapping.yaml: Short names for cert extension OIDs
device.conf: Network hardware access
routes.yaml: Advanced plugin routing


Adding file server mount points
Checking the values of settings
Editing settings on the command line
Configuration Reference



Upgrading
Upgrade Puppet Server

Upgrade agents
Upgrade agents using the puppet_agent module
Upgrade *nix agents
Upgrade Windows agents
Upgrade macOS agents


Upgrade PuppetDB



Environments
About environments
Creating environments
Environment isolation



Directories and files
Code and data directory (codedir)
Config directory (confdir)
Main manifest directory
The modulepath
SSL directory (ssldir)
Cache directory (vardir)


Report reference



Platform components

Puppet Server
About Puppet Server
Deprecated features
Server and agent compatibility
Installing Puppet Server

Configuring Puppet Server
Configuring Puppet Server

Puppet Server configuration files
auth.conf
ca.conf
global.conf
logback.xml
metrics.conf
product.conf
puppetserver.conf
web-routes.conf
webserver.conf


Migrating to the HOCON auth.conf format
Advanced logging configuration
Differing behavior in puppet.conf



Using and extending Puppet Server
Subcommands
Using Ruby gems
Intermediate CA
Infrastructure certificate revocation list (CRL)
External SSL termination

Server metrics
Monitoring Puppet Server metrics
HTTP Client Metrics


Tuning guide
Applying metrics to improve performance
Submitting usage telemetry
Scaling Puppet Server
Restarting Puppet Server"



Developer information
Developer debugging
Running from source
Tracing code events



Puppet Server HTTP API
Puppet Server HTTP API overview
PSON

Puppet v3 API
Catalog
Node
Facts
File Bucket File
File Content
File Metadata
Report



Puppet v4 APICatalog API


CA v1 API
Certificate
Certificate Request
Certificate Status
Certificate Revocation List
Expirations
Certificate Clean


Schemas (JSON)



API endpoints

Metrics API endpoints
v1 metrics
v2 (Jolokia) metrics



Status API endpoints
Services endpoint
Simple endpoint



Administrative API endpoints
Environment cache
JRuby pool



Server-specific Puppet API endpoints
Environment classes
Environment modules
Static file content





Certificate authority and SSL
Puppet Server CA commands
Intermediate CA
Autosigning certificate requests
CSR attributes and certificate extensions
Regenerating certificates in a Puppet deployment
External CA
External SSL termination





Facter  
Facter: CLI
Facter: Core Facts

Custom facts overviewEnvironment facts 

Writing custom facts
External facts
Configuring Facter with facter.conf


PuppetDB

Puppet services and tools
Puppet commands
Running Puppet commands on Windows  

primary Puppet serverAbout Puppet Server

Puppet agent on *nix systems
Puppet agent on Windows
Puppet apply
Puppet device



Puppet reports
Reporting
Report reference
Writing custom report processors
Report format



Life cycle of a Puppet run
Agent-server HTTPS communications
Catalog compilation
Static catalogs 





Using Puppet code
Classifying nodes
Managing environment content with a Puppetfile
Using content from Puppet Forge

Designing system configs (roles and profiles)
The roles and profiles method 
Roles and profiles example 
Designing advanced profiles 
Designing convenient roles 



Separating data (Hiera)
About Hiera  
Getting started with Hiera  
Configuring Hiera
Creating and editing data 
Looking up data with Hiera  
Writing new data backends 

Debugging Hiera
Unexpected values
Common errors


Upgrading to Hiera 5 



Use case examples
Manage NTP
Manage sudo 
Manage DNS
Manage firewall rules
Forge examples





Syntax and settings

The Puppet language
Puppet language overview
Puppet language syntax examples
The Puppet language style guide 
Files and paths on Windows  
Code comments 
Variables
Resources

Resource types
Resource Type Reference (Single-Page)
Built-in types
Optional resource types for Windows
Resource Type: exec
Using exec on Windows  
Resource Type: file
Using file on Windows
Resource Type: filebucket
Resource Type: group
Using user and group on Windows
Resource types overview
Resource Type: notify
Resource Type: package
Using package on Windows  
Resource Type: resources
Resource Type: schedule
Resource Type: service
Using service
Resource Type: stage
Resource Type: tidy
Resource Type: user


Relationships and ordering
Classes
Defined resource types
Bolt tasks
Expressions and operators
Conditional statements and expressions
Function calls
Built-in function reference
Node definitions

Facts and built-in variables
Accessing facts from Puppet code
Built-in variables


Reserved words and acceptable names

Custom resources

Develop types and providers with the Resource APIResource API reference


Low-level method for developing types and providers
Type development
Provider development
Creating resources





Custom functions
Custom functions overview 
Writing custom functions in the Puppet language

Writing custom functions in Ruby
Custom functions in Ruby overview
Ruby function signatures
Using special features in implementation methods
Iterative functions
Refactoring legacy 3.x functions



Deferring a function
Deferred functions overview
Using a template with Deferred values
Write a deferred function to store secrets
Integrations with secret stores





Values, data types, and aliases
Type aliases
Typecasting
Abstract data types
Arrays
Binary
Booleans
Data type syntax
Default
Error data type
Hashes
Numbers
Regular expressions
Resource and class references
Resource types
Sensitive
Strings
Time-related data types
Undef



Templates
Creating templates using Embedded Puppet
Creating templates using Embedded Ruby



Advanced constructs
Iteration and loops
Lambdas
Resource default statements
Resource collectors
Virtual resources
Exported resources
Tags
Run stages



Details of complex behaviors
Containment
Scope
Namespaces and autoloading


Securing sensitive data


Metaparameter reference
Configuration Reference
Built-in function reference

Puppet Man Pages

Core tools
Man Page: puppet agent
Man Page: puppet apply
Man Page: puppet module
Man Page: puppet resource
Man Page: puppet lookup



Occasionally useful
Man Page: puppet config
Man Page: puppet describe
Man Page: puppet device
Man Page: puppet doc
Man Page: puppet help
Man Page: puppet node
Man Page: puppet parser



Niche
Man Page: puppet catalog
Man Page: puppet facts
Man Page: puppet filebucket
Man Page: puppet report







Developing modules

Modules
Modules overview
Plug-ins in modules
Module cheat sheet
Installing and managing modules from the command line
Beginner's guide to writing modules
Module metadata
Documenting modules
Documenting modules with Puppet Strings  
Puppet Strings style guide

Publishing modulesUsing the Forge API

Contributing to Puppet modules


Puppet Development Kit (PDK)
Puppet VSCode extension

PowerShell DSC Resources
Converting DSC Resources
Distributing arbitrary DSC resources
Upgrading Puppet DSC modules 
Troubleshooting DSC Resources 


Ruby API for developing extensions


Classes

Classes are
                                named blocks of Puppet code that are
                                stored in modules and applied later when they are invoked by name.
                                You can add classes to a nodeâ€™s catalog by either declaring them in
                                your manifests or assigning them from an external node classifier
                                (ENC). Classes generally configure large or medium-sized chunks of
                                functionality, such as all of the packages, configuration files, and
                                services needed to run an application. 

The following video gives you an overview of
                                                  classes:






Defining classes

Defining a class makes it available for later use. It
    doesn't add any resources to the catalog â€” to do that, you must declare the class or assign it
    from an external node classifier (ENC).
Create a class
        by writing a class definition in a manifest (.pp) file. Store class manifests in the manifests/ directory of a module. Define only one class in a manifest, and give
        the manifest file the same name as the class. Puppet
        automatically loads any classes that are present in a valid module. See module fundamentals to
        learn more about module structure and usage.
A class contains all
        of its resources. This means any relationships formed with the class as a whole is extended
        to every resource in the class. Every resource in a class gets automatically tagged with the
        classâ€™s name and each of its namespace segments.
Classes can
        contain other classes, but you must use the contain function to explicitly specify when a class is contained. For more
        information, see the documentation about containing classes. A contained class is
        automatically tagged with the name of its container.


Tip:  Unlike many parts of Puppet code, class definitions aren't expressions, so you
          can't use them where a value is expected.

The general form of a class definition is: 
The class
            keyword.
The name of the class.
An optional parameter list, which consists of: 
An opening parenthesis.
A comma-separated list of parameters, such asString $myparam = "value". Each parameter consists
                of: 
An optional data type, which restricts the allowed values
                    for the parameter. If not specified, the data type defaults to Any. 
A variable name to represent the parameter, including the
                    dollar sign ($) prefix 
An optional equals sign (=) and default value, which must match the data type,
                    if one was specified.


An optional trailing comma after the last parameter.
A closing parenthesis.


Optionally, the inherits keyword followed by a single class name.
An opening curly brace.
A block of arbitrary Puppet code,
            which generally contains at least one resource declaration.
A closing curly brace.


For example, this class definition specifies no parameters:
        class base::linux {
  file { '/etc/passwd':
    owner => 'root',
    group => 'root',
    mode  => '0644',
  }
  file { '/etc/shadow':
    owner => 'root',
    group => 'root',
    mode  => '0440',
  }
}

This class definition creates a version parameter ($version) that accepts a String data type with a default
        value of 'latest'. It also includes file content from an embedded Ruby (ERB) template from the apache module.
        class apache (String $version = 'latest') {
  package {'httpd':
    ensure => $version, # Using the version parameter from above
    before => File['/etc/httpd.conf'],
  }
  file {'/etc/httpd.conf':
    ensure  => file,
    owner   => 'httpd',
    content => template('apache/httpd.conf.erb'), # Template from a module
  }
  service {'httpd':
    ensure    => running,
    enable    => true,
    subscribe => File['/etc/httpd.conf'],
  }
}

Class parameters and variables
Parameters allow a class to request external data. If a class needs to use data other than
        facts for configuration, use a parameter for that data. 
You can use class parameters as normal variables inside the class definition. The values of
        these variables are set based on user input when the class is declared, rather than with
        normal assignment statements. 
Supply default values for parameters whenever possible. If a class parameter lacks a
        default value, the parameter is considered required and the user must set a value, either in
        external data or as an override.
If you set a data type for each parameter, Puppet checks the
        parameter's value at runtime to make sure that it is the correct data type, and raises an
        error if the value is illegal. If you do not provide a data type for a parameter, the
        parameter accepts values of any data type.
The variables $title and $name are both set to the class
        name automatically, so you can't use them as parameters.

Setting class parameter defaults with Hiera data
To set class parameter defaults with Hiera data in your
        modules, set up a hierarchy in your module's hiera.yaml file and include
        the referenced data files in the data directory.
 For example, this hiera.yaml file, located in the root
        directory of the ntp module, uses the operating system fact
        to determine which class defaults to apply to the target system. Puppet first looks for a data file that matches the operating
        system of the target system: path:
          "os/%{facts.os.family}.yaml". If no matching path is found, Puppet uses defaults from the "common" data file
        instead.# ntp/hiera.yaml
---
version: 5
defaults:
  datadir: data
  data_hash: yaml_data
hierarchy:
  - name: "OS family"
    path: "os/%{facts.os.family}.yaml"

  - name: "common"
    path: "common.yaml"

The files in the example below specify the default values are located in the data directory:

Debian.yaml specifies the defaults for systems that
            return an operating system fact of Debian.

common.yaml specifies the defaults for all other
            systems.

# ntp/data/common.yaml
---
ntp::autoupdate: false
ntp::service_name: ntpd

# ntp/data/os/Debian.yaml
ntp::service_name: ntp



Tip:
If you are maintaining older modules, you might encounter cases where class parameter
          defaults are set with a parameter class, such as params.pp, and class inheritance. Update such modules to use Hiera data instead. Class inheritance can have unpredictable
          effects and makes troubleshooting difficult. For details about updating existing params
          classes to Hiera data, see data in modules.




Related information
Variables
Resources
Tags
Scope
Values, data types, and aliases
Namespaces and autoloading


Declaring classes

Declaring a class in a Puppet
    manifest adds all of its resources to the catalog.
You can declare
        classes in node definitions, at top scope in the site manifest, and in other classes or
        defined types. Classes are singletons â€” although a given class can behave very differently
        depending on how its parameters are set, the resources in it are evaluated only once per
        compilation. You can also assign classes to nodes with an external node classifier (ENC)
        .

Puppet has two main ways to declare classes: include-like and
        resource-like. Include-like declarations are the most common; they are flexible and
        idempotent, so you can safely repeat them without causing errors. Resource-like declarations
        are mostly useful if you want to pass parameters to the class but can't or don't use Hiera. Most ENCs assign classes with include-like behavior, but
        others assign them with resource-like behavior. See the ENC interface documentation or the documentation of your specific
        ENC for details.


CAUTION: Do not mix include-like and resource-like
          declarations for a given class. If you declare or assign a class using both styles, it can
          cause compilation failures.

Include-like declarations
Include-like resource declarations allow you to declare a class multiple times â€” but no
        matter how many times you add the class, it is added to the catalog only once. This allows
        classes or defined types to manage their own dependencies and allows you create overlapping
          role classes, in which a given node can have more than one role.
Include-like behavior relies on external data and defaults for class parameter values,
        which allows the external data source to act like cascading configuration files for all of
        your classes.
You can declare a class with this behavior with one of three functions:
          include, require, and contain.
 When a class is declared with an include-like declaration, Puppet takes the following actions, in order, for each of the
        class parameters:
Requests a value from the external data source, using the key <class
              name>::<parameter name>. For example, to get the
              apache class's version parameter, Puppet searches for apache::version.
Uses the default value, if one exists. 
Fails compilation with an error, if no value is found. 



The include function
The include function is the most common way to declare classes. Declaring
        a class with this function includes the class in the catalog. 
Tip: The
            include function refers only to inclusion in the catalog. You can
          include a class in another class's definition, but doing so does not mean one class
          contains the other; it only means the included class will be added to the catalog. If you
          want one class to contain another, use the contain function
          instead.

This function uses include-like behavior, so you can make multiple declarations and Puppet relies on external data for parameters. 
The include function accepts one of the following:
A single class name, such as apache.
A single class reference, such as Class['apache'].
A comma-separated list of class names or class references.
An array of class names or class references.


This single class name declaration declares the class only once and has no additional
        effect:include base::linux


This example declares a single class with a class
        reference:include Class['base::linux']

This example declares two classes in a list:
include base::linux, apache

This example declares two classes in an array:
$my_classes = ['base::linux', 'apache']
include $my_classes


The require function
The require function declares one or more classes, then causes them to
        become a dependency of the surrounding container. This function uses include-like behavior,
        so you can make multiple declarations, and Puppet relies on
        external data for parameters.

Tip:  The require function is used to declare classes and defined
        types. Do not confuse it with the require metaparameter, which is used to
        establish relationships between resources.
The require function accepts one of the following: 
A single class name, such as apache.
A single class reference, such as Class['apache'].
A comma-separated list of class names or class references.
An array of class names or class references.


 In this example, Puppet ensures that every resource in the
          apache class is applied before any resource in any
          apache::vhost
        instance:define apache::vhost (Integer $port, String $docroot, String $servername, String $vhost_name) {
  require apache
  ...
}


The contain function
The contain function is used inside another class definition to declare
        one or more classes and contain those classes in the surrounding class. This
        enforces ordering of classes. When you contain a class in another class, the relationships
        of the containing class extend to the contained class as well. For details about
        containment, see the documentation on containing classes.
This function uses include-like behavior, so you can make multiple declarations, and Puppet relies on external data for parameters.
The contain function accepts one of the following: 
A single class name, such as apache.
A single class reference, such as Class['apache'].
A comma-separated list of class names or class references.
An array of class names or class references.


In this example class declaration, the ntp class contains the
          ntp::service class. Any resource that forms a relationship with the
          ntp class also has the same relationship to the
          ntp::service class.class ntp {
  file { '/etc/ntp.conf':
    ...
    require => Package['ntp'],
    notify  => Class['ntp::service'],
  }
  contain ntp::service
  package { 'ntp':
    ...
  }
}

For example, if a resource has a before relationship with the
          ntp class, that resource will also be applied before the
          ntp::service class. Similarly, any resource that forms a
          require relationship with ntp will be applied after
          ntp::service.

The hiera_include function
The legacy Hiera function hiera_include has been
        deprecated. In Hiera 5 and later, instead of using hiera_include use lookup with the include function. For example: use lookup('classes', {merge => unique}).include instead of hiera_include('classes').

Resource-like declarations
Resource-like class declarations
        require that you declare a given class only once. They allow you to override class
        parameters at compile time â€” for any parameters you don't override, Puppet falls back to external data.
Resource-like declarations must be unique to avoid conflicting parameter values. Repeated
        overrides cause catalog compilation to be unreliable and dependent on order evaluation. This
        is because overridden values from the class declaration:
Always take precedence.
Are computed at compile time.
Do not have a built-in hierarchy for resolving conflicts.


 When a class is declared with a resource-like declaration, Puppet takes the following actions, in order, for each of the
        class parameters:
Uses the override value from the declaration, if present.
Requests a value from the external data source, using the key
              <class name>::<parameter
              name>. For example, to get the apache class's  version
            parameter, Puppet searches for apache::version.
Uses the default value.
Fails compilation with an error, if no value is found.


Resource-like declarations look like normal resource declarations,
        using the class pseudo-resource type. You
        can provide a value for any class parameter by specifying it as a resource attribute. 
You can also specify a value for any metaparameter. In such cases, every
        resource contained in the class will also have that metaparameter. However:
Any resource can specifically override metaparameter values
            received from its container.
Metaparameters that can take more than one value, such as the
            relationships metaparameters, merge the values from the container and any
            resource-specific values. 

You cannot apply the noop metaparameter to resource-like class declarations.



For example, this resource-like declaration declares a class with no
        parameters:class {'base::linux':}

This declaration declares a class and specifies the version
        parameter:class {'apache':
  version => '2.2.21',
}




Related information
Node definitions
Main manifest directory
Defined resource types
Relationships and ordering
Containment
Resources
Classifying nodes

 




          Was this page helpful?
        
Yes
No







              Donâ€™t fill this out if youâ€™re human: 






Thank you for your feedback!

            Feel free to add a comment or suggestion.
            





Send
Please enter your feedback





              Donâ€™t fill this out if youâ€™re human: 







            Weâ€™re sorry to hear that! 
            Please tell us why so we can help.
          

            Enter your feedback and email. This form is sent to the Puppet docs team.
            We ask for your email as we might contact you regarding your feedback.
          

            If you need help with the product itself, visit Puppet Support
            or ask in Puppet Community on Slack.
          

            Feedback:
            






            Email Address:
            






            To learn about how Puppet uses your personal information,
            visit our privacy policy.
          


Send
Please enter your feedback and contact email

          If you leave us your email, we may contact you regarding your feedback.
          For more information on how Puppet uses your personal information, see
          our
          privacy policy.
        





            Donâ€™t fill this out if youâ€™re human: 








    See an issue? Please file a JIRA ticket in our
    [DOCUMENTATION]
      project.
  











Puppet by Perforce gives IT operations teams back their time and offers peace of mind with infrastructure automation that enables security and compliance.






Legal
Privacy Policy
Terms of Use
Security


Â©  Puppet, Inc., a Perforce company. All rights reserved.




Puppet and other identified trademarks are the property of Puppet, Inc., Perforce Software, Inc., or an affiliate. Such trademarks are claimed and/or registered in the U.S. and other countries and regions. All third-party trademarks are the property of their respective holders. References to third-party trademarks do not imply endorsement or sponsorship of any products or services by the trademark holder. Contact Puppet, Inc., for further details.

