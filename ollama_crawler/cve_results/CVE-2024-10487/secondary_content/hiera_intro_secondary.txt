Title: About Hiera
URL: https://www.puppet.com/docs/puppet/7/hiera_intro

Puppet.com
Forge
Education


                                    Try Puppet
                                


































        Docs
        






Products
Puppet Enterprise
Open Source Puppet
Bolt
Security Compliance Management
Continuous Delivery
Puppet Development Kit
Puppet DB
Puppet Plugin for VMware



        Support
        






Get
Technical Support Plans
Support Lifecycle Policy
New Puppet Enterprise Customer?



        Community
        






About Puppet
Company
Developer Experience
Community
Puppet Champions
Puppet Test Pilots
Community Calendar
Slack Channel







 









































PRODUCT AND VERSION


      Current product
      










      Current version
      








Puppet  7.34.0

Release notes

Puppet release notes
Puppet  7.34.0Security


Puppet known issues
Puppet Server release notes
Puppet Server known Issues
PuppetDB release notes (link)

Facter release notes
Facter 4.10.0
Facter 4.9.0
Facter 4.8.0
Facter 4.7.1
Facter 4.7.0
Facter 4.6.1
Facter 4.6.0
Facter 4.5.2


Facter known issues
What's new since Puppet 6?
Upgrading from Puppet 6 to Puppet 7

Experimental featuresMsgpack support

Archived documentation



Puppet overview
What is Puppet?
Why use Puppet desired state management?
Key concepts behind Puppet
The Puppet platform 
Puppet platform lifecycle 
Open source Puppet vs Puppet Enterprise (PE)
The Puppet ecosystem
Use cases
Glossary
Navigating the documentation



Set up Puppet

Install Puppet
System requirements
Installing Puppet  
Installing and configuring agents
Manually verify packages
Managing Platform versions



Configure Puppet settings
Puppet settings
Key configuration settings

Puppet's configuration files
puppet.conf: The main config file
environment.conf: Per-environment settings
fileserver.conf: Custom fileserver mount points
puppetdb.conf: PuppetDB server locations
autosign.conf: Basic certificate autosigning 
csr_attributes.yaml: Certificate extensions 
custom_trusted_oid_mapping.yaml: Short names for cert extension OIDs
device.conf: Network hardware access
routes.yaml: Advanced plugin routing


Adding file server mount points
Checking the values of settings
Editing settings on the command line
Configuration Reference



Upgrading
Upgrade Puppet Server

Upgrade agents
Upgrade agents using the puppet_agent module
Upgrade *nix agents
Upgrade Windows agents
Upgrade macOS agents


Upgrade PuppetDB



Environments
About environments
Creating environments
Environment isolation



Directories and files
Code and data directory (codedir)
Config directory (confdir)
Main manifest directory
The modulepath
SSL directory (ssldir)
Cache directory (vardir)


Report reference



Platform components

Puppet Server
About Puppet Server
Deprecated features
Server and agent compatibility
Installing Puppet Server

Configuring Puppet Server
Configuring Puppet Server

Puppet Server configuration files
auth.conf
ca.conf
global.conf
logback.xml
metrics.conf
product.conf
puppetserver.conf
web-routes.conf
webserver.conf


Migrating to the HOCON auth.conf format
Advanced logging configuration
Differing behavior in puppet.conf



Using and extending Puppet Server
Subcommands
Using Ruby gems
Intermediate CA
Infrastructure certificate revocation list (CRL)
External SSL termination

Server metrics
Monitoring Puppet Server metrics
HTTP Client Metrics


Tuning guide
Applying metrics to improve performance
Submitting usage telemetry
Scaling Puppet Server
Restarting Puppet Server"



Developer information
Developer debugging
Running from source
Tracing code events



Puppet Server HTTP API
Puppet Server HTTP API overview
PSON

Puppet v3 API
Catalog
Node
Facts
File Bucket File
File Content
File Metadata
Report



Puppet v4 APICatalog API


CA v1 API
Certificate
Certificate Request
Certificate Status
Certificate Revocation List
Expirations
Certificate Clean


Schemas (JSON)



API endpoints

Metrics API endpoints
v1 metrics
v2 (Jolokia) metrics



Status API endpoints
Services endpoint
Simple endpoint



Administrative API endpoints
Environment cache
JRuby pool



Server-specific Puppet API endpoints
Environment classes
Environment modules
Static file content





Certificate authority and SSL
Puppet Server CA commands
Intermediate CA
Autosigning certificate requests
CSR attributes and certificate extensions
Regenerating certificates in a Puppet deployment
External CA
External SSL termination





Facter  
Facter: CLI
Facter: Core Facts

Custom facts overviewEnvironment facts 

Writing custom facts
External facts
Configuring Facter with facter.conf


PuppetDB

Puppet services and tools
Puppet commands
Running Puppet commands on Windows  

primary Puppet serverAbout Puppet Server

Puppet agent on *nix systems
Puppet agent on Windows
Puppet apply
Puppet device



Puppet reports
Reporting
Report reference
Writing custom report processors
Report format



Life cycle of a Puppet run
Agent-server HTTPS communications
Catalog compilation
Static catalogs 





Using Puppet code
Classifying nodes
Managing environment content with a Puppetfile
Using content from Puppet Forge

Designing system configs (roles and profiles)
The roles and profiles method 
Roles and profiles example 
Designing advanced profiles 
Designing convenient roles 



Separating data (Hiera)
About Hiera  
Getting started with Hiera  
Configuring Hiera
Creating and editing data 
Looking up data with Hiera  
Writing new data backends 

Debugging Hiera
Unexpected values
Common errors


Upgrading to Hiera 5 



Use case examples
Manage NTP
Manage sudo 
Manage DNS
Manage firewall rules
Forge examples





Syntax and settings

The Puppet language
Puppet language overview
Puppet language syntax examples
The Puppet language style guide 
Files and paths on Windows  
Code comments 
Variables
Resources

Resource types
Resource Type Reference (Single-Page)
Built-in types
Optional resource types for Windows
Resource Type: exec
Using exec on Windows  
Resource Type: file
Using file on Windows
Resource Type: filebucket
Resource Type: group
Using user and group on Windows
Resource types overview
Resource Type: notify
Resource Type: package
Using package on Windows  
Resource Type: resources
Resource Type: schedule
Resource Type: service
Using service
Resource Type: stage
Resource Type: tidy
Resource Type: user


Relationships and ordering
Classes
Defined resource types
Bolt tasks
Expressions and operators
Conditional statements and expressions
Function calls
Built-in function reference
Node definitions

Facts and built-in variables
Accessing facts from Puppet code
Built-in variables


Reserved words and acceptable names

Custom resources

Develop types and providers with the Resource APIResource API reference


Low-level method for developing types and providers
Type development
Provider development
Creating resources





Custom functions
Custom functions overview 
Writing custom functions in the Puppet language

Writing custom functions in Ruby
Custom functions in Ruby overview
Ruby function signatures
Using special features in implementation methods
Iterative functions
Refactoring legacy 3.x functions



Deferring a function
Deferred functions overview
Using a template with Deferred values
Write a deferred function to store secrets
Integrations with secret stores





Values, data types, and aliases
Type aliases
Typecasting
Abstract data types
Arrays
Binary
Booleans
Data type syntax
Default
Error data type
Hashes
Numbers
Regular expressions
Resource and class references
Resource types
Sensitive
Strings
Time-related data types
Undef



Templates
Creating templates using Embedded Puppet
Creating templates using Embedded Ruby



Advanced constructs
Iteration and loops
Lambdas
Resource default statements
Resource collectors
Virtual resources
Exported resources
Tags
Run stages



Details of complex behaviors
Containment
Scope
Namespaces and autoloading


Securing sensitive data


Metaparameter reference
Configuration Reference
Built-in function reference

Puppet Man Pages

Core tools
Man Page: puppet agent
Man Page: puppet apply
Man Page: puppet module
Man Page: puppet resource
Man Page: puppet lookup



Occasionally useful
Man Page: puppet config
Man Page: puppet describe
Man Page: puppet device
Man Page: puppet doc
Man Page: puppet help
Man Page: puppet node
Man Page: puppet parser



Niche
Man Page: puppet catalog
Man Page: puppet facts
Man Page: puppet filebucket
Man Page: puppet report







Developing modules

Modules
Modules overview
Plug-ins in modules
Module cheat sheet
Installing and managing modules from the command line
Beginner's guide to writing modules
Module metadata
Documenting modules
Documenting modules with Puppet Strings  
Puppet Strings style guide

Publishing modulesUsing the Forge API

Contributing to Puppet modules


Puppet Development Kit (PDK)
Puppet VSCode extension

PowerShell DSC Resources
Converting DSC Resources
Distributing arbitrary DSC resources
Upgrading Puppet DSC modules 
Troubleshooting DSC Resources 


Ruby API for developing extensions


About Hiera


Puppet’s strength is in reusable code. Code that
                        serves many needs must be configurable: put site-specific information in
                        external configuration data files, rather than in the code
                        itself.

Puppet uses Hiera to do two
                                    things:

Store the
                                                  configuration data in key-value pairs
Look up what data
                                                  a particular module needs for a given node during
                                                  catalog compilation

This is done via: 
Automatic Parameter Lookup for classes included
                                                  in the catalog
Explicit lookup calls 



Hiera’s hierarchical lookups
                                    follow a “defaults, with overrides” pattern, meaning you specify
                                    common data one time, and override it in situations where the
                                    default won’t work. Hiera uses
                                                Puppet’s facts to
                                    specify data sources, so you can structure your overrides to
                                    suit your infrastructure. While using facts for this purpose is
                                    common, data-sources can also be defined without the use of
                                    facts.

Puppet 5 comes with support for
                                    JSON, YAML, and EYAML files.
Related topics: Automatic Parameter
                                                Lookup.



Hiera hierarchies


Hiera looks up data by following a hierarchy — an ordered list of
    data sources. 
Hierarchies are configured in a hiera.yaml configuration file. Each level of the hierarchy tells Hiera how to access some kind of data source. A hierarchy is
      usually organized like
      this:---
version: 5
defaults:  # Used for any hierarchy level that omits these keys.
  datadir: data         # This path is relative to hiera.yaml's directory.
  data_hash: yaml_data  # Use the built-in YAML backend.

hierarchy:
  - name: "Per-node data"                   # Human-readable name.
    path: "nodes/%{trusted.certname}.yaml"  # File path, relative to datadir.
                                   # ^^^ IMPORTANT: include the file extension!

  - name: "Per-datacenter business group data" # Uses custom facts.
    path: "location/%{facts.whereami}/%{facts.group}.yaml"

  - name: "Global business group data"
    path: "groups/%{facts.group}.yaml"

  - name: "Per-datacenter secret data (encrypted)"
    lookup_key: eyaml_lookup_key   # Uses non-default backend.
    path: "secrets/%{facts.whereami}.eyaml"
    options:
      pkcs7_private_key: /etc/puppetlabs/puppet/eyaml/private_key.pkcs7.pem
      pkcs7_public_key:  /etc/puppetlabs/puppet/eyaml/public_key.pkcs7.pem

  - name: "Per-OS defaults"
    path: "os/%{facts.os.family}.yaml"

  - name: "Common data"
    path: "common.yaml"In
      this example, every level configures the path to a YAML file on disk.
Hierarchies interpolate
        variables 
Most levels of a hierarchy interpolate variables
        into their configuration:
        path: "os/%{facts.os.family}.yaml"

The percent-and-braces %{variable} syntax is a Hiera interpolation
        token. It is similar to the Puppet language’s ${expression} interpolation tokens. Wherever you
        use an interpolation token, Hiera determines the variable’s
        value and inserts it into the hierarchy.
The facts.os.family uses the Hiera special key.subkey notation for accessing elements of hashes and arrays. It is
        equivalent to $facts['os']['family'] in the
          Puppet language but the 'dot' notation produces an empty
        string instead of raising an error if parts of the data is missing. Make sure that an empty
        interpolation does not end up matching an unintended path.
You can
        only interpolate values into certain parts of the config file. For more info, see the
          hiera.yaml format
        reference.
With node-specific variables, each node gets a
        customized set of paths to data. The hierarchy is always the same.

Hiera searches the hierarchy in order 
After Hiera replaces the variables to make a list
        of concrete data sources, it checks those data sources in the order they were written.
Generally, if a data source doesn’t exist, or doesn’t specify a value for
        the current key, Hiera skips it and moves on to the next
        source, until it finds one that exists — then it uses it. Note that this is the default
        merge strategy, but does not always apply, for example, Hiera
        can use data from all data sources and merge the result.
Earlier
        data sources have priority over later ones. In the example above, the node-specific data has
        the highest priority, and can override data from any other level. Business group data is
        separated into local and global sources, with the local one overriding the global one.
        Common data used by all nodes always goes last.
That’s how Hiera’s “defaults, with overrides” approach to data works — you
        specify common data at lower levels of the hierarchy, and override it at higher levels for
        groups of nodes with special needs.
Layered hierarchies 

Hiera uses layers of data with a hiera.yaml for each layer.
Each layer can
        configure its own independent hierarchy. Before a lookup, Hiera combines them into a single super-hierarchy: global → environment → module.


Note: There is a fourth layer - default_hierarchy - that can be used in a module’s
            hiera.yaml. It only
          comes into effect when there is no data for a key in any of the other regular
          hierarchiesAssume the example above is an environment hierarchy (in the production
        environment). If we also had the following global hierarchy:
        ---
version: 5
hierarchy:
  - name: "Data exported from our old self-service config tool"
    path: "selfserve/%{trusted.certname}.json"
    data_hash: json_data
    datadir: dataAnd
        the NTP module had the following hierarchy for default
        data:---
version: 5
hierarchy:
  - name: "OS values"
    path: "os/%{facts.os.name}.yaml"
  - name: "Common values"
    path: "common.yaml"
defaults:
  data_hash: yaml_data
  datadir: data

Then in a lookup for the ntp::servers key, thrush.example.com would use the following combined hierarchy:


<CODEDIR>/data/selfserve/thrush.example.com.json


<CODEDIR>/environments/production/data/nodes/thrush.example.com.yaml


<CODEDIR>/environments/production/data/location/belfast/ops.yaml


<CODEDIR>/environments/production/data/groups/ops.yaml


<CODEDIR>/environments/production/data/os/Debian.yaml


<CODEDIR>/environments/production/data/common.yaml


<CODEDIR>/environments/production/modules/ntp/data/os/Ubuntu.yaml


<CODEDIR>/environments/production/modules/ntp/data/common.yaml


The combined hierarchy works the same way as a layer hierarchy. Hiera skips empty data sources, and either returns the first
        found value or merges all found values. 


Note: By default, datadir refers to the directory named ‘data’ next to the hiera.yaml.

Tips for making a good
        hierarchy


Make a short hierarchy. Data files are easier to work with.

Use the roles and profiles method to manage less data in Hiera. Sorting hundreds of class parameters is easier
              than sorting thousands.


If the built-in facts don’t provide an easy way to represent
              differences in your infrastructure, make custom facts. For example, create a custom
              datacenter fact that is based on information particular to your network layout so that
              each datacenter is uniquely identifiable.


Give each environment – production, test, development – its own
              hierarchy.



Related topics: codedir, confdir. 



Hiera configuration layers 


Hiera uses three independent layers of configuration. Each
        layer has its own hierarchy, and they’re linked into one super-hierarchy before doing a
        lookup.
The three layers are searched in the following order: global →
            environment → module. Hiera searches every data source in
            the global layer’s hierarchy before checking any source in the environment layer.
The global layer 
The configuration file for the global layer is located, by
                default, in $confdir/hiera.yaml. You can change the location by changing the
                    hiera_config
                setting in puppet.conf.

Hiera has one global hierarchy. Because it goes
                before the environment layer, it’s useful for temporary overrides, for example, when
                your ops team needs to bypass its normal change processes.
The global layer is the only place where legacy Hiera 3 backends can be used - it’s an important piece of the transition period when
                you migrate you backends to support Hiera 5. It
                supports the following config formats: hiera.yaml v5, hiera.yaml v3 (deprecated).
Other than the above use cases, try to avoid the global layer. Specify all normal
                data in the environment layer.
The environment layer
                
The configuration file for the environment layer is located, by default, in <ENVIRONMENT DIR>/hiera.yaml.
The
                environment layer is where most of your Hiera data
                hierarchy definition happens. Every Puppet
                environment has its own hierarchy configuration, which applies to nodes in that
                environment. Supported config formats include: v5, v3 (deprecated).
The module layer 
The configuration file for a module layer is located, by default,
                in a module's <MODULE>/hiera.yaml.
The module layer
                sets default values and merge behavior for a module’s class parameters. It is a
                convenient alternative to the params.pp pattern. 


Note: To get the exact same behaviour as params.pp, use the
                        default_hierarchy, as those bindings are excluded from merges.
                    When placed in the regular hierarchy in the module’s hierarchy the bindings are
                    merged when a merge lookup is performed.

It comes last in Hiera’s lookup
                order, so environment data set by a user overrides the default data set by the
                module’s author.
Every module can have its own hierarchy
                configuration. You can only bind data for keys in the module’s namespace. For
                example: 







Lookup key
Relevant module hierarchy





ntp::servers 


ntp




jenkins::port


jenkins




secure_server 


(none)






Hiera uses the ntp module’s hierarchy when looking up ntp::servers, but uses
                the  jenkins
                module’s hierarchy when looking up jenkins::port. Hiera
                never checks the module for a key beginning with jenkins::.
When
                you use the lookup function for keys that don’t have a namespace (for example,
                    secure_server),
                the module layer is not consulted.
The three-layer system
                means that each environment has its own hierarchy, and so do modules. You can make
                hierarchy changes on an environment-by-environment basis. Module data is also
                customizable.

 




          Was this page helpful?
        
Yes
No







              Don’t fill this out if you’re human: 






Thank you for your feedback!

            Feel free to add a comment or suggestion.
            





Send
Please enter your feedback





              Don’t fill this out if you’re human: 







            We’re sorry to hear that! 
            Please tell us why so we can help.
          

            Enter your feedback and email. This form is sent to the Puppet docs team.
            We ask for your email as we might contact you regarding your feedback.
          

            If you need help with the product itself, visit Puppet Support
            or ask in Puppet Community on Slack.
          

            Feedback:
            






            Email Address:
            






            To learn about how Puppet uses your personal information,
            visit our privacy policy.
          


Send
Please enter your feedback and contact email

          If you leave us your email, we may contact you regarding your feedback.
          For more information on how Puppet uses your personal information, see
          our
          privacy policy.
        





            Don’t fill this out if you’re human: 








    See an issue? Please file a JIRA ticket in our
    [DOCUMENTATION]
      project.
  











Puppet by Perforce gives IT operations teams back their time and offers peace of mind with infrastructure automation that enables security and compliance.






Legal
Privacy Policy
Terms of Use
Security


©  Puppet, Inc., a Perforce company. All rights reserved.




Puppet and other identified trademarks are the property of Puppet, Inc., Perforce Software, Inc., or an affiliate. Such trademarks are claimed and/or registered in the U.S. and other countries and regions. All third-party trademarks are the property of their respective holders. References to third-party trademarks do not imply endorsement or sponsorship of any products or services by the trademark holder. Contact Puppet, Inc., for further details.

