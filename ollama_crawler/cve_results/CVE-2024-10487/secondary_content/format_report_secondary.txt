Title: Report format
URL: https://www.puppet.com/docs/puppet/7/format_report

Puppet.com
Forge
Education


                                    Try Puppet
                                


































        Docs
        






Products
Puppet Enterprise
Open Source Puppet
Bolt
Security Compliance Management
Continuous Delivery
Puppet Development Kit
Puppet DB
Puppet Plugin for VMware



        Support
        






Get
Technical Support Plans
Support Lifecycle Policy
New Puppet Enterprise Customer?



        Community
        






About Puppet
Company
Developer Experience
Community
Puppet Champions
Puppet Test Pilots
Community Calendar
Slack Channel







 









































PRODUCT AND VERSION


      Current product
      










      Current version
      








Puppet  7.34.0

Release notes

Puppet release notes
Puppet  7.34.0Security


Puppet known issues
Puppet Server release notes
Puppet Server known Issues
PuppetDB release notes (link)

Facter release notes
Facter 4.10.0
Facter 4.9.0
Facter 4.8.0
Facter 4.7.1
Facter 4.7.0
Facter 4.6.1
Facter 4.6.0
Facter 4.5.2


Facter known issues
What's new since Puppet 6?
Upgrading from Puppet 6 to Puppet 7

Experimental featuresMsgpack support

Archived documentation



Puppet overview
What is Puppet?
Why use Puppet desired state management?
Key concepts behind Puppet
The Puppet platform 
Puppet platform lifecycle 
Open source Puppet vs Puppet Enterprise (PE)
The Puppet ecosystem
Use cases
Glossary
Navigating the documentation



Set up Puppet

Install Puppet
System requirements
Installing Puppet  
Installing and configuring agents
Manually verify packages
Managing Platform versions



Configure Puppet settings
Puppet settings
Key configuration settings

Puppet's configuration files
puppet.conf: The main config file
environment.conf: Per-environment settings
fileserver.conf: Custom fileserver mount points
puppetdb.conf: PuppetDB server locations
autosign.conf: Basic certificate autosigning 
csr_attributes.yaml: Certificate extensions 
custom_trusted_oid_mapping.yaml: Short names for cert extension OIDs
device.conf: Network hardware access
routes.yaml: Advanced plugin routing


Adding file server mount points
Checking the values of settings
Editing settings on the command line
Configuration Reference



Upgrading
Upgrade Puppet Server

Upgrade agents
Upgrade agents using the puppet_agent module
Upgrade *nix agents
Upgrade Windows agents
Upgrade macOS agents


Upgrade PuppetDB



Environments
About environments
Creating environments
Environment isolation



Directories and files
Code and data directory (codedir)
Config directory (confdir)
Main manifest directory
The modulepath
SSL directory (ssldir)
Cache directory (vardir)


Report reference



Platform components

Puppet Server
About Puppet Server
Deprecated features
Server and agent compatibility
Installing Puppet Server

Configuring Puppet Server
Configuring Puppet Server

Puppet Server configuration files
auth.conf
ca.conf
global.conf
logback.xml
metrics.conf
product.conf
puppetserver.conf
web-routes.conf
webserver.conf


Migrating to the HOCON auth.conf format
Advanced logging configuration
Differing behavior in puppet.conf



Using and extending Puppet Server
Subcommands
Using Ruby gems
Intermediate CA
Infrastructure certificate revocation list (CRL)
External SSL termination

Server metrics
Monitoring Puppet Server metrics
HTTP Client Metrics


Tuning guide
Applying metrics to improve performance
Submitting usage telemetry
Scaling Puppet Server
Restarting Puppet Server"



Developer information
Developer debugging
Running from source
Tracing code events



Puppet Server HTTP API
Puppet Server HTTP API overview
PSON

Puppet v3 API
Catalog
Node
Facts
File Bucket File
File Content
File Metadata
Report



Puppet v4 APICatalog API


CA v1 API
Certificate
Certificate Request
Certificate Status
Certificate Revocation List
Expirations
Certificate Clean


Schemas (JSON)



API endpoints

Metrics API endpoints
v1 metrics
v2 (Jolokia) metrics



Status API endpoints
Services endpoint
Simple endpoint



Administrative API endpoints
Environment cache
JRuby pool



Server-specific Puppet API endpoints
Environment classes
Environment modules
Static file content





Certificate authority and SSL
Puppet Server CA commands
Intermediate CA
Autosigning certificate requests
CSR attributes and certificate extensions
Regenerating certificates in a Puppet deployment
External CA
External SSL termination





Facter  
Facter: CLI
Facter: Core Facts

Custom facts overviewEnvironment facts 

Writing custom facts
External facts
Configuring Facter with facter.conf


PuppetDB

Puppet services and tools
Puppet commands
Running Puppet commands on Windows  

primary Puppet serverAbout Puppet Server

Puppet agent on *nix systems
Puppet agent on Windows
Puppet apply
Puppet device



Puppet reports
Reporting
Report reference
Writing custom report processors
Report format



Life cycle of a Puppet run
Agent-server HTTPS communications
Catalog compilation
Static catalogs 





Using Puppet code
Classifying nodes
Managing environment content with a Puppetfile
Using content from Puppet Forge

Designing system configs (roles and profiles)
The roles and profiles method 
Roles and profiles example 
Designing advanced profiles 
Designing convenient roles 



Separating data (Hiera)
About Hiera  
Getting started with Hiera  
Configuring Hiera
Creating and editing data 
Looking up data with Hiera  
Writing new data backends 

Debugging Hiera
Unexpected values
Common errors


Upgrading to Hiera 5 



Use case examples
Manage NTP
Manage sudo 
Manage DNS
Manage firewall rules
Forge examples





Syntax and settings

The Puppet language
Puppet language overview
Puppet language syntax examples
The Puppet language style guide 
Files and paths on Windows  
Code comments 
Variables
Resources

Resource types
Resource Type Reference (Single-Page)
Built-in types
Optional resource types for Windows
Resource Type: exec
Using exec on Windows  
Resource Type: file
Using file on Windows
Resource Type: filebucket
Resource Type: group
Using user and group on Windows
Resource types overview
Resource Type: notify
Resource Type: package
Using package on Windows  
Resource Type: resources
Resource Type: schedule
Resource Type: service
Using service
Resource Type: stage
Resource Type: tidy
Resource Type: user


Relationships and ordering
Classes
Defined resource types
Bolt tasks
Expressions and operators
Conditional statements and expressions
Function calls
Built-in function reference
Node definitions

Facts and built-in variables
Accessing facts from Puppet code
Built-in variables


Reserved words and acceptable names

Custom resources

Develop types and providers with the Resource APIResource API reference


Low-level method for developing types and providers
Type development
Provider development
Creating resources





Custom functions
Custom functions overview 
Writing custom functions in the Puppet language

Writing custom functions in Ruby
Custom functions in Ruby overview
Ruby function signatures
Using special features in implementation methods
Iterative functions
Refactoring legacy 3.x functions



Deferring a function
Deferred functions overview
Using a template with Deferred values
Write a deferred function to store secrets
Integrations with secret stores





Values, data types, and aliases
Type aliases
Typecasting
Abstract data types
Arrays
Binary
Booleans
Data type syntax
Default
Error data type
Hashes
Numbers
Regular expressions
Resource and class references
Resource types
Sensitive
Strings
Time-related data types
Undef



Templates
Creating templates using Embedded Puppet
Creating templates using Embedded Ruby



Advanced constructs
Iteration and loops
Lambdas
Resource default statements
Resource collectors
Virtual resources
Exported resources
Tags
Run stages



Details of complex behaviors
Containment
Scope
Namespaces and autoloading


Securing sensitive data


Metaparameter reference
Configuration Reference
Built-in function reference

Puppet Man Pages

Core tools
Man Page: puppet agent
Man Page: puppet apply
Man Page: puppet module
Man Page: puppet resource
Man Page: puppet lookup



Occasionally useful
Man Page: puppet config
Man Page: puppet describe
Man Page: puppet device
Man Page: puppet doc
Man Page: puppet help
Man Page: puppet node
Man Page: puppet parser



Niche
Man Page: puppet catalog
Man Page: puppet facts
Man Page: puppet filebucket
Man Page: puppet report







Developing modules

Modules
Modules overview
Plug-ins in modules
Module cheat sheet
Installing and managing modules from the command line
Beginner's guide to writing modules
Module metadata
Documenting modules
Documenting modules with Puppet Strings  
Puppet Strings style guide

Publishing modulesUsing the Forge API

Contributing to Puppet modules


Puppet Development Kit (PDK)
Puppet VSCode extension

PowerShell DSC Resources
Converting DSC Resources
Distributing arbitrary DSC resources
Upgrading Puppet DSC modules 
Troubleshooting DSC Resources 


Ruby API for developing extensions


Report format


Puppet 7 generates report format 12.
Puppet::Transaction::Report









Property
Type
Description




host
string
The host that generated this report.


time
datetime
When the Puppet run began.


logs
array
Zero or more Puppet::Util::Log objects.


metrics
hash
Maps from string (metric category) to
                Puppet::Util::Metric.


resource_statuses
hash
Maps from resource name to Puppet::Resource::Status



configuration_version
string or integer
The configuration version of the Puppet run.
                This is a string for user-specified versioning schemes. Otherwise it is an integer
                representing seconds since the Unix epoch.


transaction_uuid
string
A UUID covering the transaction. The query parameters for the catalog retrieval
                include the same UUID.


code_id
string
The ID of the code input to the compiler.


job_id
string, or null
The ID of the job in which this transaction occurred.


catalog_uuid
string
A primary server generated catalog UUID, useful for connecting a single catalog
                to multiple reports.


server_used
string
The name of the primary server used to compile the catalog. If failover
                occurred, this holds the first primary server successfully contacted. If this run
                had no primary server (for example, a puppet apply run), this field
                is blank.


report_format
string or integer

"12" or 12



puppet_version
string
The version of the Puppet agent.


status
string
The transaction status: failed, changed, or unchanged.


transaction_completed
Boolean
Whether the transaction completed. For instance, if the transaction had an
                unrescued exception, transaction_completed = false.


noop
Boolean
Whether the Puppet run was in no-operation mode
                when it ran.


noop_pending
Boolean
 Whether there are changes that were not applied because of no-operation
                mode.


environment
string
The environment that was used for the Puppet
                run.


corrective_change
Boolean
True if a change or no-operation event in this report was caused by an
                unexpected change to the system between Puppet
                runs.


cached_catalog_status
string
The status of the cached catalog used in the run: not_used,
                  explicitly_requested, or on_failure.




Puppet::Util::Log









Property
Type
Description




file
string
The path and filename of the manifest file that triggered the log message. This
                property is not always present.


line
integer
The manifest file's line number that triggered the log message. This property
                is not always present.


level
symbol
The severity level of the message :debug,
                  :info, :notice, :warning,
                  :err, :alert, :emerg,
                  :crit.


message
string
The text of the message.


source
string
The origin of the log message. This could be a resource, a property of a
                resource, or the string "Puppet".


tags
array
Each array element is a string.


time
datetime
The time at which the message was sent.




Puppet::Util::Metric
A Puppet::Util::Metric object represents all the metrics in a single
        category.









Property
Type
Description




name
string
Specifies the name of the metric category. This is the same as the key
                associated with this metric in the metrics hash of the
                  Puppet::Transaction::Report.


label
string
The name of the metric formatted as a title. Underscores are replaced with
                spaces and the first word is capitalized.


values
array
All the metric values within this category. Each value is in the form
                  [name, label, value], where name is the
                particular metric as a string, label is the metric name formatted
                as a title, and value is the metric quantity as an integer or a
                float.



The metrics that appear in a report are part of a fixed set and arranged in the following categories:
time
Includes a metric for every resource type for which there is at least one resource
              in the catalog, plus two additional metrics: config_retrieval and
                total. Each value in the time category is a
                float.In an inspect report, there is an additional inspect
                metric.

resources
Includes the metrics failed, out_of_sync,
                changed, and total. Each value in the
                resources category is an integer.
events
Includes up to five metrics: success, failure,
                audit, noop, and total.
                total is always present; the others are present when their values
              are non-zero. Each value in the events category is an integer.
changes
Includes one metric, total. Its value is an integer.


Note: Failed reports contain no metrics.


Puppet::Resource::Status
A Puppet::Resource::Status object represents the status of a single
        resource.









Property
Type
Description




resource_type
string
The resource type, capitalized.


title
title
The resource title.


resource
string
The resource name, in the form Type[title]. This is always the
                same as the key that corresponds to this Puppet::Resource::Status
                object in the resource_statuses hash. Deprecated.


provider_used
string
The name of the provider used by the resource.


file
string
The path and filename of the manifest file that declared the resource.


line
integer
The line number in the manifest file that declared the resource.


evaluation_time
float
The amount of time, in seconds, taken to evaluate the resource. Not present in
                inspect reports.


change_count
integer
The number of properties that changed. Always 0
                in inspect reports.


out_of_sync_count
integer
The number of properties that were out of sync. Always 0 in inspect reports.


tags
array
The strings with which the resource is tagged.


time
datetime
The time at which the resource was evaluated.


events
array
The Puppet::Transaction::Event objects for the
                resource.


out_of_sync
Boolean
True when out_of_sync_count > 0, otherwise false.
                Deprecated.


changed
Boolean
True when change_count > 0, otherwise false.
                Deprecated.


skipped
Boolean
True when the resource was skipped, otherwise false.


failed
Boolean
True when Puppet experienced an error while
                evaluating this resource, otherwise false. Deprecated.


failed_to_restart
Boolean
True when Puppet experienced an error while
                trying to restart this resource, for example, when a Service resource has been
                notified from another resource.


containment_path
array
An array of strings; each element represents a container (type or class) that,
                together, make up the path of the resource in the catalog.




Puppet::Transaction::Event
A Puppet::Transaction::Event object represents a single event for a single
        resource.









Property
Type
Description




audited
Boolean
True when this property is being audited, otherwise false. True in inspect
                reports.


property
string
The property for which the event occurred. This value is missing if the
                provider errored out before it could be determined.


previous_value
string, array, or hash
The value of the property before the change (if any) was applied. This value is
                missing if the provider errored out before it could be determined.


desired_value
string, array, or hash
The value specified in the manifest. Absent in inspect reports. This value is
                missing if the provider errored out before it could be determined.


historical_value
string, array, or hash
The audited value from a previous run of Puppet,
                if known. Otherwise nil. Absent in inspect reports. This value is missing if the
                provider errored out before it could be determined.


message
string
The log message generated by this event.


name
symbol
The name of the event. Absent in inspect reports.


status
string
The event status:

success: Property was out of sync and was successfully
                    changed to be in sync.

failure: Property was out of sync and couldn’t be changed to
                    be in sync due to an error.

noop: Property was out of sync but wasn’t changed because the
                    run was in no-operation mode. 

audit: Property was in sync and was being audited. Inspect
                    reports are always in audit status. 




redacted
Boolean
Whether this event has been redacted.


time
datetime
The time at which the property was evaluated.


corrective_change
Boolean
True if this event was caused by an unexpected change to the system between Puppet runs.




Changes since report format 8
Most of report format 12 is backwards compatible with formats 9-11, but includes the
        following changes:

Version 8: transaction_completed was added to Puppet::Transaction::Report

Version 9: provider_used was added to Puppet::Resource::Status

Version 10: failed_to_restart was added to Puppet::Resource::Status

Version 11: server_used was added to Puppet::Transaction::Report

Version 12: master_used was removed from Puppet::Transaction::Report


Note that version 12 only exists in Puppet 7. For more
        information, see the report schema. 


 




          Was this page helpful?
        
Yes
No







              Don’t fill this out if you’re human: 






Thank you for your feedback!

            Feel free to add a comment or suggestion.
            





Send
Please enter your feedback





              Don’t fill this out if you’re human: 







            We’re sorry to hear that! 
            Please tell us why so we can help.
          

            Enter your feedback and email. This form is sent to the Puppet docs team.
            We ask for your email as we might contact you regarding your feedback.
          

            If you need help with the product itself, visit Puppet Support
            or ask in Puppet Community on Slack.
          

            Feedback:
            






            Email Address:
            






            To learn about how Puppet uses your personal information,
            visit our privacy policy.
          


Send
Please enter your feedback and contact email

          If you leave us your email, we may contact you regarding your feedback.
          For more information on how Puppet uses your personal information, see
          our
          privacy policy.
        





            Don’t fill this out if you’re human: 








    See an issue? Please file a JIRA ticket in our
    [DOCUMENTATION]
      project.
  











Puppet by Perforce gives IT operations teams back their time and offers peace of mind with infrastructure automation that enables security and compliance.






Legal
Privacy Policy
Terms of Use
Security


©  Puppet, Inc., a Perforce company. All rights reserved.




Puppet and other identified trademarks are the property of Puppet, Inc., Perforce Software, Inc., or an affiliate. Such trademarks are claimed and/or registered in the U.S. and other countries and regions. All third-party trademarks are the property of their respective holders. References to third-party trademarks do not imply endorsement or sponsorship of any products or services by the trademark holder. Contact Puppet, Inc., for further details.

