Title: External CA
URL: https://www.puppet.com/docs/puppet/7/config_ssl_external_ca

Puppet.com
Forge
Education


                                    Try Puppet
                                


































        Docs
        






Products
Puppet Enterprise
Open Source Puppet
Bolt
Security Compliance Management
Continuous Delivery
Puppet Development Kit
Puppet DB
Puppet Plugin for VMware



        Support
        






Get
Technical Support Plans
Support Lifecycle Policy
New Puppet Enterprise Customer?



        Community
        






About Puppet
Company
Developer Experience
Community
Puppet Champions
Puppet Test Pilots
Community Calendar
Slack Channel







 









































PRODUCT AND VERSION


      Current product
      










      Current version
      








Puppet  7.34.0

Release notes

Puppet release notes
Puppet  7.34.0Security


Puppet known issues
Puppet Server release notes
Puppet Server known Issues
PuppetDB release notes (link)

Facter release notes
Facter 4.10.0
Facter 4.9.0
Facter 4.8.0
Facter 4.7.1
Facter 4.7.0
Facter 4.6.1
Facter 4.6.0
Facter 4.5.2


Facter known issues
What's new since Puppet 6?
Upgrading from Puppet 6 to Puppet 7

Experimental featuresMsgpack support

Archived documentation



Puppet overview
What is Puppet?
Why use Puppet desired state management?
Key concepts behind Puppet
The Puppet platform 
Puppet platform lifecycle 
Open source Puppet vs Puppet Enterprise (PE)
The Puppet ecosystem
Use cases
Glossary
Navigating the documentation



Set up Puppet

Install Puppet
System requirements
Installing Puppet  
Installing and configuring agents
Manually verify packages
Managing Platform versions



Configure Puppet settings
Puppet settings
Key configuration settings

Puppet's configuration files
puppet.conf: The main config file
environment.conf: Per-environment settings
fileserver.conf: Custom fileserver mount points
puppetdb.conf: PuppetDB server locations
autosign.conf: Basic certificate autosigning 
csr_attributes.yaml: Certificate extensions 
custom_trusted_oid_mapping.yaml: Short names for cert extension OIDs
device.conf: Network hardware access
routes.yaml: Advanced plugin routing


Adding file server mount points
Checking the values of settings
Editing settings on the command line
Configuration Reference



Upgrading
Upgrade Puppet Server

Upgrade agents
Upgrade agents using the puppet_agent module
Upgrade *nix agents
Upgrade Windows agents
Upgrade macOS agents


Upgrade PuppetDB



Environments
About environments
Creating environments
Environment isolation



Directories and files
Code and data directory (codedir)
Config directory (confdir)
Main manifest directory
The modulepath
SSL directory (ssldir)
Cache directory (vardir)


Report reference



Platform components

Puppet Server
About Puppet Server
Deprecated features
Server and agent compatibility
Installing Puppet Server

Configuring Puppet Server
Configuring Puppet Server

Puppet Server configuration files
auth.conf
ca.conf
global.conf
logback.xml
metrics.conf
product.conf
puppetserver.conf
web-routes.conf
webserver.conf


Migrating to the HOCON auth.conf format
Advanced logging configuration
Differing behavior in puppet.conf



Using and extending Puppet Server
Subcommands
Using Ruby gems
Intermediate CA
Infrastructure certificate revocation list (CRL)
External SSL termination

Server metrics
Monitoring Puppet Server metrics
HTTP Client Metrics


Tuning guide
Applying metrics to improve performance
Submitting usage telemetry
Scaling Puppet Server
Restarting Puppet Server"



Developer information
Developer debugging
Running from source
Tracing code events



Puppet Server HTTP API
Puppet Server HTTP API overview
PSON

Puppet v3 API
Catalog
Node
Facts
File Bucket File
File Content
File Metadata
Report



Puppet v4 APICatalog API


CA v1 API
Certificate
Certificate Request
Certificate Status
Certificate Revocation List
Expirations
Certificate Clean


Schemas (JSON)



API endpoints

Metrics API endpoints
v1 metrics
v2 (Jolokia) metrics



Status API endpoints
Services endpoint
Simple endpoint



Administrative API endpoints
Environment cache
JRuby pool



Server-specific Puppet API endpoints
Environment classes
Environment modules
Static file content





Certificate authority and SSL
Puppet Server CA commands
Intermediate CA
Autosigning certificate requests
CSR attributes and certificate extensions
Regenerating certificates in a Puppet deployment
External CA
External SSL termination





Facter  
Facter: CLI
Facter: Core Facts

Custom facts overviewEnvironment facts 

Writing custom facts
External facts
Configuring Facter with facter.conf


PuppetDB

Puppet services and tools
Puppet commands
Running Puppet commands on Windows  

primary Puppet serverAbout Puppet Server

Puppet agent on *nix systems
Puppet agent on Windows
Puppet apply
Puppet device



Puppet reports
Reporting
Report reference
Writing custom report processors
Report format



Life cycle of a Puppet run
Agent-server HTTPS communications
Catalog compilation
Static catalogs 





Using Puppet code
Classifying nodes
Managing environment content with a Puppetfile
Using content from Puppet Forge

Designing system configs (roles and profiles)
The roles and profiles method 
Roles and profiles example 
Designing advanced profiles 
Designing convenient roles 



Separating data (Hiera)
About Hiera  
Getting started with Hiera  
Configuring Hiera
Creating and editing data 
Looking up data with Hiera  
Writing new data backends 

Debugging Hiera
Unexpected values
Common errors


Upgrading to Hiera 5 



Use case examples
Manage NTP
Manage sudo 
Manage DNS
Manage firewall rules
Forge examples





Syntax and settings

The Puppet language
Puppet language overview
Puppet language syntax examples
The Puppet language style guide 
Files and paths on Windows  
Code comments 
Variables
Resources

Resource types
Resource Type Reference (Single-Page)
Built-in types
Optional resource types for Windows
Resource Type: exec
Using exec on Windows  
Resource Type: file
Using file on Windows
Resource Type: filebucket
Resource Type: group
Using user and group on Windows
Resource types overview
Resource Type: notify
Resource Type: package
Using package on Windows  
Resource Type: resources
Resource Type: schedule
Resource Type: service
Using service
Resource Type: stage
Resource Type: tidy
Resource Type: user


Relationships and ordering
Classes
Defined resource types
Bolt tasks
Expressions and operators
Conditional statements and expressions
Function calls
Built-in function reference
Node definitions

Facts and built-in variables
Accessing facts from Puppet code
Built-in variables


Reserved words and acceptable names

Custom resources

Develop types and providers with the Resource APIResource API reference


Low-level method for developing types and providers
Type development
Provider development
Creating resources





Custom functions
Custom functions overview 
Writing custom functions in the Puppet language

Writing custom functions in Ruby
Custom functions in Ruby overview
Ruby function signatures
Using special features in implementation methods
Iterative functions
Refactoring legacy 3.x functions



Deferring a function
Deferred functions overview
Using a template with Deferred values
Write a deferred function to store secrets
Integrations with secret stores





Values, data types, and aliases
Type aliases
Typecasting
Abstract data types
Arrays
Binary
Booleans
Data type syntax
Default
Error data type
Hashes
Numbers
Regular expressions
Resource and class references
Resource types
Sensitive
Strings
Time-related data types
Undef



Templates
Creating templates using Embedded Puppet
Creating templates using Embedded Ruby



Advanced constructs
Iteration and loops
Lambdas
Resource default statements
Resource collectors
Virtual resources
Exported resources
Tags
Run stages



Details of complex behaviors
Containment
Scope
Namespaces and autoloading


Securing sensitive data


Metaparameter reference
Configuration Reference
Built-in function reference

Puppet Man Pages

Core tools
Man Page: puppet agent
Man Page: puppet apply
Man Page: puppet module
Man Page: puppet resource
Man Page: puppet lookup



Occasionally useful
Man Page: puppet config
Man Page: puppet describe
Man Page: puppet device
Man Page: puppet doc
Man Page: puppet help
Man Page: puppet node
Man Page: puppet parser



Niche
Man Page: puppet catalog
Man Page: puppet facts
Man Page: puppet filebucket
Man Page: puppet report







Developing modules

Modules
Modules overview
Plug-ins in modules
Module cheat sheet
Installing and managing modules from the command line
Beginner's guide to writing modules
Module metadata
Documenting modules
Documenting modules with Puppet Strings  
Puppet Strings style guide

Publishing modulesUsing the Forge API

Contributing to Puppet modules


Puppet Development Kit (PDK)
Puppet VSCode extension

PowerShell DSC Resources
Converting DSC Resources
Distributing arbitrary DSC resources
Upgrading Puppet DSC modules 
Troubleshooting DSC Resources 


Ruby API for developing extensions


External CA

This information describes the supported and tested
        configurations for external CAs in this version of Puppet. If
        you have an external CA use case that isnâ€™t listed here, contact Puppet so we can learn more about it.
Supported external CA configurations
This version of Puppet
                supports some external CA configurations, however not every possible
                configuration is supported. 
We fully support the following setup options:

Single CA which directly issues SSL certificates.



Puppet Server functioning as an intermediate
                            CA.



Fully supported by Puppet means:

If issues arise that are considered bugs, we'll fix them as soon as
                            possible. 


If issues arise in any other external CA setup that are
                            considered feature requests, weâ€™ll consider whether to expand
                            our support.






Option 1: Puppet Server functioning as an
        intermediate CA


Puppet Server can operate as an intermediate CA to an external root
        CA.
See Using Puppet Server as an intermediate
                certificate authority.


Option 2: Single CA

When Puppet uses its
        internal CA, it defaults to a single CA configuration. A single externally issued CA can
        also be used in a similar manner.



This is an all or nothing configuration rather than a mix-and-match.
            When using an external CA, the built-in Puppet CA
            service must be disabled and cannot be used to issue SSL certificates.

Note:
Puppet cannot automatically distribute certificates
                in this configuration.



Puppet Server




Configure Puppet Server in three steps: 

Disable the internal CA service.


Ensure that the certname does not change.


Put certificates and keys in place on disk.






Edit the Puppet Server/etc/puppetlabs/puppetserver/services.d/ca.cfg file:


To disable the internal CA, comment out
                        puppetlabs.services.ca.certificate-authority-service/certificate-authority-service
                     and uncomment
                        puppetlabs.services.ca.certificate-authority-disabled-service/certificate-authority-disabled-service.




Set a static value for the certname setting in puppet.conf:


[server]
certname = puppetserver.example.com
Setting
                  a static value prevents any confusion if the machine's hostname changes. The value
                  must match the certname youâ€™ll use to issue the server's certificate, and it must
                  not be blank.



Put the credentials from your external CA on disk in
               the correct locations. These locations must match whatâ€™s configured in
                  your webserver.conf
                  file. 

If you havenâ€™t changed those settings, run the following
                  commands to find the default locations. 







Credential
File location




Server SSL certificate

puppet config print hostcert --section
                                    server



Server SSL certificate private
                                 key

puppet config print hostprivkey --section
                                    server



Root CA certificate

puppet config print localcacert --section
                                    server



Root certificate revocation list

puppet config print hostcrl --section
                                    server





If youâ€™ve put the credentials in the correct locations, you
                  don't need to change any additional settings.






Puppet agent

You donâ€™t need to change any settings. Put the external
        credentials into the correct filesystem locations. You can run the following commands to
        find the appropriate locations.








Credential
File location




Agent SSL certificate
puppet config print hostcert --section
                            agent


Agent SSL certificate private key
puppet config print hostprivkey --section
                                agent


Root CA certificate
puppet config print localcacert --section
                                agent


Root certificate revocation list
puppet config print hostcrl --section
                            agent





General notes and requirements


PEM encoding of credentials is mandatory

Puppet expects its SSL credentials to be
                    in .pem format.

Normal Puppet certificate requirements still
                apply
Any Puppet Server certificate must contain the DNS name,
                either as the Subject Common Name (CN) or as a Subject Alternative Name (SAN), that
                agent nodes use to attempt contact with the server.

Client DN authentication 

Puppet Server is hosted by a Jetty web server; therefore.
                For client authentication purposes, Puppet Server can
                extract the distinguished name (DN) from a client certificate provided during SSL
                negotiation with the Jetty web server.
The use of an X-Client-DN request header is supported
                for cases where SSL termination of client requests needs to be done on an external
                server. See External SSL Termination with Puppet Server for
                details.

Web server configuration
Use the webserver.conf file for
                    Puppet Server to configure Jetty. Several ssl- settings can be added to the webserver.conf file to
                enable the web server to use the correct SSL configuration:



ssl-cert: The value of puppet server --configprint hostcert. Equivalent
                        to the â€˜SSLCertificateFileâ€™ Apache config setting.



ssl-key: The value of puppet server --configprint hostprivkey. Equivalent to the
                        â€˜SSLCertificateKeyFileâ€™ Apache config setting.



ssl-ca-cert: The value of puppet server --configprint localcacert.
                        Equivalent to the â€˜SSLCACertificateFileâ€™ Apache config setting.



ssl-cert-chain: Equivalent to the
                        â€˜SSLCertificateChainFileâ€™ Apache config setting. Optional.



ssl-crl-path: The path to the CRL file to
                        use. Optional.


An example webserver.conf file might look something
                like this: webserver: { 
 client-auth : want  
 ssl-host    : 0.0.0.0  
 ssl-port    : 8140  
 ssl-cert    : /path/to/server.pem  
 ssl-key     : /path/to/server.key  
 ssl-ca-cert : /path/to/ca_bundle.pem  
 ssl-cert-chain : /path/to/ca_bundle.pem  
 ssl-crl-path : /etc/puppetlabs/puppet/ssl/crl.pem
}For more information on these settings, seeConfiguring the Web Server Service. 

Restart required 
After the above changes are made to Puppet Serverâ€™s
                configuration files, youâ€™ll have to restart the Puppet Server service for the new settings to take effect.


 




          Was this page helpful?
        
Yes
No







              Donâ€™t fill this out if youâ€™re human: 






Thank you for your feedback!

            Feel free to add a comment or suggestion.
            





Send
Please enter your feedback





              Donâ€™t fill this out if youâ€™re human: 







            Weâ€™re sorry to hear that! 
            Please tell us why so we can help.
          

            Enter your feedback and email. This form is sent to the Puppet docs team.
            We ask for your email as we might contact you regarding your feedback.
          

            If you need help with the product itself, visit Puppet Support
            or ask in Puppet Community on Slack.
          

            Feedback:
            






            Email Address:
            






            To learn about how Puppet uses your personal information,
            visit our privacy policy.
          


Send
Please enter your feedback and contact email

          If you leave us your email, we may contact you regarding your feedback.
          For more information on how Puppet uses your personal information, see
          our
          privacy policy.
        





            Donâ€™t fill this out if youâ€™re human: 








    See an issue? Please file a JIRA ticket in our
    [DOCUMENTATION]
      project.
  











Puppet by Perforce gives IT operations teams back their time and offers peace of mind with infrastructure automation that enables security and compliance.






Legal
Privacy Policy
Terms of Use
Security


Â©  Puppet, Inc., a Perforce company. All rights reserved.




Puppet and other identified trademarks are the property of Puppet, Inc., Perforce Software, Inc., or an affiliate. Such trademarks are claimed and/or registered in the U.S. and other countries and regions. All third-party trademarks are the property of their respective holders. References to third-party trademarks do not imply endorsement or sponsorship of any products or services by the trademark holder. Contact Puppet, Inc., for further details.

