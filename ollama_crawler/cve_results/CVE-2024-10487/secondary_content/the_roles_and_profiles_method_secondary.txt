Title: The roles and profiles method
URL: https://www.puppet.com/docs/puppet/7/the_roles_and_profiles_method

Puppet.com
Forge
Education


                                    Try Puppet
                                


































        Docs
        






Products
Puppet Enterprise
Open Source Puppet
Bolt
Security Compliance Management
Continuous Delivery
Puppet Development Kit
Puppet DB
Puppet Plugin for VMware



        Support
        






Get
Technical Support Plans
Support Lifecycle Policy
New Puppet Enterprise Customer?



        Community
        






About Puppet
Company
Developer Experience
Community
Puppet Champions
Puppet Test Pilots
Community Calendar
Slack Channel







 









































PRODUCT AND VERSION


      Current product
      










      Current version
      








Puppet  7.34.0

Release notes

Puppet release notes
Puppet  7.34.0Security


Puppet known issues
Puppet Server release notes
Puppet Server known Issues
PuppetDB release notes (link)

Facter release notes
Facter 4.10.0
Facter 4.9.0
Facter 4.8.0
Facter 4.7.1
Facter 4.7.0
Facter 4.6.1
Facter 4.6.0
Facter 4.5.2


Facter known issues
What's new since Puppet 6?
Upgrading from Puppet 6 to Puppet 7

Experimental featuresMsgpack support

Archived documentation



Puppet overview
What is Puppet?
Why use Puppet desired state management?
Key concepts behind Puppet
The Puppet platform 
Puppet platform lifecycle 
Open source Puppet vs Puppet Enterprise (PE)
The Puppet ecosystem
Use cases
Glossary
Navigating the documentation



Set up Puppet

Install Puppet
System requirements
Installing Puppet  
Installing and configuring agents
Manually verify packages
Managing Platform versions



Configure Puppet settings
Puppet settings
Key configuration settings

Puppet's configuration files
puppet.conf: The main config file
environment.conf: Per-environment settings
fileserver.conf: Custom fileserver mount points
puppetdb.conf: PuppetDB server locations
autosign.conf: Basic certificate autosigning 
csr_attributes.yaml: Certificate extensions 
custom_trusted_oid_mapping.yaml: Short names for cert extension OIDs
device.conf: Network hardware access
routes.yaml: Advanced plugin routing


Adding file server mount points
Checking the values of settings
Editing settings on the command line
Configuration Reference



Upgrading
Upgrade Puppet Server

Upgrade agents
Upgrade agents using the puppet_agent module
Upgrade *nix agents
Upgrade Windows agents
Upgrade macOS agents


Upgrade PuppetDB



Environments
About environments
Creating environments
Environment isolation



Directories and files
Code and data directory (codedir)
Config directory (confdir)
Main manifest directory
The modulepath
SSL directory (ssldir)
Cache directory (vardir)


Report reference



Platform components

Puppet Server
About Puppet Server
Deprecated features
Server and agent compatibility
Installing Puppet Server

Configuring Puppet Server
Configuring Puppet Server

Puppet Server configuration files
auth.conf
ca.conf
global.conf
logback.xml
metrics.conf
product.conf
puppetserver.conf
web-routes.conf
webserver.conf


Migrating to the HOCON auth.conf format
Advanced logging configuration
Differing behavior in puppet.conf



Using and extending Puppet Server
Subcommands
Using Ruby gems
Intermediate CA
Infrastructure certificate revocation list (CRL)
External SSL termination

Server metrics
Monitoring Puppet Server metrics
HTTP Client Metrics


Tuning guide
Applying metrics to improve performance
Submitting usage telemetry
Scaling Puppet Server
Restarting Puppet Server"



Developer information
Developer debugging
Running from source
Tracing code events



Puppet Server HTTP API
Puppet Server HTTP API overview
PSON

Puppet v3 API
Catalog
Node
Facts
File Bucket File
File Content
File Metadata
Report



Puppet v4 APICatalog API


CA v1 API
Certificate
Certificate Request
Certificate Status
Certificate Revocation List
Expirations
Certificate Clean


Schemas (JSON)



API endpoints

Metrics API endpoints
v1 metrics
v2 (Jolokia) metrics



Status API endpoints
Services endpoint
Simple endpoint



Administrative API endpoints
Environment cache
JRuby pool



Server-specific Puppet API endpoints
Environment classes
Environment modules
Static file content





Certificate authority and SSL
Puppet Server CA commands
Intermediate CA
Autosigning certificate requests
CSR attributes and certificate extensions
Regenerating certificates in a Puppet deployment
External CA
External SSL termination





Facter  
Facter: CLI
Facter: Core Facts

Custom facts overviewEnvironment facts 

Writing custom facts
External facts
Configuring Facter with facter.conf


PuppetDB

Puppet services and tools
Puppet commands
Running Puppet commands on Windows  

primary Puppet serverAbout Puppet Server

Puppet agent on *nix systems
Puppet agent on Windows
Puppet apply
Puppet device



Puppet reports
Reporting
Report reference
Writing custom report processors
Report format



Life cycle of a Puppet run
Agent-server HTTPS communications
Catalog compilation
Static catalogs 





Using Puppet code
Classifying nodes
Managing environment content with a Puppetfile
Using content from Puppet Forge

Designing system configs (roles and profiles)
The roles and profiles method 
Roles and profiles example 
Designing advanced profiles 
Designing convenient roles 



Separating data (Hiera)
About Hiera  
Getting started with Hiera  
Configuring Hiera
Creating and editing data 
Looking up data with Hiera  
Writing new data backends 

Debugging Hiera
Unexpected values
Common errors


Upgrading to Hiera 5 



Use case examples
Manage NTP
Manage sudo 
Manage DNS
Manage firewall rules
Forge examples





Syntax and settings

The Puppet language
Puppet language overview
Puppet language syntax examples
The Puppet language style guide 
Files and paths on Windows  
Code comments 
Variables
Resources

Resource types
Resource Type Reference (Single-Page)
Built-in types
Optional resource types for Windows
Resource Type: exec
Using exec on Windows  
Resource Type: file
Using file on Windows
Resource Type: filebucket
Resource Type: group
Using user and group on Windows
Resource types overview
Resource Type: notify
Resource Type: package
Using package on Windows  
Resource Type: resources
Resource Type: schedule
Resource Type: service
Using service
Resource Type: stage
Resource Type: tidy
Resource Type: user


Relationships and ordering
Classes
Defined resource types
Bolt tasks
Expressions and operators
Conditional statements and expressions
Function calls
Built-in function reference
Node definitions

Facts and built-in variables
Accessing facts from Puppet code
Built-in variables


Reserved words and acceptable names

Custom resources

Develop types and providers with the Resource APIResource API reference


Low-level method for developing types and providers
Type development
Provider development
Creating resources





Custom functions
Custom functions overview 
Writing custom functions in the Puppet language

Writing custom functions in Ruby
Custom functions in Ruby overview
Ruby function signatures
Using special features in implementation methods
Iterative functions
Refactoring legacy 3.x functions



Deferring a function
Deferred functions overview
Using a template with Deferred values
Write a deferred function to store secrets
Integrations with secret stores





Values, data types, and aliases
Type aliases
Typecasting
Abstract data types
Arrays
Binary
Booleans
Data type syntax
Default
Error data type
Hashes
Numbers
Regular expressions
Resource and class references
Resource types
Sensitive
Strings
Time-related data types
Undef



Templates
Creating templates using Embedded Puppet
Creating templates using Embedded Ruby



Advanced constructs
Iteration and loops
Lambdas
Resource default statements
Resource collectors
Virtual resources
Exported resources
Tags
Run stages



Details of complex behaviors
Containment
Scope
Namespaces and autoloading


Securing sensitive data


Metaparameter reference
Configuration Reference
Built-in function reference

Puppet Man Pages

Core tools
Man Page: puppet agent
Man Page: puppet apply
Man Page: puppet module
Man Page: puppet resource
Man Page: puppet lookup



Occasionally useful
Man Page: puppet config
Man Page: puppet describe
Man Page: puppet device
Man Page: puppet doc
Man Page: puppet help
Man Page: puppet node
Man Page: puppet parser



Niche
Man Page: puppet catalog
Man Page: puppet facts
Man Page: puppet filebucket
Man Page: puppet report







Developing modules

Modules
Modules overview
Plug-ins in modules
Module cheat sheet
Installing and managing modules from the command line
Beginner's guide to writing modules
Module metadata
Documenting modules
Documenting modules with Puppet Strings  
Puppet Strings style guide

Publishing modulesUsing the Forge API

Contributing to Puppet modules


Puppet Development Kit (PDK)
Puppet VSCode extension

PowerShell DSC Resources
Converting DSC Resources
Distributing arbitrary DSC resources
Upgrading Puppet DSC modules 
Troubleshooting DSC Resources 


Ruby API for developing extensions


The roles and profiles method 

The roles and profiles
        method is the most reliable way to build reusable, configurable, and refactorable system
        configurations. 
It's not a straightforward recipe: you must think hard about the
            nature of your infrastructure and your team. It's also not a final state: expect to
            refine your configurations over time. Instead, it's an approach to designing your infrastructure's interface â€” sealing away incidental
            complexity, surfacing the significant complexity, and making sure your data behaves
            predictably.
Building configurations without roles and profiles
                
Without roles and profiles, people typically build
                system configurations in their node classifier or main manifest, using Hiera to handle tricky inheritance problems. A
                standard approach is to create a group of similar nodes and assign classes to it,
                then create child groups with extra classes for nodes that have additional needs.
                Another common pattern is to put everything in Hiera,
                using a very large hierarchy that reflects every variation in the
                infrastructure.
If this works for you, then it works! You
                might not need roles and profiles. But most people find direct building gets
                difficult to understand and maintain over time.


Configuring roles and profiles 

Roles and profiles are two
      extra layers of indirection between your node classifier and your component modules. 
The roles and profiles method separates your code into three levels:

Component modules â€” Normal modules that manage one particular technology, for example
        puppetlabs/apache.
Profiles â€” Wrapper classes that use multiple component modules to configure a layered
        technology stack.
Roles â€” Wrapper classes that use multiple profiles to build a complete system
        configuration.

These extra layers of indirection might seem like they add complexity, but they give you a
      space to build practical, business-specific interfaces to the configuration you care most
      about. A better interface makes hierarchical data easier to use, makes system configurations
      easier to read, and makes refactoring easier.

In short, from top to bottom:

Your node classifier assigns one role class to a group of nodes. The role
        manages a whole system configuration, so no other classes are needed. The node classifier
        does not configure the role in any way.
That role class declares some profile classes with include,
        and does nothing else. For example:
          class role::jenkins::primaryserver {
    include profile::base
    include profile::server
    include profile::jenkins::primaryserver
  }           



Each profile configures a layered technology stack, using multiple component modules and
        the built-in resource types. (In the diagram,
          profile::jenkins::primaryserver uses puppet/jenkins, puppetlabs/apt, a
        home-built backup module, and some package and file
        resources.)
Profiles can take configuration data from the console, Hiera, or Puppet lookup. (In the diagram, three different
        hierarchy levels contribute data.)
Classes from component modules are always declared via a profile, and never assigned
        directly to a node. 
If a component class has parameters, you specify them in the profile; never use
              Hiera or Puppet lookup
            to override component class params. 





Rules for profile classes 

There are rules for writing profile
                              classes.

Make sure you can safely
                                                  include any profile multiple times â€”
                                                  don't use resource-like declarations on them.
Profiles can include
                                                  other profiles.
Profiles own all the class
                                                  parameters for their component classes. If the
                                                  profile omits one, that means you definitely want
                                                  the default value; the component class shouldn't
                                                  use a value from Hiera data. If you need
                                                  to set a class parameter that was omitted
                                                  previously, refactor the profile.
There are three ways a
                                                  profile can get the information it needs to
                                                  configure component classes: 
If your business always
                                                  uses the same value for a given parameter,
                                                  hardcode it.
If you can't hardcode it,
                                                  try to compute it based on information you already
                                                  have.
Finally, if you can't
                                                  compute it, look it up in your data. To reduce
                                                  lookups, identify cases where multiple parameters
                                                  can be derived from the answer to a single
                                                  question.

This is a game of
                                                  trade-offs. Hardcoded parameters are the easiest
                                                  to read, and also the least flexible. Putting
                                                  values in your Hiera data is very flexible, but can be very
                                                  difficult to read: you might have to look through
                                                  a lot of files (or run a lot of lookup commands)
                                                  to see what the profile is actually doing. Using
                                                  conditional logic to derive a value is a
                                                  middle-ground. Aim for the most readable option
                                                  you can get away with.




Rules for role classes 

There are rules for writing role classes.

The only thing roles should do is declare profile classes
                    with include. Don't declare any
                    component classes or normal resources in a role.Optionally, roles can use conditional logic to decide which profiles to
                        use. 

Roles should not have any class parameters of their
                    own.
Roles should not set class parameters for any profiles.
                    (Those are all handled by data lookup.)
The name of a role should be based on your business's conversational name
                    for the type of node it manages.This means that if you regularly call a
                        machine a "Jenkins primary server," it makes sense to write a role named
                            role::jenkins::primaryserver. But if you call it a "web
                        server," you shouldn't use a name like role::nginx â€” go
                        with something like role::web instead.




Methods for data lookup 

Profiles usually require some amount of configuration, and
        they must use data lookup to get it.
This profile uses the automatic class parameter lookup to request
            data. 
# Example Hiera data
profile::jenkins::jenkins_port: 8000
profile::jenkins::java_dist: jre
profile::jenkins::java_version: '8'
 
# Example manifest
class profile::jenkins (
  Integer $jenkins_port,
  String  $java_dist,
  String  $java_version
) {
# ...
This profile omits the parameters and uses the lookup
            function:class profile::jenkins {
  $jenkins_port = lookup('profile::jenkins::jenkins_port', {value_type => String, default_value => '9091'})
  $java_dist    = lookup('profile::jenkins::java_dist',    {value_type => String, default_value => 'jdk'})
  $java_version = lookup('profile::jenkins::java_version', {value_type => String, default_value => 'latest'})
  # ...

In general, class parameters are preferable to lookups. They integrate
            better with tools like Puppet strings, and they're a
            reliable and well-known place to look for configuration. But using lookup is a fine approach if you aren't comfortable
            with automatic parameter lookup. Some people prefer the full lookup key to be written in
            the profile, so they can globally grep for it.

 




          Was this page helpful?
        
Yes
No







              Donâ€™t fill this out if youâ€™re human: 






Thank you for your feedback!

            Feel free to add a comment or suggestion.
            





Send
Please enter your feedback





              Donâ€™t fill this out if youâ€™re human: 







            Weâ€™re sorry to hear that! 
            Please tell us why so we can help.
          

            Enter your feedback and email. This form is sent to the Puppet docs team.
            We ask for your email as we might contact you regarding your feedback.
          

            If you need help with the product itself, visit Puppet Support
            or ask in Puppet Community on Slack.
          

            Feedback:
            






            Email Address:
            






            To learn about how Puppet uses your personal information,
            visit our privacy policy.
          


Send
Please enter your feedback and contact email

          If you leave us your email, we may contact you regarding your feedback.
          For more information on how Puppet uses your personal information, see
          our
          privacy policy.
        





            Donâ€™t fill this out if youâ€™re human: 








    See an issue? Please file a JIRA ticket in our
    [DOCUMENTATION]
      project.
  











Puppet by Perforce gives IT operations teams back their time and offers peace of mind with infrastructure automation that enables security and compliance.






Legal
Privacy Policy
Terms of Use
Security


Â©  Puppet, Inc., a Perforce company. All rights reserved.




Puppet and other identified trademarks are the property of Puppet, Inc., Perforce Software, Inc., or an affiliate. Such trademarks are claimed and/or registered in the U.S. and other countries and regions. All third-party trademarks are the property of their respective holders. References to third-party trademarks do not imply endorsement or sponsorship of any products or services by the trademark holder. Contact Puppet, Inc., for further details.

