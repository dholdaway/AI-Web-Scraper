Title:  CWE-416: Use After Free 
URL: https://cvefeed.io/cwe/detail/cwe-416-use-after-free

CVE ID, Product, Vendor ...
                    




















 Defualt (light mode)
 Dark
 Auto (system defualt)







Login
















Clear







































Menu


 
Homepage 


 
Search 


 
Cisa KEV Catalog 


 
CVE Newsroom 

Vulnerabilities

  Latests



  Exploit Predictions



  Initial Access Intel



  Product Maturity Index



  Vendors Security Posture



  Telegram & RSS Feed


Knowledge Base

  CVE Metrics & Stats



  CWE Definitions



  CAPEC Definitions


cvefeed.io

  About & Contact


































CWE-416: Use After Free













Description
Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.









Submission Date :
July 19, 2006, midnight












Modification Date :
2023-10-26 00:00:00+00:00












Organization :

                                        MITRE















Extended Description
The use of previously-freed memory can have any number of adverse consequences, ranging from the corruption of valid data to the execution of arbitrary code, depending on the instantiation and timing of the flaw. The simplest way data corruption may occur involves the system's reuse of the freed memory. Use-after-free errors have two common and sometimes overlapping causes:Error conditions and other exceptional circumstances.Confusion over which part of the program is responsible for freeing the memory.In this scenario, the memory in question is allocated to another pointer validly at some point after it has been freed. The original pointer to the freed memory is used again and points to somewhere within the new allocation. As the data is changed, it corrupts the validly used memory; this induces undefined behavior in the process.If the newly allocated data happens to hold a class, in C++ for example, various function pointers may be scattered within the heap data. If one of these function pointers is overwritten with an address to valid shellcode, execution of arbitrary code can be achieved.








Example Vulnerable Codes


Example - 1

The following example demonstrates the weakness.

char *buf1R1;char *buf2R1;char *buf2R2;char *buf3R2;buf1R1 = (char *) malloc(BUFSIZER1);buf2R1 = (char *) malloc(BUFSIZER1);free(buf2R1);buf2R2 = (char *) malloc(BUFSIZER2);buf3R2 = (char *) malloc(BUFSIZER2);strncpy(buf2R1, argv[1], BUFSIZER1-1);free(buf1R1);free(buf2R2);free(buf3R2);#include <stdio.h>#include <unistd.h>#define BUFSIZER1 512#define BUFSIZER2 ((BUFSIZER1/2) - 8)int main(int argc, char **argv) {}
Example - 2

The following code illustrates a use after free error:

abrt = 1;free(ptr);
logError("operation aborted before commit", ptr);char* ptr = (char*)malloc (SIZE);if (err) {}...if (abrt) {}When an error occurs, the pointer is immediately freed. However, this pointer is later incorrectly used in the logError function.









Related Weaknesses


This table shows the weaknesses and high level categories that are related
                            to this weakness. These relationships are defined to give an overview of the different
                            insight to similar items that may exist at higher and lower levels of abstraction.

                        








CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')


 Go to
                                            









CWE-123: Write-what-where Condition


 Go to
                                            









CWE-364: Signal Handler Race Condition


 Go to
                                            









CWE-415: Double Free


 Go to
                                            









CWE-672: Operation on a Resource after Expiration or Release


 Go to
                                            









CWE-825: Expired Pointer Dereference


 Go to
                                            









CWE-1265: Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls


 Go to
                                            










Visit http://cwe.mitre.org/ for more details.
            










 Â© cvefeed.io
            


                    Latest DB Update: Oct. 30, 2024 13:51
                


















Loading...






Theme Customizer





Layout
Choose your layout























Vertical
















Horizontal































Two Column



Color Scheme
Choose Light or Dark Scheme.
























Light























Dark




Layout Width
Choose Fluid or Boxed layout.























Fluid























Boxed




Layout Position
Choose Fixed or Scrollable Layout Position.


Fixed

Scrollable


Topbar Color
Choose Light or Dark Topbar Color.























Light























Dark



Sidebar Size
Choose a size of Sidebar.























Default























Compact























Small (Icon View)























Small Hover View




Sidebar View
Choose Default or Detached Sidebar view.























Default
























Detached




Sidebar Color
Choose a color of Sidebar.























Light























Dark




















Gradient

































Preloader
Choose a preloader.
























Loading...





Enable























Disable









Reset


Buy Now

