Title: Static catalogs
URL: https://www.puppet.com/docs/puppet/7/static-catalogs

Puppet.com
Forge
Education


                                    Try Puppet
                                


































        Docs
        






Products
Puppet Enterprise
Open Source Puppet
Bolt
Security Compliance Management
Continuous Delivery
Puppet Development Kit
Puppet DB
Puppet Plugin for VMware



        Support
        






Get
Technical Support Plans
Support Lifecycle Policy
New Puppet Enterprise Customer?



        Community
        






About Puppet
Company
Developer Experience
Community
Puppet Champions
Puppet Test Pilots
Community Calendar
Slack Channel







 









































PRODUCT AND VERSION


      Current product
      










      Current version
      








Puppet  7.34.0

Release notes

Puppet release notes
Puppet  7.34.0Security


Puppet known issues
Puppet Server release notes
Puppet Server known Issues
PuppetDB release notes (link)

Facter release notes
Facter 4.10.0
Facter 4.9.0
Facter 4.8.0
Facter 4.7.1
Facter 4.7.0
Facter 4.6.1
Facter 4.6.0
Facter 4.5.2


Facter known issues
What's new since Puppet 6?
Upgrading from Puppet 6 to Puppet 7

Experimental featuresMsgpack support

Archived documentation



Puppet overview
What is Puppet?
Why use Puppet desired state management?
Key concepts behind Puppet
The Puppet platform 
Puppet platform lifecycle 
Open source Puppet vs Puppet Enterprise (PE)
The Puppet ecosystem
Use cases
Glossary
Navigating the documentation



Set up Puppet

Install Puppet
System requirements
Installing Puppet  
Installing and configuring agents
Manually verify packages
Managing Platform versions



Configure Puppet settings
Puppet settings
Key configuration settings

Puppet's configuration files
puppet.conf: The main config file
environment.conf: Per-environment settings
fileserver.conf: Custom fileserver mount points
puppetdb.conf: PuppetDB server locations
autosign.conf: Basic certificate autosigning 
csr_attributes.yaml: Certificate extensions 
custom_trusted_oid_mapping.yaml: Short names for cert extension OIDs
device.conf: Network hardware access
routes.yaml: Advanced plugin routing


Adding file server mount points
Checking the values of settings
Editing settings on the command line
Configuration Reference



Upgrading
Upgrade Puppet Server

Upgrade agents
Upgrade agents using the puppet_agent module
Upgrade *nix agents
Upgrade Windows agents
Upgrade macOS agents


Upgrade PuppetDB



Environments
About environments
Creating environments
Environment isolation



Directories and files
Code and data directory (codedir)
Config directory (confdir)
Main manifest directory
The modulepath
SSL directory (ssldir)
Cache directory (vardir)


Report reference



Platform components

Puppet Server
About Puppet Server
Deprecated features
Server and agent compatibility
Installing Puppet Server

Configuring Puppet Server
Configuring Puppet Server

Puppet Server configuration files
auth.conf
ca.conf
global.conf
logback.xml
metrics.conf
product.conf
puppetserver.conf
web-routes.conf
webserver.conf


Migrating to the HOCON auth.conf format
Advanced logging configuration
Differing behavior in puppet.conf



Using and extending Puppet Server
Subcommands
Using Ruby gems
Intermediate CA
Infrastructure certificate revocation list (CRL)
External SSL termination

Server metrics
Monitoring Puppet Server metrics
HTTP Client Metrics


Tuning guide
Applying metrics to improve performance
Submitting usage telemetry
Scaling Puppet Server
Restarting Puppet Server"



Developer information
Developer debugging
Running from source
Tracing code events



Puppet Server HTTP API
Puppet Server HTTP API overview
PSON

Puppet v3 API
Catalog
Node
Facts
File Bucket File
File Content
File Metadata
Report



Puppet v4 APICatalog API


CA v1 API
Certificate
Certificate Request
Certificate Status
Certificate Revocation List
Expirations
Certificate Clean


Schemas (JSON)



API endpoints

Metrics API endpoints
v1 metrics
v2 (Jolokia) metrics



Status API endpoints
Services endpoint
Simple endpoint



Administrative API endpoints
Environment cache
JRuby pool



Server-specific Puppet API endpoints
Environment classes
Environment modules
Static file content





Certificate authority and SSL
Puppet Server CA commands
Intermediate CA
Autosigning certificate requests
CSR attributes and certificate extensions
Regenerating certificates in a Puppet deployment
External CA
External SSL termination





Facter  
Facter: CLI
Facter: Core Facts

Custom facts overviewEnvironment facts 

Writing custom facts
External facts
Configuring Facter with facter.conf


PuppetDB

Puppet services and tools
Puppet commands
Running Puppet commands on Windows  

primary Puppet serverAbout Puppet Server

Puppet agent on *nix systems
Puppet agent on Windows
Puppet apply
Puppet device



Puppet reports
Reporting
Report reference
Writing custom report processors
Report format



Life cycle of a Puppet run
Agent-server HTTPS communications
Catalog compilation
Static catalogs 





Using Puppet code
Classifying nodes
Managing environment content with a Puppetfile
Using content from Puppet Forge

Designing system configs (roles and profiles)
The roles and profiles method 
Roles and profiles example 
Designing advanced profiles 
Designing convenient roles 



Separating data (Hiera)
About Hiera  
Getting started with Hiera  
Configuring Hiera
Creating and editing data 
Looking up data with Hiera  
Writing new data backends 

Debugging Hiera
Unexpected values
Common errors


Upgrading to Hiera 5 



Use case examples
Manage NTP
Manage sudo 
Manage DNS
Manage firewall rules
Forge examples





Syntax and settings

The Puppet language
Puppet language overview
Puppet language syntax examples
The Puppet language style guide 
Files and paths on Windows  
Code comments 
Variables
Resources

Resource types
Resource Type Reference (Single-Page)
Built-in types
Optional resource types for Windows
Resource Type: exec
Using exec on Windows  
Resource Type: file
Using file on Windows
Resource Type: filebucket
Resource Type: group
Using user and group on Windows
Resource types overview
Resource Type: notify
Resource Type: package
Using package on Windows  
Resource Type: resources
Resource Type: schedule
Resource Type: service
Using service
Resource Type: stage
Resource Type: tidy
Resource Type: user


Relationships and ordering
Classes
Defined resource types
Bolt tasks
Expressions and operators
Conditional statements and expressions
Function calls
Built-in function reference
Node definitions

Facts and built-in variables
Accessing facts from Puppet code
Built-in variables


Reserved words and acceptable names

Custom resources

Develop types and providers with the Resource APIResource API reference


Low-level method for developing types and providers
Type development
Provider development
Creating resources





Custom functions
Custom functions overview 
Writing custom functions in the Puppet language

Writing custom functions in Ruby
Custom functions in Ruby overview
Ruby function signatures
Using special features in implementation methods
Iterative functions
Refactoring legacy 3.x functions



Deferring a function
Deferred functions overview
Using a template with Deferred values
Write a deferred function to store secrets
Integrations with secret stores





Values, data types, and aliases
Type aliases
Typecasting
Abstract data types
Arrays
Binary
Booleans
Data type syntax
Default
Error data type
Hashes
Numbers
Regular expressions
Resource and class references
Resource types
Sensitive
Strings
Time-related data types
Undef



Templates
Creating templates using Embedded Puppet
Creating templates using Embedded Ruby



Advanced constructs
Iteration and loops
Lambdas
Resource default statements
Resource collectors
Virtual resources
Exported resources
Tags
Run stages



Details of complex behaviors
Containment
Scope
Namespaces and autoloading


Securing sensitive data


Metaparameter reference
Configuration Reference
Built-in function reference

Puppet Man Pages

Core tools
Man Page: puppet agent
Man Page: puppet apply
Man Page: puppet module
Man Page: puppet resource
Man Page: puppet lookup



Occasionally useful
Man Page: puppet config
Man Page: puppet describe
Man Page: puppet device
Man Page: puppet doc
Man Page: puppet help
Man Page: puppet node
Man Page: puppet parser



Niche
Man Page: puppet catalog
Man Page: puppet facts
Man Page: puppet filebucket
Man Page: puppet report







Developing modules

Modules
Modules overview
Plug-ins in modules
Module cheat sheet
Installing and managing modules from the command line
Beginner's guide to writing modules
Module metadata
Documenting modules
Documenting modules with Puppet Strings  
Puppet Strings style guide

Publishing modulesUsing the Forge API

Contributing to Puppet modules


Puppet Development Kit (PDK)
Puppet VSCode extension

PowerShell DSC Resources
Converting DSC Resources
Distributing arbitrary DSC resources
Upgrading Puppet DSC modules 
Troubleshooting DSC Resources 


Ruby API for developing extensions


Static catalogs 

A static catalog includes additional metadata that identifies the desired
        state of a nodeâ€™s file resources that have source attributes pointing to
            puppet:/// locations. This metadata can refer to a specific version of
        the file, rather than the latest version, and can confirm that the agent is applying the
        appropriate version of the file resource for the catalog. As most of the metadata is
        provided in the catalog, Puppet agents make fewer requests to
        the primary server.
When to use static catalogs
When a primary server compiles a non-static catalog, the catalog does not specify a
                particular version of its file resources. When the agent applies the catalog, it
                always retrieves the latest version of that file resource, or uses a previously
                retrieved version if it matches the latest versionâ€™s contents. Note that this
                potential problem affects file resources that use the source attribute. File
                resources that use the content attribute are not affected, and their behavior
                does not change in static catalogs.
When a Puppet manifest depends on a file whose
                contents change more frequently than the Puppet agent
                receives new catalogs â€” for example, if the agent is caching catalogs or cannot
                reach a primary server over the network â€” a node might apply a version of the
                referenced file that does not match the instructions in the catalog.
As a result, the agentâ€™s Puppet runs might produce
                different results each time the agent applies the same catalog. This can cause
                problems because Puppet expects a catalog to produce
                the same results each time it is applied, regardless of any code or file content
                updates on the primary server.
Additionally, each time a Puppet agent applies a
                non-static cached catalog that contains file resources sourced from
                    puppet:/// locations, the agent requests file metadata from the
                primary server, even though nothing changed in the cached catalog. This causes the
                primary server to perform unnecessary resource-intensive checksum calculations for
                each such file resource.
Static catalogs avoid these problems by including metadata that refers to a specific
                version of the resourceâ€™s file. This prevents a newer version from being incorrectly
                applied, and avoids having the agent request the metadata on each Puppet run.
This type of catalog is called static because it contains all of the
                information that an agent needs to determine whether the nodeâ€™s configuration
                matches the instructions and static state of file resources at the point in time
                when the catalog was compiled.

Static catalog features
A static catalog includes file metadata in its own section and associates it with the
                catalog's file resources. 
In a non-static catalog, the Puppet agent requests
                metadata and content for the file from Puppet Server. The
                server generates a checksum for the file and provides that file as it currently
                exists on the primary server.
With static catalogs enabled, the primary server generates metadata for each file
                resource sourced from a puppet:/// location and adds it to the
                static catalog, and adds a code_id to the catalog that associates
                such file resources with the version of their files as they exist at compilation
                time. For example: 

file { '/etc/application/config.conf':
  ensure => file,
  source => 'puppet:///modules/module_name/config.conf'
}

Inlined metadata is part of a FileMetadata object in the static
                catalog that is divided into two new sections: metadata for
                metadata associated with individual files, and recursive_metadata
                for metadata associated with many files. To use the appropriate version of the file
                content for the catalog, Puppet Server also adds a
                    code_id parameter to the catalog. The value of
                    code_id is a unique string that Puppet Server uses to retrieve the version of file
                resources in an environment at the time when the catalog was compiled.
When applying a file resource from a static catalog, an agent first checks the
                catalog for that fileâ€™s metadata. If it finds some, Puppet uses the metadata to call the
                    static_file_content API endpoint on Puppet Server and retrieves the fileâ€™s contents, also
                called the code_content. If the catalog does not contain metadata
                for the resource, Puppet requests the file resourceâ€™s
                metadata from the primary server, compares it to the local file if it exists, and
                requests the resourceâ€™s file from the primary server in its current state â€” if the
                local file doesnâ€™t exist or differs from the primary server's version.

Configuring code_id and the static_file_content
                endpoint
When requesting the fileâ€™s content via the static catalogâ€™s metadata, the Puppet agent passes the fileâ€™s path, the catalogâ€™s
                    code_id, and the requested environment to Puppet Server's static_file_content API
                endpoint. The endpoint returns the appropriate version of the fileâ€™s contents as the
                    code_content.
If static catalogs are enabled but Puppet Server's static
                catalog settings are not configured, the code_id parameter defaults
                to a null value and the agent uses the file_content API endpoint,
                which always returns the latest content. To populate the code_id
                with a more useful identifier and have the agent use the
                    static_file_content endpoint to retrieve a specific version of
                the fileâ€™s content, you must specify scripts or commands that provide Puppet with the appropriate results.
Puppet Server locates these commands using the
                    code-id-command and code-content-command
                settings in the puppetserver.conf file. Puppet Server runs the code-id-command
                each time it compiles a static catalog, and it runs the
                    code-content-command each time an agent requests file contents
                from the static_file_content endpoint.
The Puppet Server process must be able to execute these
                scripts. Puppet Server also validates their output and
                checks their exit codes. Environment names can contain only alphanumeric characters
                and underscores (_). The code_id can contain only
                alphanumeric characters, dashes (-), underscores
                    (_), semicolons (;), and colons
                    (:). If either command returns a non-zero exit code, Puppet Server logs an error and returns the error message
                and a 500 response code to the API request.
Puppet Server validates the standard output of each of these
                scripts, and if the outputâ€™s acceptable, it adds the results to the catalog as their
                respective parametersâ€™ values. You can use any versioning or synchronization tools,
                as long as you write scripts that produce a valid string for the
                    code_id and code content using the catalogâ€™s
                    code_id and fileâ€™s environment.
The following examples demonstrate how Puppet Server passes
                arguments to the code-id-command and
                    code-content-command scripts and how Puppet Server uses the results to return a specific version
                of a file resource.
For files in an environment managed by Git, you would use something like the
                following code-id-command script, with the environment name passed
                in as the first command-line argument:#!/bin/bash
set -e
if [[ -z "$1" ]]; then
  echo Expected an environment >&2
  exit 1
fi
cd /etc/puppetlabs/code/environments/"$1" && git rev-parse HEAD

As long as the scriptâ€™s exit code is zero, Puppet Server
                uses the scriptâ€™s standard output as the catalogâ€™s code_id.
With a code-content-command script, Puppet Server passes the environment name as the first
                command-line argument, the code_id as the second argument, and the
                path to the file resource from its content_uri as the third
                argument:#!/bin/bash
set -e
if [[ $# < 3 ]]; then
  echo Expected environment, code-id, file-path >&2
  exit 1
fi
cd /etc/puppetlabs/code/environments/"$1" && git show "$2":"$3"

The scriptâ€™s standard output becomes the fileâ€™s code_content,
                provided the script returns a non-zero exit code.

Enabling or disabling static catalogs
The global static_catalogs setting is enabled by default. However,
                the default configuration does not include the code-id-command and
                    code-content-command scripts or settings needed to produce
                static catalogs, and even when configured to produce static catalogs Puppet Server does not inline metadata for all types of
                file resources.
Note that Puppet Server does not produce static catalogs for
                an agent under the following circumstances:

If the static_catalogs setting is false in:
The Puppet Serverâ€™s
                                puppet.conf file.
The environment.conf file for the environment under
                            which the agent is requesting a catalog.
The agentâ€™s puppet.conf file.


If the Serverâ€™s code-id-command and
                        code-content-command settings and scripts are not
                    configured, or if the code-id-command returns an empty
                    string.

Additionally, Puppet Server only inlines metadata for file
                resources if all of the following conditions are true:

It contains a source parameter with a Puppet URI, such as source =>
                        'puppet:///path/to/file'.
It contains a source parameter that uses the built-in
                        modules mount point.
The file it sources is inside the following glob, relative to the environmentâ€™s
                    root directory: */*/files/**. For example, Puppet Server inlines metadata into static catalogs for
                    file resources sourcing module files located by default in
                        /etc/puppetlabs/code/environments/<ENVIRONMENT>/modules/<MODULE
                        NAME>/files/**.




Related information
Catalog compilation
Catalog
File Metadata
File Content
puppet.conf: The main config file
environment.conf: Per-environment settings

 




          Was this page helpful?
        
Yes
No







              Donâ€™t fill this out if youâ€™re human: 






Thank you for your feedback!

            Feel free to add a comment or suggestion.
            





Send
Please enter your feedback





              Donâ€™t fill this out if youâ€™re human: 







            Weâ€™re sorry to hear that! 
            Please tell us why so we can help.
          

            Enter your feedback and email. This form is sent to the Puppet docs team.
            We ask for your email as we might contact you regarding your feedback.
          

            If you need help with the product itself, visit Puppet Support
            or ask in Puppet Community on Slack.
          

            Feedback:
            






            Email Address:
            






            To learn about how Puppet uses your personal information,
            visit our privacy policy.
          


Send
Please enter your feedback and contact email

          If you leave us your email, we may contact you regarding your feedback.
          For more information on how Puppet uses your personal information, see
          our
          privacy policy.
        





            Donâ€™t fill this out if youâ€™re human: 








    See an issue? Please file a JIRA ticket in our
    [DOCUMENTATION]
      project.
  











Puppet by Perforce gives IT operations teams back their time and offers peace of mind with infrastructure automation that enables security and compliance.






Legal
Privacy Policy
Terms of Use
Security


Â©  Puppet, Inc., a Perforce company. All rights reserved.




Puppet and other identified trademarks are the property of Puppet, Inc., Perforce Software, Inc., or an affiliate. Such trademarks are claimed and/or registered in the U.S. and other countries and regions. All third-party trademarks are the property of their respective holders. References to third-party trademarks do not imply endorsement or sponsorship of any products or services by the trademark holder. Contact Puppet, Inc., for further details.

