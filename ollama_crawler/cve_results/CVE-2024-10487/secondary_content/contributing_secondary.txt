Title: Contributing to Puppet modules
URL: https://www.puppet.com/docs/puppet/7/contributing

Puppet.com
Forge
Education


                                    Try Puppet
                                


































        Docs
        






Products
Puppet Enterprise
Open Source Puppet
Bolt
Security Compliance Management
Continuous Delivery
Puppet Development Kit
Puppet DB
Puppet Plugin for VMware



        Support
        






Get
Technical Support Plans
Support Lifecycle Policy
New Puppet Enterprise Customer?



        Community
        






About Puppet
Company
Developer Experience
Community
Puppet Champions
Puppet Test Pilots
Community Calendar
Slack Channel







 









































PRODUCT AND VERSION


      Current product
      










      Current version
      








Puppet  7.34.0

Release notes

Puppet release notes
Puppet  7.34.0Security


Puppet known issues
Puppet Server release notes
Puppet Server known Issues
PuppetDB release notes (link)

Facter release notes
Facter 4.10.0
Facter 4.9.0
Facter 4.8.0
Facter 4.7.1
Facter 4.7.0
Facter 4.6.1
Facter 4.6.0
Facter 4.5.2


Facter known issues
What's new since Puppet 6?
Upgrading from Puppet 6 to Puppet 7

Experimental featuresMsgpack support

Archived documentation



Puppet overview
What is Puppet?
Why use Puppet desired state management?
Key concepts behind Puppet
The Puppet platform 
Puppet platform lifecycle 
Open source Puppet vs Puppet Enterprise (PE)
The Puppet ecosystem
Use cases
Glossary
Navigating the documentation



Set up Puppet

Install Puppet
System requirements
Installing Puppet  
Installing and configuring agents
Manually verify packages
Managing Platform versions



Configure Puppet settings
Puppet settings
Key configuration settings

Puppet's configuration files
puppet.conf: The main config file
environment.conf: Per-environment settings
fileserver.conf: Custom fileserver mount points
puppetdb.conf: PuppetDB server locations
autosign.conf: Basic certificate autosigning 
csr_attributes.yaml: Certificate extensions 
custom_trusted_oid_mapping.yaml: Short names for cert extension OIDs
device.conf: Network hardware access
routes.yaml: Advanced plugin routing


Adding file server mount points
Checking the values of settings
Editing settings on the command line
Configuration Reference



Upgrading
Upgrade Puppet Server

Upgrade agents
Upgrade agents using the puppet_agent module
Upgrade *nix agents
Upgrade Windows agents
Upgrade macOS agents


Upgrade PuppetDB



Environments
About environments
Creating environments
Environment isolation



Directories and files
Code and data directory (codedir)
Config directory (confdir)
Main manifest directory
The modulepath
SSL directory (ssldir)
Cache directory (vardir)


Report reference



Platform components

Puppet Server
About Puppet Server
Deprecated features
Server and agent compatibility
Installing Puppet Server

Configuring Puppet Server
Configuring Puppet Server

Puppet Server configuration files
auth.conf
ca.conf
global.conf
logback.xml
metrics.conf
product.conf
puppetserver.conf
web-routes.conf
webserver.conf


Migrating to the HOCON auth.conf format
Advanced logging configuration
Differing behavior in puppet.conf



Using and extending Puppet Server
Subcommands
Using Ruby gems
Intermediate CA
Infrastructure certificate revocation list (CRL)
External SSL termination

Server metrics
Monitoring Puppet Server metrics
HTTP Client Metrics


Tuning guide
Applying metrics to improve performance
Submitting usage telemetry
Scaling Puppet Server
Restarting Puppet Server"



Developer information
Developer debugging
Running from source
Tracing code events



Puppet Server HTTP API
Puppet Server HTTP API overview
PSON

Puppet v3 API
Catalog
Node
Facts
File Bucket File
File Content
File Metadata
Report



Puppet v4 APICatalog API


CA v1 API
Certificate
Certificate Request
Certificate Status
Certificate Revocation List
Expirations
Certificate Clean


Schemas (JSON)



API endpoints

Metrics API endpoints
v1 metrics
v2 (Jolokia) metrics



Status API endpoints
Services endpoint
Simple endpoint



Administrative API endpoints
Environment cache
JRuby pool



Server-specific Puppet API endpoints
Environment classes
Environment modules
Static file content





Certificate authority and SSL
Puppet Server CA commands
Intermediate CA
Autosigning certificate requests
CSR attributes and certificate extensions
Regenerating certificates in a Puppet deployment
External CA
External SSL termination





Facter  
Facter: CLI
Facter: Core Facts

Custom facts overviewEnvironment facts 

Writing custom facts
External facts
Configuring Facter with facter.conf


PuppetDB

Puppet services and tools
Puppet commands
Running Puppet commands on Windows  

primary Puppet serverAbout Puppet Server

Puppet agent on *nix systems
Puppet agent on Windows
Puppet apply
Puppet device



Puppet reports
Reporting
Report reference
Writing custom report processors
Report format



Life cycle of a Puppet run
Agent-server HTTPS communications
Catalog compilation
Static catalogs 





Using Puppet code
Classifying nodes
Managing environment content with a Puppetfile
Using content from Puppet Forge

Designing system configs (roles and profiles)
The roles and profiles method 
Roles and profiles example 
Designing advanced profiles 
Designing convenient roles 



Separating data (Hiera)
About Hiera  
Getting started with Hiera  
Configuring Hiera
Creating and editing data 
Looking up data with Hiera  
Writing new data backends 

Debugging Hiera
Unexpected values
Common errors


Upgrading to Hiera 5 



Use case examples
Manage NTP
Manage sudo 
Manage DNS
Manage firewall rules
Forge examples





Syntax and settings

The Puppet language
Puppet language overview
Puppet language syntax examples
The Puppet language style guide 
Files and paths on Windows  
Code comments 
Variables
Resources

Resource types
Resource Type Reference (Single-Page)
Built-in types
Optional resource types for Windows
Resource Type: exec
Using exec on Windows  
Resource Type: file
Using file on Windows
Resource Type: filebucket
Resource Type: group
Using user and group on Windows
Resource types overview
Resource Type: notify
Resource Type: package
Using package on Windows  
Resource Type: resources
Resource Type: schedule
Resource Type: service
Using service
Resource Type: stage
Resource Type: tidy
Resource Type: user


Relationships and ordering
Classes
Defined resource types
Bolt tasks
Expressions and operators
Conditional statements and expressions
Function calls
Built-in function reference
Node definitions

Facts and built-in variables
Accessing facts from Puppet code
Built-in variables


Reserved words and acceptable names

Custom resources

Develop types and providers with the Resource APIResource API reference


Low-level method for developing types and providers
Type development
Provider development
Creating resources





Custom functions
Custom functions overview 
Writing custom functions in the Puppet language

Writing custom functions in Ruby
Custom functions in Ruby overview
Ruby function signatures
Using special features in implementation methods
Iterative functions
Refactoring legacy 3.x functions



Deferring a function
Deferred functions overview
Using a template with Deferred values
Write a deferred function to store secrets
Integrations with secret stores





Values, data types, and aliases
Type aliases
Typecasting
Abstract data types
Arrays
Binary
Booleans
Data type syntax
Default
Error data type
Hashes
Numbers
Regular expressions
Resource and class references
Resource types
Sensitive
Strings
Time-related data types
Undef



Templates
Creating templates using Embedded Puppet
Creating templates using Embedded Ruby



Advanced constructs
Iteration and loops
Lambdas
Resource default statements
Resource collectors
Virtual resources
Exported resources
Tags
Run stages



Details of complex behaviors
Containment
Scope
Namespaces and autoloading


Securing sensitive data


Metaparameter reference
Configuration Reference
Built-in function reference

Puppet Man Pages

Core tools
Man Page: puppet agent
Man Page: puppet apply
Man Page: puppet module
Man Page: puppet resource
Man Page: puppet lookup



Occasionally useful
Man Page: puppet config
Man Page: puppet describe
Man Page: puppet device
Man Page: puppet doc
Man Page: puppet help
Man Page: puppet node
Man Page: puppet parser



Niche
Man Page: puppet catalog
Man Page: puppet facts
Man Page: puppet filebucket
Man Page: puppet report







Developing modules

Modules
Modules overview
Plug-ins in modules
Module cheat sheet
Installing and managing modules from the command line
Beginner's guide to writing modules
Module metadata
Documenting modules
Documenting modules with Puppet Strings  
Puppet Strings style guide

Publishing modulesUsing the Forge API

Contributing to Puppet modules


Puppet Development Kit (PDK)
Puppet VSCode extension

PowerShell DSC Resources
Converting DSC Resources
Distributing arbitrary DSC resources
Upgrading Puppet DSC modules 
Troubleshooting DSC Resources 


Ruby API for developing extensions


Contributing to Puppet
      modules

Contribute to Puppet modules
      to help add new functionality, fix bugs, or make other improvements. 
Your contributions help us serve a greater spectrum of platforms,
         hardware, software, and deployment configurations. We appreciate all kinds of user
         contributions, including:


Bug reports.


Feature requests.


Participation in our community discussion group or chat.


Code changes, such as bug fixes or new functionality.


Documentation changes, such as corrections or new usage
               examples.


Reviewing pull requests. 


To make bug reports or feature requests, raise an issue in the Puppet
github
            repo. If you are requesting a feature, describe the use case for it and the goal
         of the feature. If you are filing a bug report, clearly describe the problem and the steps
         to reproduce it. 
Participating in community discussions is a great way to get involved.
         Join the community conversations in the puppet-users discussion group or our community
         Slack chat:
To join the discussion group, see the
                     puppet-users Google group.
To join our community chat, see the Puppet Community Slack.


We ask everyone participating in Puppet
         communities to abide by our code of conduct. See our community
            guidelines page for details.


Contributing changes to module repositories

To contribute bug fixes, new features, expanded functionality, or documentation to Puppet modules, submit a pull request to our module repositories
      on GitHub. 
When working on Puppet modules, follow this basic
         workflow:


Discuss your change with the Puppet community.


Fork the repository on GitHub.


Make changes on a topic branch of your fork, documenting and
               testing your changes.


Submit changes as a pull request to the Puppet
               repository.


Respond to any questions or feedback on your pull request.


Before submitting a pull request



To submit code changes, you must have a GitHub
                     account. If you don't already have an account, sign up on GitHub.


Know what Git best
                        practices we use and expect.

Sign the Contributor License Agreement when it comments on your pull
                  request.



Discussing your change with the community
We love when people submit code changes to our projects, and we appreciate bug and typo
            fixes as much as we appreciate major features.
 If you are proposing a significant or complex change to a Puppet module, we encourage you to discuss potential
            changes and their impact with the Puppet community.
To propose and discuss a change, send a message to the puppet-users discussion group or
            bring it up in the Puppet Community Slack #forge-modules
            channel.

Forking the repository and creating a topic branch
Fork the repository you want to make changes to, and create a topic branch for your
            work.
Give your topic branch a name that describes the work you're contributing. Always base
            the topic branch on the repository's primary server branch, unless one of our module
            developers specifically asks you to base it on a different branch.


Remember: Never work directly on the primary server branch or any other core
               branch.


Making changes
When you make changes to a Puppet module, make changes
            that are compatible with all currently supported versions of Puppet. Do not break users' existing installations or
            configurations with your changes. For a list of supported versions, see the Puppet platform lifecycle page.
 To add new classes, defined types, or tasks to a module, use Puppet Development Kit (PDK). PDK
            creates manifests and test templates, validates, and runs unit tests on your
            changes.
 If you make a backward-incompatible change, you must include a deprecation warning for
            the old functionality, as well as documentation that tells users how to migrate to the
            new functionality. If you aren't sure how to proceed, ask for help in the puppet-users
            group or the community Slack chat.

Documenting changes
When you add documentation to modules, follow our documentation style and formatting
            guidelines. These guidelines help make our docs clear and easier to translate into other
            languages.
If you make code changes to modules, you must document your changes. We can't merge
            undocumented changes.
To provide usage examples, add them to the README's usage section. Include information
            about what the user can accomplish with each usage example.
Add reference information, such as class descriptions and parameters, as Puppet Strings-compatible code comments, so that we can
            generate complete documentation before we release the new version of the module. Do not
            manually edit generated REFERENCE.md files; any changes
            you make are overwritten when we generate a new file. For complete information about
            writing good module documentation, see Documenting modules.
In Puppet module documentation, adhere to the following
            conventions:


Lowercase module names, such as apache. This helps
                  differentiate the module from the software the module is managing. When talking
                  about the software being managed, capitalize names as they would normally be
                  capitalized, such as Apache.


Set string values in single quotes, to make it clear that they are strings. For
                  example, 'string' or 'C:/user/documents/example.txt'.


Set the values true, false, and undef in backticks, such
                  as `true`.


Set data types in backticks, such as `Boolean`.


Set filenames, settings, directories, classes, types, defined types, functions,
                  and similar code elements in backticks, unless the user passes them as a string
                  value. If the user passes the value as a string, use quotes to make that
                  clear.


Do not use any special marking for integer values, such as 
                     1024.


Use empty lines between new lines to help with readability.



Testing your changes
Before you submit a pull request, make sure that you have added tests for your
            changes.
 If you create new classes or defined types, PDK creates
            basic tests templates for you. Use PDK to validate and
            run unit tests on the module, to ensure that your changes don't accidentally break
            anything.
If you need further help writing tests or getting tests to work, ask for help in the
            puppet-user discussion group, in our community Slack chat, or if you created a JIRA
            ticket regarding your change, in the ticket.
If you don't know how to write tests for your changes, clearly say so in your pull
            request. We don't necessarily reject pull requests without tests, but someone needs to
            add the tests before we can merge your contribution.

Committing your changes
As you add code, commit your work for one function at a time. Ensure the code for each
            commit does only one thing. This makes it easier to remove one commit and accept
            another, if necessary. We would rather see too many commits than too few.
In your commit message, provide:


A brief description of the behavior before your changes.


Why that behavior was a problem.


How your changes fix the problem.


For example, this commit message is for adding to the CONTRIBUTING document:

Make the example in CONTRIBUTING concrete
               
Without this patch applied, there is no example commit message in the CONTRIBUTING document. The contributor is left to imagine what the commit message should look. This patch adds a more specific example.


Submitting changes
Submit your changes as a pull request to the puppetlabs
            organization repository on GitHub. 
 Push your changes to the topic branch in your fork of the repository. Submit a pull
            request to the puppetlabs repository for the module.
 Someone with the permissions to merge and commit to the Puppet repository (a committer) checks whether the pull
            request meets the following requirements: 

It is on its own correctly named branch.


It contains only commits relevant to the specific issue.


It has clear commit messages that describe the problem and the solution.


It is appropriately and clearly documented.




Responding to feedback
Be sure to respond to any questions or feedback you receive from the Puppet modules team on your pull request. Puppet community members might also make comments or
            suggestions that you want to consider.
When making changes to your pull request, push your commits to the same topic branch you
            used for your pull request. When you push changes to the branch, it automatically
            updates your pull request. After the team has approved your request, someone from the
            modules team merges it, and your changes are included in the next release of the
            module.
 If you do not respond to the modules team's requests, your pull request might be
            rejected or closed. To address such comments or questions later, create a new pull
            request.



Related informationPuppet platform lifecycle

Reviewing community pull requests

As a Puppet community
      member, you can offer feedback on someone else's contributed code. 
When reviewing pull requests, any of the following contributions are
         helpful: 

Review the code for any obvious
                  problems.
Provide feedback based on personal
                  experience on the subject.
Test relevant examples on an untested
                  platform.
Look at potential side effects of the
                  change.
Examine discrepancies between the original
                  issue and the pull request.

Add your comments and questions to the pull request, pointing out any
         specific lines that need attention. Be sure to respond to any questions the contributor has
         about your comments.

 




          Was this page helpful?
        
Yes
No







              Don’t fill this out if you’re human: 






Thank you for your feedback!

            Feel free to add a comment or suggestion.
            





Send
Please enter your feedback





              Don’t fill this out if you’re human: 







            We’re sorry to hear that! 
            Please tell us why so we can help.
          

            Enter your feedback and email. This form is sent to the Puppet docs team.
            We ask for your email as we might contact you regarding your feedback.
          

            If you need help with the product itself, visit Puppet Support
            or ask in Puppet Community on Slack.
          

            Feedback:
            






            Email Address:
            






            To learn about how Puppet uses your personal information,
            visit our privacy policy.
          


Send
Please enter your feedback and contact email

          If you leave us your email, we may contact you regarding your feedback.
          For more information on how Puppet uses your personal information, see
          our
          privacy policy.
        





            Don’t fill this out if you’re human: 








    See an issue? Please file a JIRA ticket in our
    [DOCUMENTATION]
      project.
  











Puppet by Perforce gives IT operations teams back their time and offers peace of mind with infrastructure automation that enables security and compliance.






Legal
Privacy Policy
Terms of Use
Security


©  Puppet, Inc., a Perforce company. All rights reserved.




Puppet and other identified trademarks are the property of Puppet, Inc., Perforce Software, Inc., or an affiliate. Such trademarks are claimed and/or registered in the U.S. and other countries and regions. All third-party trademarks are the property of their respective holders. References to third-party trademarks do not imply endorsement or sponsorship of any products or services by the trademark holder. Contact Puppet, Inc., for further details.

