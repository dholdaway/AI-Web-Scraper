Title: Puppet device
URL: https://www.puppet.com/docs/puppet/7/puppet_device

Puppet.com
Forge
Education


                                    Try Puppet
                                


































        Docs
        






Products
Puppet Enterprise
Open Source Puppet
Bolt
Security Compliance Management
Continuous Delivery
Puppet Development Kit
Puppet DB
Puppet Plugin for VMware



        Support
        






Get
Technical Support Plans
Support Lifecycle Policy
New Puppet Enterprise Customer?



        Community
        






About Puppet
Company
Developer Experience
Community
Puppet Champions
Puppet Test Pilots
Community Calendar
Slack Channel







 









































PRODUCT AND VERSION


      Current product
      










      Current version
      








Puppet  7.34.0

Release notes

Puppet release notes
Puppet  7.34.0Security


Puppet known issues
Puppet Server release notes
Puppet Server known Issues
PuppetDB release notes (link)

Facter release notes
Facter 4.10.0
Facter 4.9.0
Facter 4.8.0
Facter 4.7.1
Facter 4.7.0
Facter 4.6.1
Facter 4.6.0
Facter 4.5.2


Facter known issues
What's new since Puppet 6?
Upgrading from Puppet 6 to Puppet 7

Experimental featuresMsgpack support

Archived documentation



Puppet overview
What is Puppet?
Why use Puppet desired state management?
Key concepts behind Puppet
The Puppet platform 
Puppet platform lifecycle 
Open source Puppet vs Puppet Enterprise (PE)
The Puppet ecosystem
Use cases
Glossary
Navigating the documentation



Set up Puppet

Install Puppet
System requirements
Installing Puppet  
Installing and configuring agents
Manually verify packages
Managing Platform versions



Configure Puppet settings
Puppet settings
Key configuration settings

Puppet's configuration files
puppet.conf: The main config file
environment.conf: Per-environment settings
fileserver.conf: Custom fileserver mount points
puppetdb.conf: PuppetDB server locations
autosign.conf: Basic certificate autosigning 
csr_attributes.yaml: Certificate extensions 
custom_trusted_oid_mapping.yaml: Short names for cert extension OIDs
device.conf: Network hardware access
routes.yaml: Advanced plugin routing


Adding file server mount points
Checking the values of settings
Editing settings on the command line
Configuration Reference



Upgrading
Upgrade Puppet Server

Upgrade agents
Upgrade agents using the puppet_agent module
Upgrade *nix agents
Upgrade Windows agents
Upgrade macOS agents


Upgrade PuppetDB



Environments
About environments
Creating environments
Environment isolation



Directories and files
Code and data directory (codedir)
Config directory (confdir)
Main manifest directory
The modulepath
SSL directory (ssldir)
Cache directory (vardir)


Report reference



Platform components

Puppet Server
About Puppet Server
Deprecated features
Server and agent compatibility
Installing Puppet Server

Configuring Puppet Server
Configuring Puppet Server

Puppet Server configuration files
auth.conf
ca.conf
global.conf
logback.xml
metrics.conf
product.conf
puppetserver.conf
web-routes.conf
webserver.conf


Migrating to the HOCON auth.conf format
Advanced logging configuration
Differing behavior in puppet.conf



Using and extending Puppet Server
Subcommands
Using Ruby gems
Intermediate CA
Infrastructure certificate revocation list (CRL)
External SSL termination

Server metrics
Monitoring Puppet Server metrics
HTTP Client Metrics


Tuning guide
Applying metrics to improve performance
Submitting usage telemetry
Scaling Puppet Server
Restarting Puppet Server"



Developer information
Developer debugging
Running from source
Tracing code events



Puppet Server HTTP API
Puppet Server HTTP API overview
PSON

Puppet v3 API
Catalog
Node
Facts
File Bucket File
File Content
File Metadata
Report



Puppet v4 APICatalog API


CA v1 API
Certificate
Certificate Request
Certificate Status
Certificate Revocation List
Expirations
Certificate Clean


Schemas (JSON)



API endpoints

Metrics API endpoints
v1 metrics
v2 (Jolokia) metrics



Status API endpoints
Services endpoint
Simple endpoint



Administrative API endpoints
Environment cache
JRuby pool



Server-specific Puppet API endpoints
Environment classes
Environment modules
Static file content





Certificate authority and SSL
Puppet Server CA commands
Intermediate CA
Autosigning certificate requests
CSR attributes and certificate extensions
Regenerating certificates in a Puppet deployment
External CA
External SSL termination





Facter  
Facter: CLI
Facter: Core Facts

Custom facts overviewEnvironment facts 

Writing custom facts
External facts
Configuring Facter with facter.conf


PuppetDB

Puppet services and tools
Puppet commands
Running Puppet commands on Windows  

primary Puppet serverAbout Puppet Server

Puppet agent on *nix systems
Puppet agent on Windows
Puppet apply
Puppet device



Puppet reports
Reporting
Report reference
Writing custom report processors
Report format



Life cycle of a Puppet run
Agent-server HTTPS communications
Catalog compilation
Static catalogs 





Using Puppet code
Classifying nodes
Managing environment content with a Puppetfile
Using content from Puppet Forge

Designing system configs (roles and profiles)
The roles and profiles method 
Roles and profiles example 
Designing advanced profiles 
Designing convenient roles 



Separating data (Hiera)
About Hiera  
Getting started with Hiera  
Configuring Hiera
Creating and editing data 
Looking up data with Hiera  
Writing new data backends 

Debugging Hiera
Unexpected values
Common errors


Upgrading to Hiera 5 



Use case examples
Manage NTP
Manage sudo 
Manage DNS
Manage firewall rules
Forge examples





Syntax and settings

The Puppet language
Puppet language overview
Puppet language syntax examples
The Puppet language style guide 
Files and paths on Windows  
Code comments 
Variables
Resources

Resource types
Resource Type Reference (Single-Page)
Built-in types
Optional resource types for Windows
Resource Type: exec
Using exec on Windows  
Resource Type: file
Using file on Windows
Resource Type: filebucket
Resource Type: group
Using user and group on Windows
Resource types overview
Resource Type: notify
Resource Type: package
Using package on Windows  
Resource Type: resources
Resource Type: schedule
Resource Type: service
Using service
Resource Type: stage
Resource Type: tidy
Resource Type: user


Relationships and ordering
Classes
Defined resource types
Bolt tasks
Expressions and operators
Conditional statements and expressions
Function calls
Built-in function reference
Node definitions

Facts and built-in variables
Accessing facts from Puppet code
Built-in variables


Reserved words and acceptable names

Custom resources

Develop types and providers with the Resource APIResource API reference


Low-level method for developing types and providers
Type development
Provider development
Creating resources





Custom functions
Custom functions overview 
Writing custom functions in the Puppet language

Writing custom functions in Ruby
Custom functions in Ruby overview
Ruby function signatures
Using special features in implementation methods
Iterative functions
Refactoring legacy 3.x functions



Deferring a function
Deferred functions overview
Using a template with Deferred values
Write a deferred function to store secrets
Integrations with secret stores





Values, data types, and aliases
Type aliases
Typecasting
Abstract data types
Arrays
Binary
Booleans
Data type syntax
Default
Error data type
Hashes
Numbers
Regular expressions
Resource and class references
Resource types
Sensitive
Strings
Time-related data types
Undef



Templates
Creating templates using Embedded Puppet
Creating templates using Embedded Ruby



Advanced constructs
Iteration and loops
Lambdas
Resource default statements
Resource collectors
Virtual resources
Exported resources
Tags
Run stages



Details of complex behaviors
Containment
Scope
Namespaces and autoloading


Securing sensitive data


Metaparameter reference
Configuration Reference
Built-in function reference

Puppet Man Pages

Core tools
Man Page: puppet agent
Man Page: puppet apply
Man Page: puppet module
Man Page: puppet resource
Man Page: puppet lookup



Occasionally useful
Man Page: puppet config
Man Page: puppet describe
Man Page: puppet device
Man Page: puppet doc
Man Page: puppet help
Man Page: puppet node
Man Page: puppet parser



Niche
Man Page: puppet catalog
Man Page: puppet facts
Man Page: puppet filebucket
Man Page: puppet report







Developing modules

Modules
Modules overview
Plug-ins in modules
Module cheat sheet
Installing and managing modules from the command line
Beginner's guide to writing modules
Module metadata
Documenting modules
Documenting modules with Puppet Strings  
Puppet Strings style guide

Publishing modulesUsing the Forge API

Contributing to Puppet modules


Puppet Development Kit (PDK)
Puppet VSCode extension

PowerShell DSC Resources
Converting DSC Resources
Distributing arbitrary DSC resources
Upgrading Puppet DSC modules 
Troubleshooting DSC Resources 


Ruby API for developing extensions



Puppet device

With Puppet device, you can
        manage network devices, such as routers, switches, firewalls, and Internet of Things (IOT)
        devices, without installing a Puppet agent on them. Devices
        that cannot run Puppet applications require a Puppet agent to act as a proxy. The proxy manages
        certificates, collects facts, retrieves and applies catalogs, and stores reports on behalf
        of a device.

Puppet device runs on both *nix and Windows. The Puppet device application combines some of the
            functionality of the Puppet apply and Puppet resource applications. For details about running
            the Puppet device application, see the 
puppet device man
                page.


Note: If you are writing a module for a remote
                resource, we recommend using transports instead of devices. Transports have extended
                functionality and can be used with other workflows, such as with 
Bolt
. For more information on transports and how to port your existing code, see
                    Resource API
                    Transports.



The Puppet device model 

In a typical deployment model, a Puppet agent is installed on each system managed by Puppet. However, not all systems can have agents installed on
        them.
For these devices, you can configure a Puppet agent on
            another system which connects to the API or CLI of the device, and acts as a proxy
            between the device and the primaryPuppet server.
In the diagram below, Puppet device is on a proxy Puppet agent (agent.example.com) and is being used to
            manage an F5 load balancer (f5.example.com) and a Cisco switch (cisco.example.com).




Puppet device’s run
        environment

Puppet device runs as a
        single process in the foreground that manages devices, rather than as a daemon or service
        like a Puppet agent.
User
The puppet
                    device command runs with the privileges of the user who runs it. 
Run Puppet device as:

Root on *nix
Either LocalService or a member of the
                        Administrators group on Windows

Logging 
By default, Puppet device outputs directly
                to the terminal, which is valuable for interactive use. When you run it as a cron
                job or scheduled task, use the logdest option to direct the output to a file.
On *nix, run Puppet device with the --logdest syslog option to log to the *nix syslog service:
                puppet device --verbose --logdest syslog

Your syslog configuration determines where these messages are saved, but the default location is
                    /var/log/messages on Linux, and /var/log/system.log on Mac OS X. For
                example, to view these logs on Linux,
                run:tail /var/log/messages

On Windows, run Puppet device with the --logdest eventlog option, which logs to
                the Windows Event Log, for example:
                puppet device --verbose --logdest eventlog

To view these logs on Windows, click Control
                    Panel → System and
                    Security → Administrative Tools → Event Viewer.
To specify a
                particular file to send Puppet device log messages
                to, use the --logdest
                    <FILE> option, which logs to the file specified by <FILE>, for
                example:
                puppet device --verbose --logdest /var/log/puppetlabs/puppet/device.log


You can increase the logging level with the --debug and --verbose options. 
In addition to local logging, Puppet device submits reports to the
                primary Puppet server after each run. These reports
                contain standard data from the Puppet run, including
                any corrective changes. 
Network access
Puppet device creates outbound
                network connections to the devices it manages. It requires network connectivity to
                the devices via their API or CLI. It never accepts inbound network
            connections.


Installing device modules

You need to install the device module for each device you want to manage on the
        primary Puppet server.
For example, to install the f5 and
                cisco_ios device modules on the primary server, run the following
            commands:

$ sudo puppet module install f5-f5
$ sudo puppet module install puppetlabs-cisco_ios



Configuring Puppet device on the
        proxy Puppet agent

You can specify multiple devices in device.conf, which is configurable with
        the deviceconfig setting on
        the proxy agent. 
For example, to configure an F5 and a Cisco IOS device, add the
            following lines to the device.conf file:

[f5.example.com]
type f5
url https://username:password@f5.example.com

[cisco.example.com]
type cisco_ios
url file:///etc/puppetlabs/puppet/devices/cisco.example.com.yamlThe
            string in the square brackets is the device’s certificate name — usually the hostname or
            FQDN. The certificate name is how Puppet identifies the
            device. 
For the url, specify the device’s connection string. The connection string varies
            by device module. In the first example above, the F5 device connection credentials are
            included in the url
device.conf file,
            because that is how the F5 module stores credentials. However, the Cisco IOS module uses
            the Puppet Resource API, which stores that information in
            a separate credentials file. So, Cisco IOS devices would also have a /etc/puppetlabs/puppet/devices/<device cert
                name>.conf file similar to the following content:
{
"address": "cisco.example.com"
"port": 22
"username": "username"
"password": "password"
"enable_password": "password"
}
}

For more information, see device.conf. 


Classify the proxy Puppet agent for
        the device

Some device modules require the proxy Puppet agent to be classified with the base class of the
        device module to install or configure resources required by the module. Refer to the
        specific device module README for details.

To classify proxy Puppet agent:



Classify the agent with the base class of the
                    device module, for each device it manages in the manifest. For example: 
node 'agent.example.com' {
  include cisco_ios
  include f5
}


Apply the classification by running puppet agent -t on
                    the proxy Puppet agent.




Classify the device 

Classify the device with resources to manage its
  configuration.

The examples below manage DNS settings on an F5 and a Cisco IOS device.
   



In the site.pp manifest, declare DNS resources for the devices. For example:
node 'f5.example.com' {
 f5_dns{ '/Common/dns':
  name_servers => ['4.2.2.2.', '8.8.8.8"],
  same     => ['localhost",' example.com'],
 }
}

node 'cisco.example.com' {
 network_dns { 'default':
  servers => [4.2.2.2', '8.8.8.8'],
  search => ['localhost",'example.com'],
 }
}



Apply the manifest by running puppet device -v on the proxy Puppet agent.


Results

Note: Resources vary by device module. Refer to the specific device module README for
     details. 


Get and set data using Puppet
      device

The traditional Puppet apply
      and Puppet resource applications cannot target device
      resources: running puppet resource
         --target <DEVICE> does not return data from the target device. Instead, use
         Puppet device to get data from devices, and to set data on
      devices. The following are optional parameters. 

Get device data with the resource parameter

Syntax:puppet device --resource <RESOURCE> --target <DEVICE>Use
            the resource parameter
            to retrieve resources from the target device. For example, to return the DNS values for
            example F5 and Cisco IOS
            devices:sudo puppet device --resource f5_dns --target f5.example.com
sudo puppet device --resource network_dns --target cisco.example.com


Set device data with the apply parameter

Syntax:puppet device --verbose --apply <FILE> --target <DEVICE>Use
            the --apply parameter to
            set a local manifest to manage resources on a remote device. For example, to apply a Puppet manifest to the F5 and Cisco devices:
            sudo puppet device --verbose --apply manifest.pp --target f5.example.com
sudo puppet device --verbose --apply manifest.pp --target cisco.example.com


View device facts with the facts parameter

Syntax:puppet device --verbose --facts --target <DEVICE>Use
            the --facts parameter to
            display the facts of a remote target. For example, to display facts on a device:
            sudo puppet device --verbose --facts --target f5.example.com



Managing devices using Puppet
    device

Running the puppet device or puppet-device command (without --resource or --apply options) tells the proxy agent to retrieve catalogs from the primary server and
    apply them to the remote devices listed in the device.conf file.
To run Puppet device on demand and for all
      of the devices in device.conf
      , run: 
sudo puppet device --verbose
To run Puppet device for only one of the
      multiple devices in the device.conf file, specify a --target option: 
$ sudo puppet device -verbose --target f5.example.com
To run Puppet device on a
      specific group of devices, as opposed to all devices in the device.conf file, create a separate configuration file
      containing the devices you want to manage, and specify the file with the --deviceconfig
      option:$ sudo puppet device --verbose --deviceconfig /path/to/custom-device.conf

To set up a cron job to run Puppet device
      on a recurring schedule, run: 
$ sudo puppet resource cron puppet-device ensure=present user=root minute=30 command='/opt/puppetlabs/bin/puppet device --verbose --logdest syslog'
Example
Follow the steps below to run Puppet device in a
        production environment, using cisco_ios as an example.

Install the module on the primary Puppet server: sudo puppet module install puppetlabs-cisco_ios.
Include the module on the proxy Puppet agent by adding the
              following line to the primary server’s site.pp
              file:include cisco_ios

Edit device.conf on the proxy Puppet agent:
              [cisco.example.com]
type cisco_ios
url file:///etc/puppetlabs/puppet/devices/cisco.example.com.yaml

Create the cisco.example.com credentials file required by
              modules that use the Puppet Resource
              API:{
  "address": "cisco.example.com"
  "port": 22
  "username": "username"
  "password": "password"
  "enable_password": "password"
}

Request a certificate on the proxy Puppet agent: sudo puppet device --verbose --waitforcert 0 --target
                cisco.example.com

Sign the certificate on the primary server: sudo puppetserver ca sign
                cisco.example.com

Run puppet device on the proxy Puppet agent to test the credentials: sudo puppet device --target
                cisco.example.com




Automating device management using the puppetlabs device_manager
        module

The puppetlabs-device_manager module manages the configuration files used by the
            Puppet device application, applies the base class of
        configured device modules, and provides additional resources for scheduling and
        orchestrating Puppet device runs on proxy Puppet agents. 
For more information, see the module README.


Troubleshooting Puppet
        device

These options are useful for troubleshooting Puppet device command results.









--debug or -d

Enables debugging



--trace or -t

Enables stack tracing if Ruby fails



--verbose or -v

Enables detailed reporting




 




          Was this page helpful?
        
Yes
No







              Don’t fill this out if you’re human: 






Thank you for your feedback!

            Feel free to add a comment or suggestion.
            





Send
Please enter your feedback





              Don’t fill this out if you’re human: 







            We’re sorry to hear that! 
            Please tell us why so we can help.
          

            Enter your feedback and email. This form is sent to the Puppet docs team.
            We ask for your email as we might contact you regarding your feedback.
          

            If you need help with the product itself, visit Puppet Support
            or ask in Puppet Community on Slack.
          

            Feedback:
            






            Email Address:
            






            To learn about how Puppet uses your personal information,
            visit our privacy policy.
          


Send
Please enter your feedback and contact email

          If you leave us your email, we may contact you regarding your feedback.
          For more information on how Puppet uses your personal information, see
          our
          privacy policy.
        





            Don’t fill this out if you’re human: 








    See an issue? Please file a JIRA ticket in our
    [DOCUMENTATION]
      project.
  











Puppet by Perforce gives IT operations teams back their time and offers peace of mind with infrastructure automation that enables security and compliance.






Legal
Privacy Policy
Terms of Use
Security


©  Puppet, Inc., a Perforce company. All rights reserved.




Puppet and other identified trademarks are the property of Puppet, Inc., Perforce Software, Inc., or an affiliate. Such trademarks are claimed and/or registered in the U.S. and other countries and regions. All third-party trademarks are the property of their respective holders. References to third-party trademarks do not imply endorsement or sponsorship of any products or services by the trademark holder. Contact Puppet, Inc., for further details.

