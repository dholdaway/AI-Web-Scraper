Title: Built-in types
URL: https://www.puppet.com/docs/puppet/7/cheatsheet_core_types

Puppet.com
Forge
Education


                                    Try Puppet
                                


































        Docs
        






Products
Puppet Enterprise
Open Source Puppet
Bolt
Security Compliance Management
Continuous Delivery
Puppet Development Kit
Puppet DB
Puppet Plugin for VMware



        Support
        






Get
Technical Support Plans
Support Lifecycle Policy
New Puppet Enterprise Customer?



        Community
        






About Puppet
Company
Developer Experience
Community
Puppet Champions
Puppet Test Pilots
Community Calendar
Slack Channel







 









































PRODUCT AND VERSION


      Current product
      










      Current version
      








Puppet  7.34.0

Release notes

Puppet release notes
Puppet  7.34.0Security


Puppet known issues
Puppet Server release notes
Puppet Server known Issues
PuppetDB release notes (link)

Facter release notes
Facter 4.10.0
Facter 4.9.0
Facter 4.8.0
Facter 4.7.1
Facter 4.7.0
Facter 4.6.1
Facter 4.6.0
Facter 4.5.2


Facter known issues
What's new since Puppet 6?
Upgrading from Puppet 6 to Puppet 7

Experimental featuresMsgpack support

Archived documentation



Puppet overview
What is Puppet?
Why use Puppet desired state management?
Key concepts behind Puppet
The Puppet platform 
Puppet platform lifecycle 
Open source Puppet vs Puppet Enterprise (PE)
The Puppet ecosystem
Use cases
Glossary
Navigating the documentation



Set up Puppet

Install Puppet
System requirements
Installing Puppet  
Installing and configuring agents
Manually verify packages
Managing Platform versions



Configure Puppet settings
Puppet settings
Key configuration settings

Puppet's configuration files
puppet.conf: The main config file
environment.conf: Per-environment settings
fileserver.conf: Custom fileserver mount points
puppetdb.conf: PuppetDB server locations
autosign.conf: Basic certificate autosigning 
csr_attributes.yaml: Certificate extensions 
custom_trusted_oid_mapping.yaml: Short names for cert extension OIDs
device.conf: Network hardware access
routes.yaml: Advanced plugin routing


Adding file server mount points
Checking the values of settings
Editing settings on the command line
Configuration Reference



Upgrading
Upgrade Puppet Server

Upgrade agents
Upgrade agents using the puppet_agent module
Upgrade *nix agents
Upgrade Windows agents
Upgrade macOS agents


Upgrade PuppetDB



Environments
About environments
Creating environments
Environment isolation



Directories and files
Code and data directory (codedir)
Config directory (confdir)
Main manifest directory
The modulepath
SSL directory (ssldir)
Cache directory (vardir)


Report reference



Platform components

Puppet Server
About Puppet Server
Deprecated features
Server and agent compatibility
Installing Puppet Server

Configuring Puppet Server
Configuring Puppet Server

Puppet Server configuration files
auth.conf
ca.conf
global.conf
logback.xml
metrics.conf
product.conf
puppetserver.conf
web-routes.conf
webserver.conf


Migrating to the HOCON auth.conf format
Advanced logging configuration
Differing behavior in puppet.conf



Using and extending Puppet Server
Subcommands
Using Ruby gems
Intermediate CA
Infrastructure certificate revocation list (CRL)
External SSL termination

Server metrics
Monitoring Puppet Server metrics
HTTP Client Metrics


Tuning guide
Applying metrics to improve performance
Submitting usage telemetry
Scaling Puppet Server
Restarting Puppet Server"



Developer information
Developer debugging
Running from source
Tracing code events



Puppet Server HTTP API
Puppet Server HTTP API overview
PSON

Puppet v3 API
Catalog
Node
Facts
File Bucket File
File Content
File Metadata
Report



Puppet v4 APICatalog API


CA v1 API
Certificate
Certificate Request
Certificate Status
Certificate Revocation List
Expirations
Certificate Clean


Schemas (JSON)



API endpoints

Metrics API endpoints
v1 metrics
v2 (Jolokia) metrics



Status API endpoints
Services endpoint
Simple endpoint



Administrative API endpoints
Environment cache
JRuby pool



Server-specific Puppet API endpoints
Environment classes
Environment modules
Static file content





Certificate authority and SSL
Puppet Server CA commands
Intermediate CA
Autosigning certificate requests
CSR attributes and certificate extensions
Regenerating certificates in a Puppet deployment
External CA
External SSL termination





Facter  
Facter: CLI
Facter: Core Facts

Custom facts overviewEnvironment facts 

Writing custom facts
External facts
Configuring Facter with facter.conf


PuppetDB

Puppet services and tools
Puppet commands
Running Puppet commands on Windows  

primary Puppet serverAbout Puppet Server

Puppet agent on *nix systems
Puppet agent on Windows
Puppet apply
Puppet device



Puppet reports
Reporting
Report reference
Writing custom report processors
Report format



Life cycle of a Puppet run
Agent-server HTTPS communications
Catalog compilation
Static catalogs 





Using Puppet code
Classifying nodes
Managing environment content with a Puppetfile
Using content from Puppet Forge

Designing system configs (roles and profiles)
The roles and profiles method 
Roles and profiles example 
Designing advanced profiles 
Designing convenient roles 



Separating data (Hiera)
About Hiera  
Getting started with Hiera  
Configuring Hiera
Creating and editing data 
Looking up data with Hiera  
Writing new data backends 

Debugging Hiera
Unexpected values
Common errors


Upgrading to Hiera 5 



Use case examples
Manage NTP
Manage sudo 
Manage DNS
Manage firewall rules
Forge examples





Syntax and settings

The Puppet language
Puppet language overview
Puppet language syntax examples
The Puppet language style guide 
Files and paths on Windows  
Code comments 
Variables
Resources

Resource types
Resource Type Reference (Single-Page)
Built-in types
Optional resource types for Windows
Resource Type: exec
Using exec on Windows  
Resource Type: file
Using file on Windows
Resource Type: filebucket
Resource Type: group
Using user and group on Windows
Resource types overview
Resource Type: notify
Resource Type: package
Using package on Windows  
Resource Type: resources
Resource Type: schedule
Resource Type: service
Using service
Resource Type: stage
Resource Type: tidy
Resource Type: user


Relationships and ordering
Classes
Defined resource types
Bolt tasks
Expressions and operators
Conditional statements and expressions
Function calls
Built-in function reference
Node definitions

Facts and built-in variables
Accessing facts from Puppet code
Built-in variables


Reserved words and acceptable names

Custom resources

Develop types and providers with the Resource APIResource API reference


Low-level method for developing types and providers
Type development
Provider development
Creating resources





Custom functions
Custom functions overview 
Writing custom functions in the Puppet language

Writing custom functions in Ruby
Custom functions in Ruby overview
Ruby function signatures
Using special features in implementation methods
Iterative functions
Refactoring legacy 3.x functions



Deferring a function
Deferred functions overview
Using a template with Deferred values
Write a deferred function to store secrets
Integrations with secret stores





Values, data types, and aliases
Type aliases
Typecasting
Abstract data types
Arrays
Binary
Booleans
Data type syntax
Default
Error data type
Hashes
Numbers
Regular expressions
Resource and class references
Resource types
Sensitive
Strings
Time-related data types
Undef



Templates
Creating templates using Embedded Puppet
Creating templates using Embedded Ruby



Advanced constructs
Iteration and loops
Lambdas
Resource default statements
Resource collectors
Virtual resources
Exported resources
Tags
Run stages



Details of complex behaviors
Containment
Scope
Namespaces and autoloading


Securing sensitive data


Metaparameter reference
Configuration Reference
Built-in function reference

Puppet Man Pages

Core tools
Man Page: puppet agent
Man Page: puppet apply
Man Page: puppet module
Man Page: puppet resource
Man Page: puppet lookup



Occasionally useful
Man Page: puppet config
Man Page: puppet describe
Man Page: puppet device
Man Page: puppet doc
Man Page: puppet help
Man Page: puppet node
Man Page: puppet parser



Niche
Man Page: puppet catalog
Man Page: puppet facts
Man Page: puppet filebucket
Man Page: puppet report







Developing modules

Modules
Modules overview
Plug-ins in modules
Module cheat sheet
Installing and managing modules from the command line
Beginner's guide to writing modules
Module metadata
Documenting modules
Documenting modules with Puppet Strings  
Puppet Strings style guide

Publishing modulesUsing the Forge API

Contributing to Puppet modules


Puppet Development Kit (PDK)
Puppet VSCode extension

PowerShell DSC Resources
Converting DSC Resources
Distributing arbitrary DSC resources
Upgrading Puppet DSC modules 
Troubleshooting DSC Resources 


Ruby API for developing extensions


Built-in types

This page provides a reference guide for Puppet's
        built-in types: package, file, service,
            notify, exec, user, and
            group. 
For detailed information about built-in types, see the Resource type reference.
For information on all core types, including supported types in the puppet-agent package, see the Resource types index.


The trifecta: package, file, and service


Package, file, service: Learn it, live it, love it. Even if this is the only Puppet you know, you can get a lot done.

package { 'openssh-server':
  ensure => installed,
}

file { '/etc/ssh/sshd_config':
  source  => 'puppet:///modules/sshd/sshd_config',
  owner   => 'root',
  group   => 'root',
  mode    => '0640',
  notify  => Service['sshd'], # sshd restarts whenever you edit this file.
  require => Package['openssh-server'],
}

service { 'sshd':
  ensure     => running,
  enable     => true,
}

package
Manages software packages. 








Attribute
Description
Notes





name

The name of the package, as known to your packaging system. 
Defaults to title. 



ensure

Whether the package should be installed, and what version to
                           use. 
Allowed values: 


present



latest (implies present) 


Any version string (implies present) 



absent




purged

CAUTION: purged ensures
                                          absent, and deletes configuration files
                                       and dependencies, including those that other packages depend
                                       on. Provider-dependent. 







source

Where to obtain the package, if your system’s packaging tools don’t
                           use a repository.




provider

Which packaging system to use (such as Yum or Rubygems), if a system
                           has more than one available.






file
Manages files, directories, and symlinks. 








Attribute
Description
Notes





ensure

Whether the file should exist, and what it should be. 
Allowed values: 


file




directory



link (symlink) 


present (anything) 



absent







path

The full path to the file on disk.
Defaults to title. 



owner

By name or UID.




group

By name or GID.




mode

Must be specified exactly. Does the right thing for
                           directories.



For normal files:










source

Where to download contents for the file. Usually
                              a puppet:/// URL. 



content

The file’s desired contents, as a string. Most useful when paired
                           with templates, but you can also use the output of the 
file
function. 


For directories: 








source

Where to download contents for the directory,
                              when recurse => true. 



recurse

Whether to recursively manage files in the directory.



purge

Whether unmanaged files in the directory should be deleted,
                              when recurse => true. 


For symlinks: 








target

The symlink target. (Required when ensure =>
                              link.) 


Other notable attributes: 


backup




checksum




force




ignore




links




recurselimit




replace





service
Manages services running on the node. As with packages, some platforms have better tools
            than others, so read the relevant documentation before you begin.
You can make services restart whenever a file changes with
               the subscribe or notify
            metaparameters. For more info, see Relationships and ordering. 








Attribute
Description
Notes





name

The name of the service to run.
Defaults to title.



ensure

The desired status of the service. 
Allowed values: 

running (or true) 


stopped (or false) 






enable

Whether the service should start on boot. Doesn’t work on all
                           systems.




hasrestart

Whether to use the init script’s restart command instead of
                           stop+start. 
Defaults to false.



hasstatus

Whether to use the init script’s status command. 
Defaults to true. 


Other notable attributes:
If a service has a bad init script, you can work around it and manage almost anything
            using the status, start, stop,
               restart, pattern, and binary
            attributes.



Other built-in types

Beyond package, file, and service, these core types are among the most useful and
    commonly used. 

notify
Logs an arbitrary message, at the notice log level. This appears
        in the POSIX syslog or Windows Event Log on the agent node
        and is also logged in reports.notify { "This message is getting logged on the agent node.": }









Attribute
Description
Notes





message

The message to log.
Defaults to title. 





exec
Executes an arbitrary command on the agent node. When using execs, you must either make
        sure the command can be safely run multiple times, or specify that it runs only under
        certain conditions.










Important attributes
Description
Notes





command

The command to run. If this isn’t a fully-qualified path, use
                    the path attribute. 
Defaults to title.



path

Where to look for executables, as a colon-separated list or an array.




returns

Which exit codes indicate success. 
Defaults to 0.



environment

An array of environment variables to set (for
                    example, ['MYVAR=somevalue', 'OTHERVAR=othervalue']). 



The following attributes limit when a command
                  runs.



creates

A file to look for before running the command. The command only runs if the
                  file doesn’t exist.




refreshonly

If true, the command runs only if a resource it
                  subscribes to (or a resource which notifies it) has changed. 




onlyif

A command or array of commands; if any have a non-zero return value, the
                  command won’t run.




unless

The opposite of onlyif. 



Other notable attributes: cwd, group,
          logoutput, timeout, tries,
          try_sleep, user


user
Manages user accounts; mostly used for system users.user { "jane":
    ensure     => present,
    uid        => '507',
    gid        => 'admin',
    shell      => '/bin/zsh',
    home       => '/home/jane',
    managehome => true,
}









Important Attributes
Description
Notes





name

The name of the user.
Defaults to title. 



ensure

Whether the user should exist. 
Allowed values: 


present




absent




role







uid

The user ID. Must be specified numerically; chosen automatically if
                  omitted. 
Read-only on Windows. 



gid

The user’s primary group. Can be specified numerically or by
                  name. 
Not used on Windows;
                    use groups instead. 



groups

An array of other groups to which the user belongs.
Don’t include the group specified as the gid. 



home

The user’s home directory.




managehome

Whether to manage the home directory when managing the user. 
If you don’t set this to true, you’ll need to create the
                  user’s home directory manually. 



shell

The user’s login shell.



Other notable attributes: comment, expiry,
          membership, password, password_max_age,
          password_min_age, purge_ssh_keys, salt


group
Manages groups. 










Important attributes
Description
Notes





name

The name of the group.
Defaults to title. 



ensure

Whether the group should exist. 
Allowed values: 


present




absent







gid

The group ID; must be specified numerically, and is chosen automatically if
                  omitted. 
Read-only on Windows. 



members

Users and groups that are members of the group. 
Only applicable to certain operating systems; see the full type reference for
                  details.






 




          Was this page helpful?
        
Yes
No







              Don’t fill this out if you’re human: 






Thank you for your feedback!

            Feel free to add a comment or suggestion.
            





Send
Please enter your feedback





              Don’t fill this out if you’re human: 







            We’re sorry to hear that! 
            Please tell us why so we can help.
          

            Enter your feedback and email. This form is sent to the Puppet docs team.
            We ask for your email as we might contact you regarding your feedback.
          

            If you need help with the product itself, visit Puppet Support
            or ask in Puppet Community on Slack.
          

            Feedback:
            






            Email Address:
            






            To learn about how Puppet uses your personal information,
            visit our privacy policy.
          


Send
Please enter your feedback and contact email

          If you leave us your email, we may contact you regarding your feedback.
          For more information on how Puppet uses your personal information, see
          our
          privacy policy.
        





            Don’t fill this out if you’re human: 








    See an issue? Please file a JIRA ticket in our
    [DOCUMENTATION]
      project.
  











Puppet by Perforce gives IT operations teams back their time and offers peace of mind with infrastructure automation that enables security and compliance.






Legal
Privacy Policy
Terms of Use
Security


©  Puppet, Inc., a Perforce company. All rights reserved.




Puppet and other identified trademarks are the property of Puppet, Inc., Perforce Software, Inc., or an affiliate. Such trademarks are claimed and/or registered in the U.S. and other countries and regions. All third-party trademarks are the property of their respective holders. References to third-party trademarks do not imply endorsement or sponsorship of any products or services by the trademark holder. Contact Puppet, Inc., for further details.

