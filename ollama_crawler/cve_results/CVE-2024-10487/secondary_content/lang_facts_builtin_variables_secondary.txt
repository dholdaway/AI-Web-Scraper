Title: Built-in variables
URL: https://www.puppet.com/docs/puppet/7/lang_facts_builtin_variables

Puppet.com
Forge
Education


                                    Try Puppet
                                


































        Docs
        






Products
Puppet Enterprise
Open Source Puppet
Bolt
Security Compliance Management
Continuous Delivery
Puppet Development Kit
Puppet DB
Puppet Plugin for VMware



        Support
        






Get
Technical Support Plans
Support Lifecycle Policy
New Puppet Enterprise Customer?



        Community
        






About Puppet
Company
Developer Experience
Community
Puppet Champions
Puppet Test Pilots
Community Calendar
Slack Channel







 









































PRODUCT AND VERSION


      Current product
      










      Current version
      








Puppet  7.34.0

Release notes

Puppet release notes
Puppet  7.34.0Security


Puppet known issues
Puppet Server release notes
Puppet Server known Issues
PuppetDB release notes (link)

Facter release notes
Facter 4.10.0
Facter 4.9.0
Facter 4.8.0
Facter 4.7.1
Facter 4.7.0
Facter 4.6.1
Facter 4.6.0
Facter 4.5.2


Facter known issues
What's new since Puppet 6?
Upgrading from Puppet 6 to Puppet 7

Experimental featuresMsgpack support

Archived documentation



Puppet overview
What is Puppet?
Why use Puppet desired state management?
Key concepts behind Puppet
The Puppet platform 
Puppet platform lifecycle 
Open source Puppet vs Puppet Enterprise (PE)
The Puppet ecosystem
Use cases
Glossary
Navigating the documentation



Set up Puppet

Install Puppet
System requirements
Installing Puppet  
Installing and configuring agents
Manually verify packages
Managing Platform versions



Configure Puppet settings
Puppet settings
Key configuration settings

Puppet's configuration files
puppet.conf: The main config file
environment.conf: Per-environment settings
fileserver.conf: Custom fileserver mount points
puppetdb.conf: PuppetDB server locations
autosign.conf: Basic certificate autosigning 
csr_attributes.yaml: Certificate extensions 
custom_trusted_oid_mapping.yaml: Short names for cert extension OIDs
device.conf: Network hardware access
routes.yaml: Advanced plugin routing


Adding file server mount points
Checking the values of settings
Editing settings on the command line
Configuration Reference



Upgrading
Upgrade Puppet Server

Upgrade agents
Upgrade agents using the puppet_agent module
Upgrade *nix agents
Upgrade Windows agents
Upgrade macOS agents


Upgrade PuppetDB



Environments
About environments
Creating environments
Environment isolation



Directories and files
Code and data directory (codedir)
Config directory (confdir)
Main manifest directory
The modulepath
SSL directory (ssldir)
Cache directory (vardir)


Report reference



Platform components

Puppet Server
About Puppet Server
Deprecated features
Server and agent compatibility
Installing Puppet Server

Configuring Puppet Server
Configuring Puppet Server

Puppet Server configuration files
auth.conf
ca.conf
global.conf
logback.xml
metrics.conf
product.conf
puppetserver.conf
web-routes.conf
webserver.conf


Migrating to the HOCON auth.conf format
Advanced logging configuration
Differing behavior in puppet.conf



Using and extending Puppet Server
Subcommands
Using Ruby gems
Intermediate CA
Infrastructure certificate revocation list (CRL)
External SSL termination

Server metrics
Monitoring Puppet Server metrics
HTTP Client Metrics


Tuning guide
Applying metrics to improve performance
Submitting usage telemetry
Scaling Puppet Server
Restarting Puppet Server"



Developer information
Developer debugging
Running from source
Tracing code events



Puppet Server HTTP API
Puppet Server HTTP API overview
PSON

Puppet v3 API
Catalog
Node
Facts
File Bucket File
File Content
File Metadata
Report



Puppet v4 APICatalog API


CA v1 API
Certificate
Certificate Request
Certificate Status
Certificate Revocation List
Expirations
Certificate Clean


Schemas (JSON)



API endpoints

Metrics API endpoints
v1 metrics
v2 (Jolokia) metrics



Status API endpoints
Services endpoint
Simple endpoint



Administrative API endpoints
Environment cache
JRuby pool



Server-specific Puppet API endpoints
Environment classes
Environment modules
Static file content





Certificate authority and SSL
Puppet Server CA commands
Intermediate CA
Autosigning certificate requests
CSR attributes and certificate extensions
Regenerating certificates in a Puppet deployment
External CA
External SSL termination





Facter  
Facter: CLI
Facter: Core Facts

Custom facts overviewEnvironment facts 

Writing custom facts
External facts
Configuring Facter with facter.conf


PuppetDB

Puppet services and tools
Puppet commands
Running Puppet commands on Windows  

primary Puppet serverAbout Puppet Server

Puppet agent on *nix systems
Puppet agent on Windows
Puppet apply
Puppet device



Puppet reports
Reporting
Report reference
Writing custom report processors
Report format



Life cycle of a Puppet run
Agent-server HTTPS communications
Catalog compilation
Static catalogs 





Using Puppet code
Classifying nodes
Managing environment content with a Puppetfile
Using content from Puppet Forge

Designing system configs (roles and profiles)
The roles and profiles method 
Roles and profiles example 
Designing advanced profiles 
Designing convenient roles 



Separating data (Hiera)
About Hiera  
Getting started with Hiera  
Configuring Hiera
Creating and editing data 
Looking up data with Hiera  
Writing new data backends 

Debugging Hiera
Unexpected values
Common errors


Upgrading to Hiera 5 



Use case examples
Manage NTP
Manage sudo 
Manage DNS
Manage firewall rules
Forge examples





Syntax and settings

The Puppet language
Puppet language overview
Puppet language syntax examples
The Puppet language style guide 
Files and paths on Windows  
Code comments 
Variables
Resources

Resource types
Resource Type Reference (Single-Page)
Built-in types
Optional resource types for Windows
Resource Type: exec
Using exec on Windows  
Resource Type: file
Using file on Windows
Resource Type: filebucket
Resource Type: group
Using user and group on Windows
Resource types overview
Resource Type: notify
Resource Type: package
Using package on Windows  
Resource Type: resources
Resource Type: schedule
Resource Type: service
Using service
Resource Type: stage
Resource Type: tidy
Resource Type: user


Relationships and ordering
Classes
Defined resource types
Bolt tasks
Expressions and operators
Conditional statements and expressions
Function calls
Built-in function reference
Node definitions

Facts and built-in variables
Accessing facts from Puppet code
Built-in variables


Reserved words and acceptable names

Custom resources

Develop types and providers with the Resource APIResource API reference


Low-level method for developing types and providers
Type development
Provider development
Creating resources





Custom functions
Custom functions overview 
Writing custom functions in the Puppet language

Writing custom functions in Ruby
Custom functions in Ruby overview
Ruby function signatures
Using special features in implementation methods
Iterative functions
Refactoring legacy 3.x functions



Deferring a function
Deferred functions overview
Using a template with Deferred values
Write a deferred function to store secrets
Integrations with secret stores





Values, data types, and aliases
Type aliases
Typecasting
Abstract data types
Arrays
Binary
Booleans
Data type syntax
Default
Error data type
Hashes
Numbers
Regular expressions
Resource and class references
Resource types
Sensitive
Strings
Time-related data types
Undef



Templates
Creating templates using Embedded Puppet
Creating templates using Embedded Ruby



Advanced constructs
Iteration and loops
Lambdas
Resource default statements
Resource collectors
Virtual resources
Exported resources
Tags
Run stages



Details of complex behaviors
Containment
Scope
Namespaces and autoloading


Securing sensitive data


Metaparameter reference
Configuration Reference
Built-in function reference

Puppet Man Pages

Core tools
Man Page: puppet agent
Man Page: puppet apply
Man Page: puppet module
Man Page: puppet resource
Man Page: puppet lookup



Occasionally useful
Man Page: puppet config
Man Page: puppet describe
Man Page: puppet device
Man Page: puppet doc
Man Page: puppet help
Man Page: puppet node
Man Page: puppet parser



Niche
Man Page: puppet catalog
Man Page: puppet facts
Man Page: puppet filebucket
Man Page: puppet report







Developing modules

Modules
Modules overview
Plug-ins in modules
Module cheat sheet
Installing and managing modules from the command line
Beginner's guide to writing modules
Module metadata
Documenting modules
Documenting modules with Puppet Strings  
Puppet Strings style guide

Publishing modulesUsing the Forge API

Contributing to Puppet modules


Puppet Development Kit (PDK)
Puppet VSCode extension

PowerShell DSC Resources
Converting DSC Resources
Distributing arbitrary DSC resources
Upgrading Puppet DSC modules 
Troubleshooting DSC Resources 


Ruby API for developing extensions


Built-in variables

In addition to Facter's core facts and custom facts, Puppet creates several variables for a node to facilitate managing
    it. These variables are called trusted facts, server facts, agent facts, server variables, and
    compiler variables.
Trusted facts
Normal facts are self-reported by the node, and nothing guarantees their accuracy. Trusted
        facts are extracted from the node's certificate, which can prove that the certificate
        authority checked and approved them, making them useful for deciding whether a given node
        can receive the sensitive data in its catalog. 
Trusted facts is a hash that contains trusted data from the node's certificate. You can
        access the data using the syntax $trusted['fact_name']. The variable name
          $trusted is reserved, so local scopes cannot reuse it.









Keys in the $trusted hash
Possible values





authenticated 
An indication of whether the catalog request was authenticated, as well as
                  how it was authenticated. The value will be one of these: 


remote for authenticated remote requests, as with
                        agent-server Puppet configurations.



local for all local requests, as with standalone Puppet apply nodes.



false for unauthenticated remote requests, possible if
                        your auth.conf configuration allows unauthenticated catalog
                        requests.






certname 
The node’s subject certificate name, as listed in its certificate. When first
                  requesting its certificate, the node requests a subject certificate name matching
                  the value of its certname setting. 
If authenticated is remote,
                      the value is the subject certificate name extracted from the node’s
                      certificate.
If authenticated is local,
                      the value is read directly from
                      the certname setting.
If authenticated is false,
                      the value will be an empty string.





domain 
The node’s domain, as derived from its validated certificate name. The value
                  can be empty if the certificate name doesn’t contain a fully qualified domain
                  name.



extensions 
A hash containing any custom extensions present in the node’s certificate.
                  The keys of the hash are the extension OIDs. OIDs in the ppRegCertExt range appear
                  using their short names, and other OIDs appear as plain dotted numbers. If no
                  extensions are present, or authenticated
                     is local or false,
                  this is an empty hash. 



hostname 
The node’s hostname, as derived from its validated certificate name




A typical $trusted hash looks something like this: {
  'authenticated' => 'remote',
  'certname'      => 'web01.example.com',
  'domain'        => 'example.com',
  'extensions'    => {
                      'pp_uuid'                         => 'ED803750-E3C7-44F5-BB08-41A04433FE2E',
                      'pp_image_name'           => 'storefront_production'
                      '1.3.6.1.4.1.34380.1.2.1' => 'ssl-termination'
                   },
  'hostname'      => 'web01'
}Here is some example Puppet code using a
        certificate extension:
        if $trusted['extensions']['pp_image_name'] == 'storefront_production' {
  include private::storefront::private_keys
}Here's an example of a hiera.yaml file using certificate
        extensions in a hierarchy: ---
version: 5
hierarchy:
  - name: "Certname"
    path: "nodes/%{trusted.certname}.yaml"
  - name: "Original VM image name"
    path: "images/%{trusted.extensions.pp_image_name}.yaml"
  - name: "Machine role (custom certificate extension)"
    path: "role/%{trusted.extensions.'1.3.6.1.4.1.34380.1.2.1'}.yaml"
  - name: "Common data"
    path: "common.yaml"


Server facts
The $server_facts variable provides a hash of server-side facts that
        cannot be overwritten by client side facts. This is important because it enables you to get
        trusted server facts that could otherwise be overwritten by client-side facts. 
For example, the primary Puppet server sets the global
          $::environment variable to contain the name of the node's environment.
        However, if a node provides a fact with the name environment, that fact's
        value overrides the server-set environment fact. The same happens with
        other server-set global variables, like $::servername and
          $::serverip. As a result, modules can't reliably use these variables for
        whatever their intended purpose was.
A warning is issued any time a node parameter is overwritten.
Here is an example $server_facts hash: {
  serverversion => "4.1.0",
  servername    => "v85ix8blah.delivery.example.com",
  serverip      => "192.0.2.10",
  environment   => "production",
}


Agent facts

Puppet agent and Puppet apply
        both add several extra pieces of info to their facts before requesting or compiling a
        catalog. Like other facts, these are available as either top-scope variables or elements in
        the $facts hash.









Agent facts
Values





$clientcert 
The node’s 
certname setting. This is self-reported; for the
                  verified certificate name, use$trusted['certname']. 



$clientversion 
The current version of Puppet agent.



$puppetversion 
The current version of Puppet on the
                  node.



$clientnoop 
The value of the node’s 
noop setting (true or false) at the time of the
                  run.



$agent_specified_environment 
The value of the node’s 
environment setting. If the primary server’s node
                  classifier specified an environment for the node,
                    $agent_specified_environment and $environment
                  can have different values. If no value was set for the
                    environment setting (in puppet.conf or with
                    --environment), the value of
                    $agent_specified_environmentis undef. That is,
                  it doesn't default to production like the setting
                  does.





Server variables
Several variables are set by the compiling Puppet server.
        These are most useful when managing Puppet with Puppet, for example, managing the puppet.conf
        file with a template. Server variables are not available in the
          $facts hash.









Server variables
Values





$environment (also available topuppet
                  apply)
The agent node’s environment. Note that nodes can accidentally or
                  purposefully override this with a custom fact; the
                    $server_facts['environment'] variable always contains the
                  correct environment, and can’t be overridden.



$servername

The compiling server’s fully-qualified domain name (FQDN). Note that this
                  information is gathered from the compiling server by Facter, rather than read from the config files. Even
                  if the compiling server’s certname is set to something other than its FQDN, this
                  variable still contains the server’s FQDN.



$serverip

The compiling server’s IP address.



$serverversion

The current version of Puppet on the compiling
                  server.



$settings::<SETTING_NAME>(also available to puppet
                    apply)
The value of any of the compiling server’s configuration settings. This is
                  implemented as a special namespace and these variables must be referred to by
                  their qualified names. Other than $environment and
                    $clientnoop, the agent node’s settings are not available in
                  manifests. If you wish to expose them to the compiling server, you must create a
                  custom fact. 



$settings::all_local

Contains all variables in the $settingsnamespace as a hash
                  of <SETTING_NAME> => <SETTING_VALUE>. This helps you
                  reference settings that might be missing, because a direct reference to such a
                  missing setting raises an error when --strict_variablesis
                  enabled.





Compiler variables
Compiler variables are set in every local scope by the compiler during compilation. They
        are mostly used when implementing complex defined types. Compiler variables are not
        available in the $facts hash.
By default, compiler variables have a value of undef
        (undefined). If you reference an undefined compiler variable, and you have specified the
          strict_variables=true setting, an error message flags the
        undefined variable.









Compiler variables
Values





$module_name

The name of the module that contains the current class or defined
                  type.



$caller_module_name

The name of the module in which the specific instance of the
                  surrounding defined type was declared. This is useful when creating versatile
                  defined types that will be reused by several modules.







Related information
CSR attributes and certificate extensions
Configuring Hiera
About environments
Puppet settings
Writing custom facts
Scope
Defined resource types

 




          Was this page helpful?
        
Yes
No







              Don’t fill this out if you’re human: 






Thank you for your feedback!

            Feel free to add a comment or suggestion.
            





Send
Please enter your feedback





              Don’t fill this out if you’re human: 







            We’re sorry to hear that! 
            Please tell us why so we can help.
          

            Enter your feedback and email. This form is sent to the Puppet docs team.
            We ask for your email as we might contact you regarding your feedback.
          

            If you need help with the product itself, visit Puppet Support
            or ask in Puppet Community on Slack.
          

            Feedback:
            






            Email Address:
            






            To learn about how Puppet uses your personal information,
            visit our privacy policy.
          


Send
Please enter your feedback and contact email

          If you leave us your email, we may contact you regarding your feedback.
          For more information on how Puppet uses your personal information, see
          our
          privacy policy.
        





            Don’t fill this out if you’re human: 








    See an issue? Please file a JIRA ticket in our
    [DOCUMENTATION]
      project.
  











Puppet by Perforce gives IT operations teams back their time and offers peace of mind with infrastructure automation that enables security and compliance.






Legal
Privacy Policy
Terms of Use
Security


©  Puppet, Inc., a Perforce company. All rights reserved.




Puppet and other identified trademarks are the property of Puppet, Inc., Perforce Software, Inc., or an affiliate. Such trademarks are claimed and/or registered in the U.S. and other countries and regions. All third-party trademarks are the property of their respective holders. References to third-party trademarks do not imply endorsement or sponsorship of any products or services by the trademark holder. Contact Puppet, Inc., for further details.

