Title: Designing convenient roles
URL: https://www.puppet.com/docs/puppet/7/designing_convenient_roles

Puppet.com
Forge
Education


                                    Try Puppet
                                


































        Docs
        






Products
Puppet Enterprise
Open Source Puppet
Bolt
Security Compliance Management
Continuous Delivery
Puppet Development Kit
Puppet DB
Puppet Plugin for VMware



        Support
        






Get
Technical Support Plans
Support Lifecycle Policy
New Puppet Enterprise Customer?



        Community
        






About Puppet
Company
Developer Experience
Community
Puppet Champions
Puppet Test Pilots
Community Calendar
Slack Channel







 









































PRODUCT AND VERSION


      Current product
      










      Current version
      








Puppet  7.34.0

Release notes

Puppet release notes
Puppet  7.34.0Security


Puppet known issues
Puppet Server release notes
Puppet Server known Issues
PuppetDB release notes (link)

Facter release notes
Facter 4.10.0
Facter 4.9.0
Facter 4.8.0
Facter 4.7.1
Facter 4.7.0
Facter 4.6.1
Facter 4.6.0
Facter 4.5.2


Facter known issues
What's new since Puppet 6?
Upgrading from Puppet 6 to Puppet 7

Experimental featuresMsgpack support

Archived documentation



Puppet overview
What is Puppet?
Why use Puppet desired state management?
Key concepts behind Puppet
The Puppet platform 
Puppet platform lifecycle 
Open source Puppet vs Puppet Enterprise (PE)
The Puppet ecosystem
Use cases
Glossary
Navigating the documentation



Set up Puppet

Install Puppet
System requirements
Installing Puppet  
Installing and configuring agents
Manually verify packages
Managing Platform versions



Configure Puppet settings
Puppet settings
Key configuration settings

Puppet's configuration files
puppet.conf: The main config file
environment.conf: Per-environment settings
fileserver.conf: Custom fileserver mount points
puppetdb.conf: PuppetDB server locations
autosign.conf: Basic certificate autosigning 
csr_attributes.yaml: Certificate extensions 
custom_trusted_oid_mapping.yaml: Short names for cert extension OIDs
device.conf: Network hardware access
routes.yaml: Advanced plugin routing


Adding file server mount points
Checking the values of settings
Editing settings on the command line
Configuration Reference



Upgrading
Upgrade Puppet Server

Upgrade agents
Upgrade agents using the puppet_agent module
Upgrade *nix agents
Upgrade Windows agents
Upgrade macOS agents


Upgrade PuppetDB



Environments
About environments
Creating environments
Environment isolation



Directories and files
Code and data directory (codedir)
Config directory (confdir)
Main manifest directory
The modulepath
SSL directory (ssldir)
Cache directory (vardir)


Report reference



Platform components

Puppet Server
About Puppet Server
Deprecated features
Server and agent compatibility
Installing Puppet Server

Configuring Puppet Server
Configuring Puppet Server

Puppet Server configuration files
auth.conf
ca.conf
global.conf
logback.xml
metrics.conf
product.conf
puppetserver.conf
web-routes.conf
webserver.conf


Migrating to the HOCON auth.conf format
Advanced logging configuration
Differing behavior in puppet.conf



Using and extending Puppet Server
Subcommands
Using Ruby gems
Intermediate CA
Infrastructure certificate revocation list (CRL)
External SSL termination

Server metrics
Monitoring Puppet Server metrics
HTTP Client Metrics


Tuning guide
Applying metrics to improve performance
Submitting usage telemetry
Scaling Puppet Server
Restarting Puppet Server"



Developer information
Developer debugging
Running from source
Tracing code events



Puppet Server HTTP API
Puppet Server HTTP API overview
PSON

Puppet v3 API
Catalog
Node
Facts
File Bucket File
File Content
File Metadata
Report



Puppet v4 APICatalog API


CA v1 API
Certificate
Certificate Request
Certificate Status
Certificate Revocation List
Expirations
Certificate Clean


Schemas (JSON)



API endpoints

Metrics API endpoints
v1 metrics
v2 (Jolokia) metrics



Status API endpoints
Services endpoint
Simple endpoint



Administrative API endpoints
Environment cache
JRuby pool



Server-specific Puppet API endpoints
Environment classes
Environment modules
Static file content





Certificate authority and SSL
Puppet Server CA commands
Intermediate CA
Autosigning certificate requests
CSR attributes and certificate extensions
Regenerating certificates in a Puppet deployment
External CA
External SSL termination





Facter  
Facter: CLI
Facter: Core Facts

Custom facts overviewEnvironment facts 

Writing custom facts
External facts
Configuring Facter with facter.conf


PuppetDB

Puppet services and tools
Puppet commands
Running Puppet commands on Windows  

primary Puppet serverAbout Puppet Server

Puppet agent on *nix systems
Puppet agent on Windows
Puppet apply
Puppet device



Puppet reports
Reporting
Report reference
Writing custom report processors
Report format



Life cycle of a Puppet run
Agent-server HTTPS communications
Catalog compilation
Static catalogs 





Using Puppet code
Classifying nodes
Managing environment content with a Puppetfile
Using content from Puppet Forge

Designing system configs (roles and profiles)
The roles and profiles method 
Roles and profiles example 
Designing advanced profiles 
Designing convenient roles 



Separating data (Hiera)
About Hiera  
Getting started with Hiera  
Configuring Hiera
Creating and editing data 
Looking up data with Hiera  
Writing new data backends 

Debugging Hiera
Unexpected values
Common errors


Upgrading to Hiera 5 



Use case examples
Manage NTP
Manage sudo 
Manage DNS
Manage firewall rules
Forge examples





Syntax and settings

The Puppet language
Puppet language overview
Puppet language syntax examples
The Puppet language style guide 
Files and paths on Windows  
Code comments 
Variables
Resources

Resource types
Resource Type Reference (Single-Page)
Built-in types
Optional resource types for Windows
Resource Type: exec
Using exec on Windows  
Resource Type: file
Using file on Windows
Resource Type: filebucket
Resource Type: group
Using user and group on Windows
Resource types overview
Resource Type: notify
Resource Type: package
Using package on Windows  
Resource Type: resources
Resource Type: schedule
Resource Type: service
Using service
Resource Type: stage
Resource Type: tidy
Resource Type: user


Relationships and ordering
Classes
Defined resource types
Bolt tasks
Expressions and operators
Conditional statements and expressions
Function calls
Built-in function reference
Node definitions

Facts and built-in variables
Accessing facts from Puppet code
Built-in variables


Reserved words and acceptable names

Custom resources

Develop types and providers with the Resource APIResource API reference


Low-level method for developing types and providers
Type development
Provider development
Creating resources





Custom functions
Custom functions overview 
Writing custom functions in the Puppet language

Writing custom functions in Ruby
Custom functions in Ruby overview
Ruby function signatures
Using special features in implementation methods
Iterative functions
Refactoring legacy 3.x functions



Deferring a function
Deferred functions overview
Using a template with Deferred values
Write a deferred function to store secrets
Integrations with secret stores





Values, data types, and aliases
Type aliases
Typecasting
Abstract data types
Arrays
Binary
Booleans
Data type syntax
Default
Error data type
Hashes
Numbers
Regular expressions
Resource and class references
Resource types
Sensitive
Strings
Time-related data types
Undef



Templates
Creating templates using Embedded Puppet
Creating templates using Embedded Ruby



Advanced constructs
Iteration and loops
Lambdas
Resource default statements
Resource collectors
Virtual resources
Exported resources
Tags
Run stages



Details of complex behaviors
Containment
Scope
Namespaces and autoloading


Securing sensitive data


Metaparameter reference
Configuration Reference
Built-in function reference

Puppet Man Pages

Core tools
Man Page: puppet agent
Man Page: puppet apply
Man Page: puppet module
Man Page: puppet resource
Man Page: puppet lookup



Occasionally useful
Man Page: puppet config
Man Page: puppet describe
Man Page: puppet device
Man Page: puppet doc
Man Page: puppet help
Man Page: puppet node
Man Page: puppet parser



Niche
Man Page: puppet catalog
Man Page: puppet facts
Man Page: puppet filebucket
Man Page: puppet report







Developing modules

Modules
Modules overview
Plug-ins in modules
Module cheat sheet
Installing and managing modules from the command line
Beginner's guide to writing modules
Module metadata
Documenting modules
Documenting modules with Puppet Strings  
Puppet Strings style guide

Publishing modulesUsing the Forge API

Contributing to Puppet modules


Puppet Development Kit (PDK)
Puppet VSCode extension

PowerShell DSC Resources
Converting DSC Resources
Distributing arbitrary DSC resources
Upgrading Puppet DSC modules 
Troubleshooting DSC Resources 


Ruby API for developing extensions


Designing convenient roles 

There are several approaches to building roles, and you must
    decide which ones are most convenient for you and your team.
High-quality roles strike a balance between readability and
      maintainability. For most people, the benefit of seeing the entire role in a single file
      outweighs the maintenance cost of repetition. Later, if you find the repetition burdensome,
      you can change your approach to reduce it. This might involve combining several similar roles
      into a more complex role, creating sub-roles that other roles can include, or pushing more
      complexity into your profiles.
So, begin with granular roles and deviate from them only in small,
      carefully considered steps.
Here's the basic Jenkins role we're starting with:
class role::jenkins::controller {
  include profile::base
  include profile::server
  include profile::jenkins::controller
}


Related informationRules for role classes

First approach: Granular roles 

The simplest approach is to make one role per type of node, period. For example, the
      Puppet Release Engineering (RE) team manages some additional
    resources on their Jenkins controllers. 
With granular roles, we'd have at least two Jenkins controller roles. A basic one:
class role::jenkins::controller {
  include profile::base
  include profile::server
  include profile::jenkins::controller
}
...and an RE-specific one:
class role::jenkins::controller::release {
  include profile::base
  include profile::server
  include profile::jenkins::controller
  include profile::jenkins::controller::release
}
The benefits of this setup are:

Readability — By looking at a single class, you can immediately see
        which profiles make up each type of node.
Simplicity — Each role is just a linear list of profiles.

Some drawbacks are:

Role bloat — If you have a lot of only-slightly-different nodes, you
        quickly have a large number of roles.
Repetition — The two roles above are almost identical, with one
        difference. If they're two separate roles, it's harder to see how they're related to each
        other, and updating them can be more annoying.



Second approach: Conditional logic 

Alternatively, you can use conditional logic to handle
    differences between closely-related kinds of nodes.
class role::jenkins::controller::release {
  include profile::base
  include profile::server
  include profile::jenkins::controller

  if $facts['group'] == 'release' {
    include profile::jenkins::controller::release
  }
}
The benefits of this approach are:

You have fewer roles, and they're easy to maintain.

The drawbacks are:

Reduced readability...maybe. Conditional logic isn't usually hard to
        read, especially in a simple case like this, but you might feel tempted to add a bunch of
        new custom facts to accommodate complex roles. This can make roles much harder to read,
        because a reader must also know what those facts mean.In short, be
          careful of turning your node classification system inside-out. You might have a better
          time if you separate the roles and assign them with your node classifier.




Third approach: Nested roles 

Another way of reducing repetition is to let roles include
    other roles. 
class role::jenkins::controller {
  # Parent role:
  include role::server
  # Unique classes:
  include profile::jenkins::controller
}

class role::jenkins::controller::release {
  # Parent role:
  include role::jenkins::controller
  # Unique classes:
  include profile::jenkins::controller::release
}
In this example, we reduce boilerplate by having role::jenkins::controller
      include role::server. When
        role::jenkins::controller::release includes
        role::jenkins::controller, it automatically gets
        role::server as well. With this approach, any given role only needs to:

Include the "parent" role that it most resembles.
Include the small handful of classes that differentiate it from its
        parent.

The benefits of this approach are:

You have fewer roles, and they're easy to maintain.
Increased visibility in your node classifier.

The drawbacks are:

Reduced readability: You have to open more files to see the real
        content of a role. This isn't much of a problem if you go only one level deep, but it can
        get cumbersome around three or four.



Fourth approach: Multiple roles per node 

In general, we recommend that you assign only one role to
        a node. In an infrastructure where nodes usually provide one primary service, that's the
        best way to work.
However, if your nodes tend to provide more than one primary service,
            it can make sense to assign multiple roles.
For example, say you have a large application that is usually composed
            of an application server, a database server, and a web server. To enable lighter-weight
            testing during development, you've decided to provide an "all-in-one" node type to your
            developers. You could do this by creating a new role::our_application::monolithic class, which includes all of the
            profiles that compose the three normal roles, but you might find it simpler to use your
            node classifier to assign all three roles (role::our_application::app, role::our_application::db, and role::our_application::web) to those all-in-one machines.
The benefit of this approach are:

You have fewer roles, and they're easy to maintain.

The drawbacks are:

There's no actual "role" that describes your multi-purpose
                nodes; instead, the source of truth for what's on them is spread out between your
                roles and your node classifier, and you must cross-reference to understand their
                configurations. This reduces readability.
The normal and all-in-one versions of a complex application are
                likely to have other subtle differences you need to account for, which might mean
                making your "normal" roles more complex. It's possible that making a separate role
                for this kind of node would reduce your overall
                complexity, even though it increases the number of roles and adds repetition.



Fifth approach: Super profiles 

Because profiles can already include other profiles, you
        can decide to enforce an additional rule at your business: all profiles must include any
        other profiles needed to manage a complete node that provides that service.
For example, our profile::jenkins::controller class could include both
                profile::server and profile::base, and you could
            manage a Jenkins controller server by directly assigning
                profile::jenkins::controller in your node classifier. In other
            words, a "main" profile would do all the work that a role usually does, and the roles
            layer would no longer be necessary.
The benefits of this approach are:

The chain of dependencies for a complex service can be more
                clear this way.
Depending on how you conceptualize code, this can be easier in a
                lot of ways!

The drawbacks are:

Loss of flexibility. This reduces the number of ways in which
                your roles can be combined, and reduces your ability to use alternate
                implementations of dependencies for nodes with different requirements.
Reduced readability, on a much grander scale. Like with nested
                roles, you lose the advantage of a clean, straightforward list of what a node
                consists of. Unlike nested roles, you also lose the clear division between
                "top-level" complete system configurations (roles) and "mid-level" groupings of
                technologies (profiles). Not every profile makes sense as an entire system, so you
                some way to keep track of which profiles are the top-level ones.Some people really find continuous hierarchies easier to reason about than
                    sharply divided layers. If everyone in your organization is on the same page
                    about this, a "profiles and profiles" approach might make sense. But we strongly
                    caution you against it unless you're very sure; for most people, a true roles
                    and profiles approach works better. Try the well-traveled path first.




Sixth approach: Building roles in the node classifier 

Instead of building roles with the Puppet language and then assigning them to nodes with your
        node classifier, you might find your classifier flexible enough to build roles
        directly.
 For example, you might create a "Jenkins controllers" group in the console and assign it
            the profile::base, profile::server, and
                profile::jenkins::controller classes, doing much the same job as
            our basic role::jenkins::controller class.

Important: If
                    you're doing this, make sure you don't set parameters for profiles in the
                    classifier. Continue to use Hiera / Puppet lookup to configure profiles.
This is because profiles are allowed to include other
                    profiles, which interacts badly with the resource-like behavior that node
                    classifiers use to set class parameters.

The benefits of this approach are:

Your node classifier becomes much more powerful, and can be a
                central point of collaboration for managing nodes.
Increased readability: A node's page in the console displays the
                full content of its role, without having to cross-reference with manifests in your
                    role module.

The drawbacks are:

Loss of flexibility. The Puppet
                language's conditional logic is often more flexible and convenient than most node
                classifiers, including the console.
Your roles are no longer in the same code repository as your
                profiles, and it's more difficult to make them follow the same code promotion
                processes.


 




          Was this page helpful?
        
Yes
No







              Don’t fill this out if you’re human: 






Thank you for your feedback!

            Feel free to add a comment or suggestion.
            





Send
Please enter your feedback





              Don’t fill this out if you’re human: 







            We’re sorry to hear that! 
            Please tell us why so we can help.
          

            Enter your feedback and email. This form is sent to the Puppet docs team.
            We ask for your email as we might contact you regarding your feedback.
          

            If you need help with the product itself, visit Puppet Support
            or ask in Puppet Community on Slack.
          

            Feedback:
            






            Email Address:
            






            To learn about how Puppet uses your personal information,
            visit our privacy policy.
          


Send
Please enter your feedback and contact email

          If you leave us your email, we may contact you regarding your feedback.
          For more information on how Puppet uses your personal information, see
          our
          privacy policy.
        





            Don’t fill this out if you’re human: 








    See an issue? Please file a JIRA ticket in our
    [DOCUMENTATION]
      project.
  











Puppet by Perforce gives IT operations teams back their time and offers peace of mind with infrastructure automation that enables security and compliance.






Legal
Privacy Policy
Terms of Use
Security


©  Puppet, Inc., a Perforce company. All rights reserved.




Puppet and other identified trademarks are the property of Puppet, Inc., Perforce Software, Inc., or an affiliate. Such trademarks are claimed and/or registered in the U.S. and other countries and regions. All third-party trademarks are the property of their respective holders. References to third-party trademarks do not imply endorsement or sponsorship of any products or services by the trademark holder. Contact Puppet, Inc., for further details.

