Title: Module metadata
URL: https://www.puppet.com/docs/puppet/7/modules_metadata

Puppet.com
Forge
Education


                                    Try Puppet
                                


































        Docs
        






Products
Puppet Enterprise
Open Source Puppet
Bolt
Security Compliance Management
Continuous Delivery
Puppet Development Kit
Puppet DB
Puppet Plugin for VMware



        Support
        






Get
Technical Support Plans
Support Lifecycle Policy
New Puppet Enterprise Customer?



        Community
        






About Puppet
Company
Developer Experience
Community
Puppet Champions
Puppet Test Pilots
Community Calendar
Slack Channel







 









































PRODUCT AND VERSION


      Current product
      










      Current version
      








Puppet  7.34.0

Release notes

Puppet release notes
Puppet  7.34.0Security


Puppet known issues
Puppet Server release notes
Puppet Server known Issues
PuppetDB release notes (link)

Facter release notes
Facter 4.10.0
Facter 4.9.0
Facter 4.8.0
Facter 4.7.1
Facter 4.7.0
Facter 4.6.1
Facter 4.6.0
Facter 4.5.2


Facter known issues
What's new since Puppet 6?
Upgrading from Puppet 6 to Puppet 7

Experimental featuresMsgpack support

Archived documentation



Puppet overview
What is Puppet?
Why use Puppet desired state management?
Key concepts behind Puppet
The Puppet platform 
Puppet platform lifecycle 
Open source Puppet vs Puppet Enterprise (PE)
The Puppet ecosystem
Use cases
Glossary
Navigating the documentation



Set up Puppet

Install Puppet
System requirements
Installing Puppet  
Installing and configuring agents
Manually verify packages
Managing Platform versions



Configure Puppet settings
Puppet settings
Key configuration settings

Puppet's configuration files
puppet.conf: The main config file
environment.conf: Per-environment settings
fileserver.conf: Custom fileserver mount points
puppetdb.conf: PuppetDB server locations
autosign.conf: Basic certificate autosigning 
csr_attributes.yaml: Certificate extensions 
custom_trusted_oid_mapping.yaml: Short names for cert extension OIDs
device.conf: Network hardware access
routes.yaml: Advanced plugin routing


Adding file server mount points
Checking the values of settings
Editing settings on the command line
Configuration Reference



Upgrading
Upgrade Puppet Server

Upgrade agents
Upgrade agents using the puppet_agent module
Upgrade *nix agents
Upgrade Windows agents
Upgrade macOS agents


Upgrade PuppetDB



Environments
About environments
Creating environments
Environment isolation



Directories and files
Code and data directory (codedir)
Config directory (confdir)
Main manifest directory
The modulepath
SSL directory (ssldir)
Cache directory (vardir)


Report reference



Platform components

Puppet Server
About Puppet Server
Deprecated features
Server and agent compatibility
Installing Puppet Server

Configuring Puppet Server
Configuring Puppet Server

Puppet Server configuration files
auth.conf
ca.conf
global.conf
logback.xml
metrics.conf
product.conf
puppetserver.conf
web-routes.conf
webserver.conf


Migrating to the HOCON auth.conf format
Advanced logging configuration
Differing behavior in puppet.conf



Using and extending Puppet Server
Subcommands
Using Ruby gems
Intermediate CA
Infrastructure certificate revocation list (CRL)
External SSL termination

Server metrics
Monitoring Puppet Server metrics
HTTP Client Metrics


Tuning guide
Applying metrics to improve performance
Submitting usage telemetry
Scaling Puppet Server
Restarting Puppet Server"



Developer information
Developer debugging
Running from source
Tracing code events



Puppet Server HTTP API
Puppet Server HTTP API overview
PSON

Puppet v3 API
Catalog
Node
Facts
File Bucket File
File Content
File Metadata
Report



Puppet v4 APICatalog API


CA v1 API
Certificate
Certificate Request
Certificate Status
Certificate Revocation List
Expirations
Certificate Clean


Schemas (JSON)



API endpoints

Metrics API endpoints
v1 metrics
v2 (Jolokia) metrics



Status API endpoints
Services endpoint
Simple endpoint



Administrative API endpoints
Environment cache
JRuby pool



Server-specific Puppet API endpoints
Environment classes
Environment modules
Static file content





Certificate authority and SSL
Puppet Server CA commands
Intermediate CA
Autosigning certificate requests
CSR attributes and certificate extensions
Regenerating certificates in a Puppet deployment
External CA
External SSL termination





Facter  
Facter: CLI
Facter: Core Facts

Custom facts overviewEnvironment facts 

Writing custom facts
External facts
Configuring Facter with facter.conf


PuppetDB

Puppet services and tools
Puppet commands
Running Puppet commands on Windows  

primary Puppet serverAbout Puppet Server

Puppet agent on *nix systems
Puppet agent on Windows
Puppet apply
Puppet device



Puppet reports
Reporting
Report reference
Writing custom report processors
Report format



Life cycle of a Puppet run
Agent-server HTTPS communications
Catalog compilation
Static catalogs 





Using Puppet code
Classifying nodes
Managing environment content with a Puppetfile
Using content from Puppet Forge

Designing system configs (roles and profiles)
The roles and profiles method 
Roles and profiles example 
Designing advanced profiles 
Designing convenient roles 



Separating data (Hiera)
About Hiera  
Getting started with Hiera  
Configuring Hiera
Creating and editing data 
Looking up data with Hiera  
Writing new data backends 

Debugging Hiera
Unexpected values
Common errors


Upgrading to Hiera 5 



Use case examples
Manage NTP
Manage sudo 
Manage DNS
Manage firewall rules
Forge examples





Syntax and settings

The Puppet language
Puppet language overview
Puppet language syntax examples
The Puppet language style guide 
Files and paths on Windows  
Code comments 
Variables
Resources

Resource types
Resource Type Reference (Single-Page)
Built-in types
Optional resource types for Windows
Resource Type: exec
Using exec on Windows  
Resource Type: file
Using file on Windows
Resource Type: filebucket
Resource Type: group
Using user and group on Windows
Resource types overview
Resource Type: notify
Resource Type: package
Using package on Windows  
Resource Type: resources
Resource Type: schedule
Resource Type: service
Using service
Resource Type: stage
Resource Type: tidy
Resource Type: user


Relationships and ordering
Classes
Defined resource types
Bolt tasks
Expressions and operators
Conditional statements and expressions
Function calls
Built-in function reference
Node definitions

Facts and built-in variables
Accessing facts from Puppet code
Built-in variables


Reserved words and acceptable names

Custom resources

Develop types and providers with the Resource APIResource API reference


Low-level method for developing types and providers
Type development
Provider development
Creating resources





Custom functions
Custom functions overview 
Writing custom functions in the Puppet language

Writing custom functions in Ruby
Custom functions in Ruby overview
Ruby function signatures
Using special features in implementation methods
Iterative functions
Refactoring legacy 3.x functions



Deferring a function
Deferred functions overview
Using a template with Deferred values
Write a deferred function to store secrets
Integrations with secret stores





Values, data types, and aliases
Type aliases
Typecasting
Abstract data types
Arrays
Binary
Booleans
Data type syntax
Default
Error data type
Hashes
Numbers
Regular expressions
Resource and class references
Resource types
Sensitive
Strings
Time-related data types
Undef



Templates
Creating templates using Embedded Puppet
Creating templates using Embedded Ruby



Advanced constructs
Iteration and loops
Lambdas
Resource default statements
Resource collectors
Virtual resources
Exported resources
Tags
Run stages



Details of complex behaviors
Containment
Scope
Namespaces and autoloading


Securing sensitive data


Metaparameter reference
Configuration Reference
Built-in function reference

Puppet Man Pages

Core tools
Man Page: puppet agent
Man Page: puppet apply
Man Page: puppet module
Man Page: puppet resource
Man Page: puppet lookup



Occasionally useful
Man Page: puppet config
Man Page: puppet describe
Man Page: puppet device
Man Page: puppet doc
Man Page: puppet help
Man Page: puppet node
Man Page: puppet parser



Niche
Man Page: puppet catalog
Man Page: puppet facts
Man Page: puppet filebucket
Man Page: puppet report







Developing modules

Modules
Modules overview
Plug-ins in modules
Module cheat sheet
Installing and managing modules from the command line
Beginner's guide to writing modules
Module metadata
Documenting modules
Documenting modules with Puppet Strings  
Puppet Strings style guide

Publishing modulesUsing the Forge API

Contributing to Puppet modules


Puppet Development Kit (PDK)
Puppet VSCode extension

PowerShell DSC Resources
Converting DSC Resources
Distributing arbitrary DSC resources
Upgrading Puppet DSC modules 
Troubleshooting DSC Resources 


Ruby API for developing extensions


Module metadata

When you author a module, it must contain certain metadata in a metadata.json file, which contains important information that Puppet, the Forge, and your module's
    users rely on.
The metadata.json file is located in the module's main
      directory, outside any subdirectories. If you created your module with Puppet Development Kit (PDK), the metadata.json file is already created and contains the information you provided
      during the module creation interview. If you skipped the interview, the module metadata is
      populated with PDK default values. You can manually edit the
      values in the metadata.json file as needed. 
 The Forge requires modules to contain the metadata.json file. The Forge uses
      the metadata to create the module's information page and to provide important information to
      users installing the module. The metadata.json file uses
      standard JSON syntax and contains a single JSON object, mapping keys to values.

metadata.json example
      {
  "name": "puppetlabs-ntp",
  "version": "10.1.0",
  "author": "puppetlabs",
  "summary": "Installs, configures, and manages the NTP service.",
  "license": "Apache-2.0",
  "source": "https://github.com/puppetlabs/puppetlabs-ntp",
  "project_page": "https://github.com/puppetlabs/puppetlabs-ntp",
  "issues_url": "https://github.com/puppetlabs/puppetlabs-ntp/issues",
  "dependencies": [
    {
      "name": "puppetlabs/stdlib",
      "version_requirement": ">= 4.13.1 < 10.0.0"
    }
  ],
  "operatingsystem_support": [
    {
      "operatingsystem": "RedHat",
      "operatingsystemrelease": [
        "7"
      ]
    },
    {
      "operatingsystem": "CentOS",
      "operatingsystemrelease": [
        "7"
      ]
    },
    {
      "operatingsystem": "OracleLinux",
      "operatingsystemrelease": [
        "7"
      ]
    },
    {
      "operatingsystem": "Scientific",
      "operatingsystemrelease": [
        "7"
      ]
    },
    {
      "operatingsystem": "SLES",
      "operatingsystemrelease": [
        "12",
        "15"
      ]
    },
    {
      "operatingsystem": "Debian",
      "operatingsystemrelease": [
        "10",
        "11"
      ]
    },
    {
      "operatingsystem": "Ubuntu",
      "operatingsystemrelease": [
        "18.04",
        "20.04",
        "22.04"
      ]
    },
    {
      "operatingsystem": "Solaris",
      "operatingsystemrelease": [
        "11"
      ]
    },
    {
      "operatingsystem": "AIX",
      "operatingsystemrelease": [
        "7.1"
      ]
    }
  ],
  "requirements": [
    {
      "name": "puppet",
      "version_requirement": ">= 7.0.0 < 9.0.0"
    }
  ],
  "description": "NTP Module for Debian, Ubuntu, CentOS, RHEL, OEL, Fedora, FreeBSD, ArchLinux, Amazon Linux and Gentoo.",
  "template-url": "https://github.com/puppetlabs/pdk-templates.git#main",
  "template-ref": "heads/main-0-g4fb29e7",
  "pdk-version": "3.0.0"
}

Specifying
        dependencies
If your module depends on functionality from
        another module, specify this in the "dependencies" key of the metadata.json file. The "dependencies" key accepts an array of hashes. This key is required, but if your
        module has no dependencies, you can pass an empty array.
Dependencies are not added to the metadata during module creation, so you must edit your
          metadata.json file to
        include dependency information. For information about how to format dependency versions, see
        the related topic about version specifiers in module metadata. 

        The hash for each dependency must contain the "name" and "version_requirement" keys. For example:
        "dependencies": [
  { "name": "puppetlabs/stdlib", "version_requirement": ">= 3.2.0 < 5.0.0" },
  { "name": "puppetlabs/firewall", "version_requirement": ">= 0.0.4" },
  { "name": "puppetlabs/apt", "version_requirement": ">= 1.1.0 < 2.0.0" },
  { "name": "puppetlabs/concat", "version_requirement": ">= 1.0.0 < 2.0.0" }
]

When installing modules with the puppet module install command,
          Puppet installs any missing dependencies. When installing
        modules with Code Manager and the Puppetfile, dependencies are not automatically installed, so
        they must be explicitly specified in the Puppetfile.
Specifying Puppet version requirements
The requirements key specifies external requirements for the
        module, particularly the Puppet version required. Although
        you can express any requirement here, the Forge module pages
        and search function support only the "puppet" value, which
        specifies the Puppet version.
 The "requirements" key accepts an array of hashes with the
        following keys: 


"name": The name of the requirement.



"version_requirement": A semantic version range,
              including lower and upper version bounds. 

For example, this key specifies that the module works with any Puppet version of 5.5.0 or greater, but not with Puppet 6 or
        later:"requirements": [
  {"name": "puppet”, “version_requirement”: ">= 5.5.0 < 6.0.0"}
]



Important: The Forge requires both lower and
          upper bounds for the Puppet version requirement. If you
          upload a module that does not specify an upper bound, the Forge adds an upper bound of the next major version. For
          example, if you upload a module that specifies a lower bound of 5.5.0 and no upper bound,
          the Forge applies an upper bound of < 6.0.0 .For Puppet Enterprise versions,
        specify the core Puppet version included in that version of
          PE. For example, PE 2017.1
        contained Puppet 4.9. Do not express requirements for Puppet versions earlier than 3.0, because those versions do not
        follow semantic versioning. For information about formatting version requirements, see the
        related topic about version specifiers in module metadata.
Specifying operating system
        compatibility
Specify the operating system your module is compatible with in the operatingsystem_support key. This key accepts an array of hashes, where each
        hash contains operatingsystem and operatingsystemrelease keys. The Forge uses these
        keys for search filtering and to display versions on module pages. 


The operatingsystem key accepts a string. The Forge uses this value for search filters. 
The operatingsystemrelease accepts an array of strings. The Forge displays these versions on module pages, and you
              can format them in whatever way makes sense for the operating system in question. 
 For example:

"operatingsystem_support": [
  {
  "operatingsystem":"RedHat",
  "operatingsystemrelease":[ "5.0", "6.0" ]
  },
  {
  "operatingsystem": "Ubuntu",
  "operatingsystemrelease": [
    "12.04",
    "10.04"
    ]
  }
]

Specifying versions
Your module metadata specifies your own module's version as well as the
        versions for your module's dependencies and requirements. Version your module semantically;
        for details about semantic versioning (also known as SemVer), see the Semantic Versioning
          specification. This helps others know what to expect from your module when you make
        changes.
When you specify versions for a module dependencies or
        requirements, you can specify multiple versions.
If your module is
        compatible with only one major or minor version, use the semantic major and minor version
        shorthand, such as 1.x or 1.2.1. If your module is compatible with multiple major versions,
        you can set a supported version range.
For example, 1.x indicates
        that your module is compatible with any minor update of version 1, but is not compatible
        with version 2 or larger. Specifying a version range such as >= 1.0.0 < 3.0.0
        indicates the the module is compatible with any version that greater than or equal to 1.0.0
        and less than 3.0.0.
Always set an upper version boundary in your
        version range. If your module is compatible with the most recent released versions of a
        dependencies, set the upper bound to exclude the next, unreleased major version. Without
        this upper bound, users might run into compatibility issues across major version boundaries,
        where incompatible changes occur.
For example, to accept minor
        updates to a dependency but avoid breaking changes, specify a major version. This example
        accepts any minor version of puppetlabs-stdlib version
        4:
"dependencies": [
  { "name": "puppetlabs/stdlib", "version_requirement": "4.x" },
]
In the example below, the current version of puppetlabs-stdlib is 4.8.0, and version 5.0.0 is not
        yet released. Because 5.0.0 might have breaking changes, the upper bound of the version
        dependency is set to that major
        version.
"dependencies": [
  { "name": "puppetlabs/stdlib", "version_requirement": ">= 3.2.0 < 5.0.0" }
]            
The version specifiers allowed in module dependencies are: 







Format
Description




1.2.3
A specific version.


1.x
A semantic major version. This example includes 1.0.1
                  but not 2.0.1. 


1.2.x
A semantic major and minor version. This example
                  includes 1.2.3 but not 1.3.0.


> 1.2.3
Greater than the specified version.


< 1.2.3
Less than the specified version.


>= 1.2.3
Greater than or equal to the specified
                  version.


<= 1.2.3
Less than or equal to the specified version.


>= 1.0.0 < 2.0.0
Range of versions; both conditions must be satisfied.
                  This example includes version 1.0.1 but not version 2.0.1.




Note: You cannot mix semantic versioning shorthand (such
          as .x) with syntax for greater than or less than versioning. For example, you could not
          specify ">= 3.2.x <
            4.x"


Adding tags
Optionally, you can add tags to your metadata to help users find your module in Forge searches. Generally, include four to six tags for any
        given module.
Pass tags as an array, like ["msyql", "database",
        "monitoring"].Tags cannot contain whitespace. Certain tags are prohibited, such as
        profanity or tags resembling the $::operatingsystem fact
        (such as "redhat", "rhel",
          "debian", "
windows", or "osx"). Use of
        prohibited tags lowers your module's quality score on the Forge.


Available metadata.json keys

Required and optional metadata.json keys specify metadata for your module.










Key
Required?
Value
Example






"name"


Required.
The full name of your module, including your Forge username, in the format username-module.

"puppetlabs-stdlib"




"version"

Required.
The current version of your module. This must follow
                  semantic versioning. For details, see the Semantic Versioning
                    specification.

"1.2.1"



"author"

Required.
The person who gets credit for creating the module. If
                  absent, this key defaults to the username portion of the name key.

"puppetlabs"



"license"

Required.
The license under which your module is made available.
                  License metadata must match an identifier provided by SPDX. For a complete list,
                  see the SPDX license list.
"Apache-2.0"



"summary"

Required.
A one-line description of your module.

"Standard library of
                    resources for Puppet modules."




"source"

Required.
The source repository for your module.

"https://github.com/puppetlabs/puppetlabs-stdlib"




"dependencies"

Required.
An array of other modules that your module depends on
                  to function. If the module has no dependencies, pass an empty array. See the
                  related topic about specifying dependencies for more details.

"dependencies": [
    {
      "name": "puppetlabs/stdlib",
      "version_requirement": ">= 4.13.1 < 6.0.0"
    }
],




"requirements"

Optional.
A list of external requirements for your module, given
                  as an array of hashes.

"requirements": [
    {
      "name": "puppet",
      "version_requirement": ">= 4.7.0 < 6.0.0"
    }
],





"project_page"


Optional.
A link to your module's website, to be included on the
                  module's Forge page.

"https://github.com/puppetlabs/puppetlabs-stdlib"





"issues_url"


Optional.
A link to your module's issue tracker.

"https://tickets.puppetlabs.com/browse/MODULES"





"operatingsystem_support"


Optional.
An array of hashes listing the operating systems that
                  your module is compatible with. See the topic about specifying operating
                  compatibility for details.

{
      "operatingsystem": "RedHat",
      "operatingsystemrelease": [
        "5",
        "6",
        "7"
      ]
}





"tags"


Optional.
An array of four to six key words to help people find
                  your module. 

["msyql", "database",
                    "monitoring", "reporting"]





 




          Was this page helpful?
        
Yes
No







              Don’t fill this out if you’re human: 






Thank you for your feedback!

            Feel free to add a comment or suggestion.
            





Send
Please enter your feedback





              Don’t fill this out if you’re human: 







            We’re sorry to hear that! 
            Please tell us why so we can help.
          

            Enter your feedback and email. This form is sent to the Puppet docs team.
            We ask for your email as we might contact you regarding your feedback.
          

            If you need help with the product itself, visit Puppet Support
            or ask in Puppet Community on Slack.
          

            Feedback:
            






            Email Address:
            






            To learn about how Puppet uses your personal information,
            visit our privacy policy.
          


Send
Please enter your feedback and contact email

          If you leave us your email, we may contact you regarding your feedback.
          For more information on how Puppet uses your personal information, see
          our
          privacy policy.
        





            Don’t fill this out if you’re human: 








    See an issue? Please file a JIRA ticket in our
    [DOCUMENTATION]
      project.
  











Puppet by Perforce gives IT operations teams back their time and offers peace of mind with infrastructure automation that enables security and compliance.






Legal
Privacy Policy
Terms of Use
Security


©  Puppet, Inc., a Perforce company. All rights reserved.




Puppet and other identified trademarks are the property of Puppet, Inc., Perforce Software, Inc., or an affiliate. Such trademarks are claimed and/or registered in the U.S. and other countries and regions. All third-party trademarks are the property of their respective holders. References to third-party trademarks do not imply endorsement or sponsorship of any products or services by the trademark holder. Contact Puppet, Inc., for further details.

