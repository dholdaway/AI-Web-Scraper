Title: Beginner's guide to writing modules
URL: https://www.puppet.com/docs/puppet/7/bgtm

Puppet.com
Forge
Education


                                    Try Puppet
                                


































        Docs
        






Products
Puppet Enterprise
Open Source Puppet
Bolt
Security Compliance Management
Continuous Delivery
Puppet Development Kit
Puppet DB
Puppet Plugin for VMware



        Support
        






Get
Technical Support Plans
Support Lifecycle Policy
New Puppet Enterprise Customer?



        Community
        






About Puppet
Company
Developer Experience
Community
Puppet Champions
Puppet Test Pilots
Community Calendar
Slack Channel







 









































PRODUCT AND VERSION


      Current product
      










      Current version
      








Puppet  7.34.0

Release notes

Puppet release notes
Puppet  7.34.0Security


Puppet known issues
Puppet Server release notes
Puppet Server known Issues
PuppetDB release notes (link)

Facter release notes
Facter 4.10.0
Facter 4.9.0
Facter 4.8.0
Facter 4.7.1
Facter 4.7.0
Facter 4.6.1
Facter 4.6.0
Facter 4.5.2


Facter known issues
What's new since Puppet 6?
Upgrading from Puppet 6 to Puppet 7

Experimental featuresMsgpack support

Archived documentation



Puppet overview
What is Puppet?
Why use Puppet desired state management?
Key concepts behind Puppet
The Puppet platform 
Puppet platform lifecycle 
Open source Puppet vs Puppet Enterprise (PE)
The Puppet ecosystem
Use cases
Glossary
Navigating the documentation



Set up Puppet

Install Puppet
System requirements
Installing Puppet  
Installing and configuring agents
Manually verify packages
Managing Platform versions



Configure Puppet settings
Puppet settings
Key configuration settings

Puppet's configuration files
puppet.conf: The main config file
environment.conf: Per-environment settings
fileserver.conf: Custom fileserver mount points
puppetdb.conf: PuppetDB server locations
autosign.conf: Basic certificate autosigning 
csr_attributes.yaml: Certificate extensions 
custom_trusted_oid_mapping.yaml: Short names for cert extension OIDs
device.conf: Network hardware access
routes.yaml: Advanced plugin routing


Adding file server mount points
Checking the values of settings
Editing settings on the command line
Configuration Reference



Upgrading
Upgrade Puppet Server

Upgrade agents
Upgrade agents using the puppet_agent module
Upgrade *nix agents
Upgrade Windows agents
Upgrade macOS agents


Upgrade PuppetDB



Environments
About environments
Creating environments
Environment isolation



Directories and files
Code and data directory (codedir)
Config directory (confdir)
Main manifest directory
The modulepath
SSL directory (ssldir)
Cache directory (vardir)


Report reference



Platform components

Puppet Server
About Puppet Server
Deprecated features
Server and agent compatibility
Installing Puppet Server

Configuring Puppet Server
Configuring Puppet Server

Puppet Server configuration files
auth.conf
ca.conf
global.conf
logback.xml
metrics.conf
product.conf
puppetserver.conf
web-routes.conf
webserver.conf


Migrating to the HOCON auth.conf format
Advanced logging configuration
Differing behavior in puppet.conf



Using and extending Puppet Server
Subcommands
Using Ruby gems
Intermediate CA
Infrastructure certificate revocation list (CRL)
External SSL termination

Server metrics
Monitoring Puppet Server metrics
HTTP Client Metrics


Tuning guide
Applying metrics to improve performance
Submitting usage telemetry
Scaling Puppet Server
Restarting Puppet Server"



Developer information
Developer debugging
Running from source
Tracing code events



Puppet Server HTTP API
Puppet Server HTTP API overview
PSON

Puppet v3 API
Catalog
Node
Facts
File Bucket File
File Content
File Metadata
Report



Puppet v4 APICatalog API


CA v1 API
Certificate
Certificate Request
Certificate Status
Certificate Revocation List
Expirations
Certificate Clean


Schemas (JSON)



API endpoints

Metrics API endpoints
v1 metrics
v2 (Jolokia) metrics



Status API endpoints
Services endpoint
Simple endpoint



Administrative API endpoints
Environment cache
JRuby pool



Server-specific Puppet API endpoints
Environment classes
Environment modules
Static file content





Certificate authority and SSL
Puppet Server CA commands
Intermediate CA
Autosigning certificate requests
CSR attributes and certificate extensions
Regenerating certificates in a Puppet deployment
External CA
External SSL termination





Facter  
Facter: CLI
Facter: Core Facts

Custom facts overviewEnvironment facts 

Writing custom facts
External facts
Configuring Facter with facter.conf


PuppetDB

Puppet services and tools
Puppet commands
Running Puppet commands on Windows  

primary Puppet serverAbout Puppet Server

Puppet agent on *nix systems
Puppet agent on Windows
Puppet apply
Puppet device



Puppet reports
Reporting
Report reference
Writing custom report processors
Report format



Life cycle of a Puppet run
Agent-server HTTPS communications
Catalog compilation
Static catalogs 





Using Puppet code
Classifying nodes
Managing environment content with a Puppetfile
Using content from Puppet Forge

Designing system configs (roles and profiles)
The roles and profiles method 
Roles and profiles example 
Designing advanced profiles 
Designing convenient roles 



Separating data (Hiera)
About Hiera  
Getting started with Hiera  
Configuring Hiera
Creating and editing data 
Looking up data with Hiera  
Writing new data backends 

Debugging Hiera
Unexpected values
Common errors


Upgrading to Hiera 5 



Use case examples
Manage NTP
Manage sudo 
Manage DNS
Manage firewall rules
Forge examples





Syntax and settings

The Puppet language
Puppet language overview
Puppet language syntax examples
The Puppet language style guide 
Files and paths on Windows  
Code comments 
Variables
Resources

Resource types
Resource Type Reference (Single-Page)
Built-in types
Optional resource types for Windows
Resource Type: exec
Using exec on Windows  
Resource Type: file
Using file on Windows
Resource Type: filebucket
Resource Type: group
Using user and group on Windows
Resource types overview
Resource Type: notify
Resource Type: package
Using package on Windows  
Resource Type: resources
Resource Type: schedule
Resource Type: service
Using service
Resource Type: stage
Resource Type: tidy
Resource Type: user


Relationships and ordering
Classes
Defined resource types
Bolt tasks
Expressions and operators
Conditional statements and expressions
Function calls
Built-in function reference
Node definitions

Facts and built-in variables
Accessing facts from Puppet code
Built-in variables


Reserved words and acceptable names

Custom resources

Develop types and providers with the Resource APIResource API reference


Low-level method for developing types and providers
Type development
Provider development
Creating resources





Custom functions
Custom functions overview 
Writing custom functions in the Puppet language

Writing custom functions in Ruby
Custom functions in Ruby overview
Ruby function signatures
Using special features in implementation methods
Iterative functions
Refactoring legacy 3.x functions



Deferring a function
Deferred functions overview
Using a template with Deferred values
Write a deferred function to store secrets
Integrations with secret stores





Values, data types, and aliases
Type aliases
Typecasting
Abstract data types
Arrays
Binary
Booleans
Data type syntax
Default
Error data type
Hashes
Numbers
Regular expressions
Resource and class references
Resource types
Sensitive
Strings
Time-related data types
Undef



Templates
Creating templates using Embedded Puppet
Creating templates using Embedded Ruby



Advanced constructs
Iteration and loops
Lambdas
Resource default statements
Resource collectors
Virtual resources
Exported resources
Tags
Run stages



Details of complex behaviors
Containment
Scope
Namespaces and autoloading


Securing sensitive data


Metaparameter reference
Configuration Reference
Built-in function reference

Puppet Man Pages

Core tools
Man Page: puppet agent
Man Page: puppet apply
Man Page: puppet module
Man Page: puppet resource
Man Page: puppet lookup



Occasionally useful
Man Page: puppet config
Man Page: puppet describe
Man Page: puppet device
Man Page: puppet doc
Man Page: puppet help
Man Page: puppet node
Man Page: puppet parser



Niche
Man Page: puppet catalog
Man Page: puppet facts
Man Page: puppet filebucket
Man Page: puppet report







Developing modules

Modules
Modules overview
Plug-ins in modules
Module cheat sheet
Installing and managing modules from the command line
Beginner's guide to writing modules
Module metadata
Documenting modules
Documenting modules with Puppet Strings  
Puppet Strings style guide

Publishing modulesUsing the Forge API

Contributing to Puppet modules


Puppet Development Kit (PDK)
Puppet VSCode extension

PowerShell DSC Resources
Converting DSC Resources
Distributing arbitrary DSC resources
Upgrading Puppet DSC modules 
Troubleshooting DSC Resources 


Ruby API for developing extensions


Beginner's guide to writing modules

 Create great Puppet modules
    by following best practices and guidelines.
This guide is intended to provide an approachable introduction to module
      best practices. Before you begin, we recommend that you are familiar enough with Puppet that you have a basic understanding of the language, you
      know what constitutes a class, and you understand the basic module structure.
Defining your module
Before you begin writing your module, define what it will do. Defining the range of your
        module's work helps you create concise modules that are easy to work with. A good module has
        only one area of responsibility. For example, the module addresses installing MySQL, but it
        doesn't install other programs or services that require MySQL. 
Ideally, a module manages a single piece of software from installation through setup,
        configuration, and service management. When you plan your module, consider what task your
        module will accomplish and what functions it requires in your Puppet environment. Many users have 200 or more modules in an
        environment, so simple is better. For more complex needs, create multiple modules. Having
        many small, focused modules promotes code reuse and turns modules into building blocks. 
For example, the puppetlabs-puppetdb module deals solely
        with the the setup, configuration, and management of PuppetDB. However, PuppetDB stores its data in a PostgreSQL database. Instead of trying to manage PostgreSQL with the puppetdb
        module, we included the puppetlabs-postgresql module as a
        dependency. This way, the puppetdb module can use the
          postgresql module's classes and resources to build out the
        right configuration. 

Class design
A good module is made up of small, self-contained classes that each do only one thing.
        Classes within a module are similar to functions in programming, using parameters to perform
        related steps that create a coherent whole. 
 In general, files must have the same named as the class or definition that it contains,
        and classes must be named after their function. The one exception to this rule is the main
        class of a module, which is defined in the init.pp file, but
        is called by the same name as the module. Generally, a module includes: 

The <MODULE> class: The main class of the
              module shares the name of the module and is defined in the init.pp file. 


The install class: Contains all of the resources
              related to installing the software that the module manages. 


The config class: Contains resources related to
              configuring the installed software. 


The service class: Contains service resources, as
              well as anything else related to the running state of the software. 



For more information and an example of this structure and the code contained in classes,
        see the topic about module classes.

Parameters
Parameters form the public API of your module. They are the most important interface you
        expose, so be sure to balance to the number and variety of parameters so that users can
        customize their interactions with the module.
Name your parameters in a consistent thing_property
        pattern, such as package_ensure. Consistency in names helps
        users understand your parameters and aids in troubleshooting and collaborative development.
        If you have a parameter that manages the entire installation of a package, you can use the
          package_manage convention. The package_manage pattern allows you to wrap all of the resources in an if $package_manage {} test, as shown in this ntp example:

class ntp::install {

  if $ntp::package_manage {
    package { $ntp::package_name:
      ensure => $ntp::package_ensure,
    }
  }
}            

To make sure users can customize your module as needed, add parameters. Do not hardcode
        data in your module, because this makes it inflexible and harder to use in even slightly
        different circumstances. For the same reason, avoid adding parameters that allow users to
        override templates. When you allow template overrides, users can override your template with
        a custom template containing additional hardcoded parameters. Instead, it's better to add
        flexible, user configurable parameters as needed.
For an example of a module that offers many parameters to increase flexibility, see the
          puppetlabs-apache module. 

Ordering
Base all order-related dependencies (such as require and
          before) on classes rather than resources. Class-based
        ordering allows you to isolate the implementation details of each class. For example, rather
        than specifiying require for several packages, you can use
        one class dependency. This allows you to make adjustments to the module::install class only, instead of adjusting multiple class manifests: 

file { 'configuration':
      ensure  => present,
      require => Class['module::install'],
    }


Containment
Ensure that your main classes explicitly contain any subordinate classes they declare.
        Classes do not automatically contain the classes they declare, because classes can be
        declared in several places via include and similar
        functions. If your classes contain the subordinate classes, it makes it easier for other
        modules to form ordering relationships with your module.
To contain classes, use the contain function. For example,
        the puppetlabs-ntp module uses containment in the main
          ntp
        class:contain ntp::install
contain ntp::config
contain ntp::service

Class['ntp::install']
-> Class['ntp::config']
~> Class['ntp::service']For more information about containment, see the containment
          documentation. 

Dependencies
 If your module's functionality depends on another module, list these dependencies in the
        module and include them directly in the module's main class with an include statement. This ensures that the dependency is included in the catalog.
        List the dependency to the module's metadata.json file and
        the .fixtures.yml file used for RSpec unit testing.

Testing modules
Test your module to make sure that it works in a variety of conditions and that its options
        and parameters work together. PDK includes tools for
        validating and running unit tests on your module, including RSpec, RSpec Puppet, and Puppet
        Spec Helper.
Write unit tests to verify that your module works as intended in a variety of
        circumstances. For example, to ensure that the module works in different operating systems,
        write tests that call the osfamily fact to verify that the
        package and service exist in the catalog for each operating system your module supports. 
 To learn more about how to write unit tests, see the RSpec testing tutorial.
        For more information on testing tools, see the tools list below.



rspec-puppet


Extends the RSpec testing framework to understand and work with Puppet catalogs, the artifact it specializes in
                testing. This allows you to write tests that verify that your module works as
                intended. This tool is included in PDK.
For example, you can call facts, such as osfamily,
                with RSpec, iterating over a list of operating systems to make sure that the package
                and service exist in the catalog for every operating system your module
                supports.
 To learn more about rspec-puppet use and unit
                testing, see the rspec-puppet
                  page.


puppetlabs_spec_helper


Automates some of the tasks required to test modules. This is especially useful in
                conjunction with rspec-puppet, because puppetlabs_spec_helper provides default Rake tasks that
                allow you to standardize testing across modules. It also provides some code to
                connect rspec-puppet with modules. This tool is
                included in PDK.
To learn more, see the puppetlabs_spec_helper project.

litmus

Allows you to provision test platforms such as containers/images, install a Puppet
                agent, install a module and run tests against your systems. For more information,
                see the puppet_litmus documentation.




Documenting your module
 Document your module's use cases, usage examples, and parameter details with README.md and REFERENCE.md files.
        In the README, explain why and how users would use your module, and provide usage examples.
        Use Puppet Strings to create the REFERENCE, which is a detailed
        list of information about your module's classes, defined types, functions, tasks, task
        plans, and resource types and providers. For more about writing your README and creating the
        REFERENCE, see our module documentation guide
        and the Strings documentation.

Versioning your module
 Whenever you make changes to your module, update the version number. Version your module
        semantically to help users understand the level of changes in your updated module. To learn
        more about the specific rules of semantic versioning, see the semantic versioning specification.
After you've decided on the new version number, adjust the version number in the metadata.json file. This allows you to create a list of
        dependencies in the `metadata.json` file of your modules with specific versions of dependent
        modules, which ensures your module isn't used with an old dependency that won't work.
        Versioning also enables workflow management by allowing you to easily use different versions
        of modules in different environments.

Releasing your module
Publish your modules on the Forge to share your modules with
        other Puppet users. Sharing modules allows other users to not
        only download and use your module to solve their infrastructure problems, but also to
        contribute their own improvements to your modules. Sharing modules fosters community among
          Puppet users, and helps improve the quality of modules
        available to everyone. To learn how to publish your modules to the Forge, see the module
          publishing documentation.



Module classes

A typical module contains a main module class, as well as
    classes for managing installation, configuration, and the running state of the managed software.
    The puppetlabs-ntp module
    provides examples of the classes in such a module structure.

module

The main class of any module shares the name of the module, but
        the file itself is named init.pp. This class is the module's main interface point with Puppet. If possible, make the main class the only parameterized
        class in your module. Limiting the parameterized classes to only the main class means that
        you only have to include a single class to control usage of the entire module. This class
        provides sensible defaults so that a user can get going by just declaring the main class
        with include module.
 For instance, the main ntp class in the puppetlabs-ntp module is the only parameterized class in the
        module: 

class ntp (
  Boolean $broadcastclient,
  Stdlib::Absolutepath $config,
  Optional[Stdlib::Absolutepath] $config_dir,
  String $config_file_mode,
  Optional[String] $config_epp,
  Optional[String] $config_template,
  Boolean $disable_auth,
  Boolean $disable_dhclient,
  Boolean $disable_kernel,
  Boolean $disable_monitor,
  Optional[Array[String]] $fudge,
  Stdlib::Absolutepath $driftfile,
 ...



module::install

The install class must be located in the install.pp file. It contains all of the
        resources related to getting the software that the module manages onto the node. The install
        class must be named module::install. In the puppetlabs-ntp module, this class is private, which means users do not interact
        with the class directly.

class ntp::install {

  if $ntp::package_manage {
    package { $ntp::package_name:
      ensure => $ntp::package_ensure,
    }
  }
}


module::config

Place the resources related to configuring the installed
        software in a config class. The config class must be named module::config and must be located in the config.pp file. In the puppetlabs-ntp module, this class
        is private, which means users do not interact with the class directly.

class ntp::config {

  # The servers-netconfig file overrides NTP config on SLES 12, interfering with our configuration.
  if $facts['operatingsystem'] == 'SLES' and $facts['operatingsystemmajrelease'] == '12' {
    file { '/var/run/ntp/servers-netconfig':
      ensure => 'absent'
    }
  }

  if $ntp::keys_enable {
    case $ntp::config_dir {
      '/', '/etc', undef: {}
      default: {
        file { $ntp::config_dir:
          ensure  => directory,
          owner   => 0,
          group   => 0,
          mode    => '0775',
          recurse => false,
        }
      }
    }

    file { $ntp::keys_file:
      ensure  => file,
      owner   => 0,
      group   => 0,
      mode    => '0644',
      content => epp('ntp/keys.epp'),
    }
  }
...


module::service

Put the remaining service resources, and anything else related
        to the running state of the software in the service class. The service class must be named
          module::service and must
        be located in the service.pp
        file. In the puppetlabs-ntp
        module, this class is private, which means users do not interact with the class
        directly.

class ntp::service {

  if ! ($ntp::service_ensure in [ 'running', 'stopped' ]) {
    fail('service_ensure parameter must be running or stopped')
  }

  if $ntp::service_manage == true {
    service { 'ntp':
      ensure     => $ntp::service_ensure,
      enable     => $ntp::service_enable,
      name       => $ntp::service_name,
      provider   => $ntp::service_provider,
      hasstatus  => true,
      hasrestart => true,
    }
  }
}


 




          Was this page helpful?
        
Yes
No







              Don’t fill this out if you’re human: 






Thank you for your feedback!

            Feel free to add a comment or suggestion.
            





Send
Please enter your feedback





              Don’t fill this out if you’re human: 







            We’re sorry to hear that! 
            Please tell us why so we can help.
          

            Enter your feedback and email. This form is sent to the Puppet docs team.
            We ask for your email as we might contact you regarding your feedback.
          

            If you need help with the product itself, visit Puppet Support
            or ask in Puppet Community on Slack.
          

            Feedback:
            






            Email Address:
            






            To learn about how Puppet uses your personal information,
            visit our privacy policy.
          


Send
Please enter your feedback and contact email

          If you leave us your email, we may contact you regarding your feedback.
          For more information on how Puppet uses your personal information, see
          our
          privacy policy.
        





            Don’t fill this out if you’re human: 








    See an issue? Please file a JIRA ticket in our
    [DOCUMENTATION]
      project.
  











Puppet by Perforce gives IT operations teams back their time and offers peace of mind with infrastructure automation that enables security and compliance.






Legal
Privacy Policy
Terms of Use
Security


©  Puppet, Inc., a Perforce company. All rights reserved.




Puppet and other identified trademarks are the property of Puppet, Inc., Perforce Software, Inc., or an affiliate. Such trademarks are claimed and/or registered in the U.S. and other countries and regions. All third-party trademarks are the property of their respective holders. References to third-party trademarks do not imply endorsement or sponsorship of any products or services by the trademark holder. Contact Puppet, Inc., for further details.

