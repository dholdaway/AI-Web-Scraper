Title: Autosigning certificate requests
URL: https://www.puppet.com/docs/puppet/7/ssl_autosign

Puppet.com
Forge
Education


                                    Try Puppet
                                


































        Docs
        






Products
Puppet Enterprise
Open Source Puppet
Bolt
Security Compliance Management
Continuous Delivery
Puppet Development Kit
Puppet DB
Puppet Plugin for VMware



        Support
        






Get
Technical Support Plans
Support Lifecycle Policy
New Puppet Enterprise Customer?



        Community
        






About Puppet
Company
Developer Experience
Community
Puppet Champions
Puppet Test Pilots
Community Calendar
Slack Channel







 









































PRODUCT AND VERSION


      Current product
      










      Current version
      








Puppet  7.34.0

Release notes

Puppet release notes
Puppet  7.34.0Security


Puppet known issues
Puppet Server release notes
Puppet Server known Issues
PuppetDB release notes (link)

Facter release notes
Facter 4.10.0
Facter 4.9.0
Facter 4.8.0
Facter 4.7.1
Facter 4.7.0
Facter 4.6.1
Facter 4.6.0
Facter 4.5.2


Facter known issues
What's new since Puppet 6?
Upgrading from Puppet 6 to Puppet 7

Experimental featuresMsgpack support

Archived documentation



Puppet overview
What is Puppet?
Why use Puppet desired state management?
Key concepts behind Puppet
The Puppet platform 
Puppet platform lifecycle 
Open source Puppet vs Puppet Enterprise (PE)
The Puppet ecosystem
Use cases
Glossary
Navigating the documentation



Set up Puppet

Install Puppet
System requirements
Installing Puppet  
Installing and configuring agents
Manually verify packages
Managing Platform versions



Configure Puppet settings
Puppet settings
Key configuration settings

Puppet's configuration files
puppet.conf: The main config file
environment.conf: Per-environment settings
fileserver.conf: Custom fileserver mount points
puppetdb.conf: PuppetDB server locations
autosign.conf: Basic certificate autosigning 
csr_attributes.yaml: Certificate extensions 
custom_trusted_oid_mapping.yaml: Short names for cert extension OIDs
device.conf: Network hardware access
routes.yaml: Advanced plugin routing


Adding file server mount points
Checking the values of settings
Editing settings on the command line
Configuration Reference



Upgrading
Upgrade Puppet Server

Upgrade agents
Upgrade agents using the puppet_agent module
Upgrade *nix agents
Upgrade Windows agents
Upgrade macOS agents


Upgrade PuppetDB



Environments
About environments
Creating environments
Environment isolation



Directories and files
Code and data directory (codedir)
Config directory (confdir)
Main manifest directory
The modulepath
SSL directory (ssldir)
Cache directory (vardir)


Report reference



Platform components

Puppet Server
About Puppet Server
Deprecated features
Server and agent compatibility
Installing Puppet Server

Configuring Puppet Server
Configuring Puppet Server

Puppet Server configuration files
auth.conf
ca.conf
global.conf
logback.xml
metrics.conf
product.conf
puppetserver.conf
web-routes.conf
webserver.conf


Migrating to the HOCON auth.conf format
Advanced logging configuration
Differing behavior in puppet.conf



Using and extending Puppet Server
Subcommands
Using Ruby gems
Intermediate CA
Infrastructure certificate revocation list (CRL)
External SSL termination

Server metrics
Monitoring Puppet Server metrics
HTTP Client Metrics


Tuning guide
Applying metrics to improve performance
Submitting usage telemetry
Scaling Puppet Server
Restarting Puppet Server"



Developer information
Developer debugging
Running from source
Tracing code events



Puppet Server HTTP API
Puppet Server HTTP API overview
PSON

Puppet v3 API
Catalog
Node
Facts
File Bucket File
File Content
File Metadata
Report



Puppet v4 APICatalog API


CA v1 API
Certificate
Certificate Request
Certificate Status
Certificate Revocation List
Expirations
Certificate Clean


Schemas (JSON)



API endpoints

Metrics API endpoints
v1 metrics
v2 (Jolokia) metrics



Status API endpoints
Services endpoint
Simple endpoint



Administrative API endpoints
Environment cache
JRuby pool



Server-specific Puppet API endpoints
Environment classes
Environment modules
Static file content





Certificate authority and SSL
Puppet Server CA commands
Intermediate CA
Autosigning certificate requests
CSR attributes and certificate extensions
Regenerating certificates in a Puppet deployment
External CA
External SSL termination





Facter  
Facter: CLI
Facter: Core Facts

Custom facts overviewEnvironment facts 

Writing custom facts
External facts
Configuring Facter with facter.conf


PuppetDB

Puppet services and tools
Puppet commands
Running Puppet commands on Windows  

primary Puppet serverAbout Puppet Server

Puppet agent on *nix systems
Puppet agent on Windows
Puppet apply
Puppet device



Puppet reports
Reporting
Report reference
Writing custom report processors
Report format



Life cycle of a Puppet run
Agent-server HTTPS communications
Catalog compilation
Static catalogs 





Using Puppet code
Classifying nodes
Managing environment content with a Puppetfile
Using content from Puppet Forge

Designing system configs (roles and profiles)
The roles and profiles method 
Roles and profiles example 
Designing advanced profiles 
Designing convenient roles 



Separating data (Hiera)
About Hiera  
Getting started with Hiera  
Configuring Hiera
Creating and editing data 
Looking up data with Hiera  
Writing new data backends 

Debugging Hiera
Unexpected values
Common errors


Upgrading to Hiera 5 



Use case examples
Manage NTP
Manage sudo 
Manage DNS
Manage firewall rules
Forge examples





Syntax and settings

The Puppet language
Puppet language overview
Puppet language syntax examples
The Puppet language style guide 
Files and paths on Windows  
Code comments 
Variables
Resources

Resource types
Resource Type Reference (Single-Page)
Built-in types
Optional resource types for Windows
Resource Type: exec
Using exec on Windows  
Resource Type: file
Using file on Windows
Resource Type: filebucket
Resource Type: group
Using user and group on Windows
Resource types overview
Resource Type: notify
Resource Type: package
Using package on Windows  
Resource Type: resources
Resource Type: schedule
Resource Type: service
Using service
Resource Type: stage
Resource Type: tidy
Resource Type: user


Relationships and ordering
Classes
Defined resource types
Bolt tasks
Expressions and operators
Conditional statements and expressions
Function calls
Built-in function reference
Node definitions

Facts and built-in variables
Accessing facts from Puppet code
Built-in variables


Reserved words and acceptable names

Custom resources

Develop types and providers with the Resource APIResource API reference


Low-level method for developing types and providers
Type development
Provider development
Creating resources





Custom functions
Custom functions overview 
Writing custom functions in the Puppet language

Writing custom functions in Ruby
Custom functions in Ruby overview
Ruby function signatures
Using special features in implementation methods
Iterative functions
Refactoring legacy 3.x functions



Deferring a function
Deferred functions overview
Using a template with Deferred values
Write a deferred function to store secrets
Integrations with secret stores





Values, data types, and aliases
Type aliases
Typecasting
Abstract data types
Arrays
Binary
Booleans
Data type syntax
Default
Error data type
Hashes
Numbers
Regular expressions
Resource and class references
Resource types
Sensitive
Strings
Time-related data types
Undef



Templates
Creating templates using Embedded Puppet
Creating templates using Embedded Ruby



Advanced constructs
Iteration and loops
Lambdas
Resource default statements
Resource collectors
Virtual resources
Exported resources
Tags
Run stages



Details of complex behaviors
Containment
Scope
Namespaces and autoloading


Securing sensitive data


Metaparameter reference
Configuration Reference
Built-in function reference

Puppet Man Pages

Core tools
Man Page: puppet agent
Man Page: puppet apply
Man Page: puppet module
Man Page: puppet resource
Man Page: puppet lookup



Occasionally useful
Man Page: puppet config
Man Page: puppet describe
Man Page: puppet device
Man Page: puppet doc
Man Page: puppet help
Man Page: puppet node
Man Page: puppet parser



Niche
Man Page: puppet catalog
Man Page: puppet facts
Man Page: puppet filebucket
Man Page: puppet report







Developing modules

Modules
Modules overview
Plug-ins in modules
Module cheat sheet
Installing and managing modules from the command line
Beginner's guide to writing modules
Module metadata
Documenting modules
Documenting modules with Puppet Strings  
Puppet Strings style guide

Publishing modulesUsing the Forge API

Contributing to Puppet modules


Puppet Development Kit (PDK)
Puppet VSCode extension

PowerShell DSC Resources
Converting DSC Resources
Distributing arbitrary DSC resources
Upgrading Puppet DSC modules 
Troubleshooting DSC Resources 


Ruby API for developing extensions


Autosigning certificate requests

Before Puppet agent nodes
        can retrieve their configuration catalogs, they require a signed certificate from the local
            Puppet certificate authority (CA). When using Puppetâ€™s built-in CA instead of an external CA, agents submit
        a certificate signing request (CSR) to the CA to retrieve a signed certificate after it's
        available.
By default, these CSRs must be manually signed by an admin user, using
            either the puppetserver
                ca command or the Node requests page in the Puppet Enterprise
            console.
Alternatively, to speed up the process of bringing new agent nodes
            into the deployment, you can configure the CA to automatically sign certain CSRs.


CAUTION: Autosigning CSRs changes the nature of your
                deploymentâ€™s security, and you should understand the implications before configuring
                it. Each type of autosigning has its own security impact.



Disabling autosigning

By default, the autosign setting in the [server] section of the CAâ€™s puppet.conf file is set
            to $confdir/autosign.conf. The basic autosigning functionality is enabled upon
        installation. 
Depending on your installation method, there might not be an allowlist
            at that location after the Puppet Server is running:


Open source Puppet: autosign.conf doesnâ€™t exist
                        by default.
Monolithic Puppet Enterprise (PE)
                        installations: All required services run on one server, and autosign.conf exists on the primary server, but by default it's empty
                    because the primary server doesnâ€™t need to add other servers to an allowlist.
Split PE installations: Services like PuppetDB can
                        run on different servers, the autosign.conf exists on the CA server and
                        contains an allowlist of other required hosts.


If the autosign.conf file is empty or doesnâ€™t exist, the allowlist is
            effectively empty. The CA Puppet primary server doesnâ€™t autosign
            any certificates until the the autosign settingâ€™s path is configured, or until
            the default autosign.conf file is a non-executable allowlist file. This file must
            contain correctly formatted content or a custom policy executable that the Puppet user has permission to run.
To explicitly disable autosigning, set autosign = false in
                the [server] section of the CA Puppet
            primary serverâ€™s puppet.conf. This disables CA autosigning even if the autosign.conf file or a
            custom policy executable exists.
For more information about the autosign setting in puppet.conf, see the configuration reference.


NaÃ¯ve autosigning

NaÃ¯ve autosigning causes the CA to autosign all
      CSRs.
To enable naÃ¯ve autosigning, set autosign = true in the [server] section of the CA Puppet primary serverâ€™s puppet.conf.


CAUTION: For security reasons, never use naÃ¯ve
            autosigning in a production deployment. NaÃ¯ve autosigning is suitable only for
            temporary test deployments that are incapable of serving catalogs containing sensitive
            information.



Basic autosigning (autosign.conf)

In basic autosigning, the CA uses a config file containing
        an allowlist of certificate names and domain name globs. When a CSR arrives, the requested
        certificate name is checked against the allowlist file. If the name is present, or covered
        by one of the domain name globs, the certificate is autosigned. If not, it's left for a
        manual review.
Enabling basic autosigning
The autosign.conf allowlist fileâ€™s location
                and contents are described in its documentation.

Puppet looks for autosign.conf at the path configured in the [autosign setting] within the [server] section of puppet.conf. The default path is $confdir/autosign.conf, and the default confdir path depends on your operating system. For more
                information, see the confdir documentation.

If the autosign.conf file pointed to by
                    the autosign setting is a file that
                the Puppet user can execute, Puppet instead attempts to run it as a custom policy
                executable, even if it contains a valid autosign.conf allowlist.


Note: In open source Puppet,
                        no autosign.conf file exists by
                    default. In Puppet Enterprise, the file exists by default
                    but might be empty. In both cases, the basic autosigning feature is technically
                    enabled by default but doesnâ€™t autosign any certificates because the allowlist
                    is effectively empty. The CA Puppet primary
                        server therefore doesnâ€™t autosign any certificates until the autosign.conf file contains a properly
                        formatted allowlist or is a custom policy executable that the Puppet user has permission to run, or until
                            the autosign setting is pointed at
                        an allowlist file with properly formatted content or a custom policy
                        executable that the Puppet user has
                        permission to run.



Security implications of basic autosigning
Basic autosigning is insecure because any host can provide any certname when
                requesting a certificate. Use it only when you fully trust any computer capable of
                connecting to the Puppet primary server.
With basic autosigning enabled, an attacker who guesses an unused certname allowed
                    by autosign.conf can obtain a signed
                agent certificate from the Puppet primary server. The
                attacker could then obtain a configuration catalog, which can contain sensitive
                information depending on your deploymentâ€™s Puppet
                code and node classification.



Policy-based autosigning

In policy-based autosigning, the CA runs an external
        policy executable every time it receives a CSR. This executable examines the CSR and tells
        the CA whether the certificate is approved for autosigning. If the executable approves, the
        certificate is autosigned; if not, it's left for manual review.
Enabling policy-based autosigning
To enable policy-based autosigning, set autosign =
                    <policy executable file> in the [server] section of the CA Puppet
                primary serverâ€™s puppet.conf.
The policy executable file must be executable by the same user as the Puppet primary server. If not, it is treated as
                a certname allowlist file.

Custom policy executables
A custom policy executable can be written in any programming language; it just has to
                be executable in a *nix-like environment. The Puppet primary server passes it the certname of the
                request (as a command line argument) and the PEM-encoded CSR (on stdin), and expects
                    a 0 (approved) or non-zero (rejected)
                exit code.
After it has the CSR, a policy executable can extract information from it and decide
                whether to approve the certificate for autosigning. This is useful when you are
                provisioning your nodes and are embedding additional information in the CSR.
If you arenâ€™t embedding additional data, the CSR contains only the nodeâ€™s certname
                and public key. This can still provide more flexibility and security
                    than autosign.conf, as the executable can
                do things like query your provisioning system, CMDB, or cloud provider to make sure
                a node with that name was recently added.

Security implications of policy-based autosigning
Depending on how you manage the information the policy executable is using,
                policy-based autosigning can be fast and extremely secure. 
For example:

If you embed a unique pre-shared key on each node you provision, and
                            provide your policy executable with a database of these keys, your
                            autosigning security is as good as your handling of the keys. As long as
                            itâ€™s impractical for an attacker to acquire a PSK, it's impractical for
                            them to acquire a signed certificate.


If nodes running on a cloud service embed their instance UUIDs in their
                            CSRs, and your executable queries the cloud providerâ€™s API to check that
                            a node's UUID exists in your account, your autosigning security is as
                            good as the security of the cloud providerâ€™s API. If an attacker can
                            impersonate a legit user to the API and get a list of node UUIDs, or if
                            they can create a rogue node in your account, they can acquire a signed
                            certificate.



When designing your CSR data and signing policy, you must think things through
                carefully. If you can arrange reasonable end-to-end security for secret data on your
                nodes, you can configure a secure autosigning system.

Policy executable API
The API for policy executables is as follows.







Run environment



The executable runs one time for each incoming
                                                CSR.


It is executed by the Puppet primary server
                                                process and runs as the same user as the Puppet primary
                                                server.


The Puppet primary
                                                server process is blocked until the executable
                                                finishes running. We expect policy executables
                                                to finish in a timely fashion; if they do not, itâ€™s
                                                possible for them to tie up all available Puppet primary server
                                                threads and deny service to other agents. If an
                                                executable needs to perform network requests or
                                                other potentially expensive operations, the author
                                                is in charge of implementing any necessary timeouts,
                                                possibly bailing and exiting non-zero in the event
                                                of failure. 





Arguments



The executable must allow a single command line
                                                argument. This argument is the Subject CN (certname)
                                                of the incoming CSR.


No other command line arguments should be
                                                provided.


The Puppet primary
                                                server should never fail to provide this
                                                argument.





Stdin



The executable receives the entirety of the incoming
                                                CSR on its stdin stream. The CSR is encoded in
                                                  pem format.


The stdin stream contains nothing but the complete
                                                CSR.


The Puppet primary
                                                server should never fail to provide the CSR on
                                                stdin.





Exit status



The executable must exit with a status
                                                  of 0 if
                                                the certificate should be autosigned; it must exit
                                                with a non-zero status if it should not be
                                                autosigned.


The Puppet primary
                                                server treats all non-zero exit statuses as
                                                equivalent.





Stdout and stderr



Anything the executable emits on stdout or stderr is
                                                copied to the Puppet Server
                                                log output at the debug log level. Puppet otherwise
                                                ignores the executableâ€™s output; only the exit code
                                                is considered significant.










 




          Was this page helpful?
        
Yes
No







              Donâ€™t fill this out if youâ€™re human: 






Thank you for your feedback!

            Feel free to add a comment or suggestion.
            





Send
Please enter your feedback





              Donâ€™t fill this out if youâ€™re human: 







            Weâ€™re sorry to hear that! 
            Please tell us why so we can help.
          

            Enter your feedback and email. This form is sent to the Puppet docs team.
            We ask for your email as we might contact you regarding your feedback.
          

            If you need help with the product itself, visit Puppet Support
            or ask in Puppet Community on Slack.
          

            Feedback:
            






            Email Address:
            






            To learn about how Puppet uses your personal information,
            visit our privacy policy.
          


Send
Please enter your feedback and contact email

          If you leave us your email, we may contact you regarding your feedback.
          For more information on how Puppet uses your personal information, see
          our
          privacy policy.
        





            Donâ€™t fill this out if youâ€™re human: 








    See an issue? Please file a JIRA ticket in our
    [DOCUMENTATION]
      project.
  











Puppet by Perforce gives IT operations teams back their time and offers peace of mind with infrastructure automation that enables security and compliance.






Legal
Privacy Policy
Terms of Use
Security


Â©  Puppet, Inc., a Perforce company. All rights reserved.




Puppet and other identified trademarks are the property of Puppet, Inc., Perforce Software, Inc., or an affiliate. Such trademarks are claimed and/or registered in the U.S. and other countries and regions. All third-party trademarks are the property of their respective holders. References to third-party trademarks do not imply endorsement or sponsorship of any products or services by the trademark holder. Contact Puppet, Inc., for further details.

