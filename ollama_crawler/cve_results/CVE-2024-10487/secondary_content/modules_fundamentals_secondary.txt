Title: Modules overview
URL: https://www.puppet.com/docs/puppet/7/modules_fundamentals

Puppet.com
Forge
Education


                                    Try Puppet
                                


































        Docs
        






Products
Puppet Enterprise
Open Source Puppet
Bolt
Security Compliance Management
Continuous Delivery
Puppet Development Kit
Puppet DB
Puppet Plugin for VMware



        Support
        






Get
Technical Support Plans
Support Lifecycle Policy
New Puppet Enterprise Customer?



        Community
        






About Puppet
Company
Developer Experience
Community
Puppet Champions
Puppet Test Pilots
Community Calendar
Slack Channel







 









































PRODUCT AND VERSION


      Current product
      










      Current version
      








Puppet  7.34.0

Release notes

Puppet release notes
Puppet  7.34.0Security


Puppet known issues
Puppet Server release notes
Puppet Server known Issues
PuppetDB release notes (link)

Facter release notes
Facter 4.10.0
Facter 4.9.0
Facter 4.8.0
Facter 4.7.1
Facter 4.7.0
Facter 4.6.1
Facter 4.6.0
Facter 4.5.2


Facter known issues
What's new since Puppet 6?
Upgrading from Puppet 6 to Puppet 7

Experimental featuresMsgpack support

Archived documentation



Puppet overview
What is Puppet?
Why use Puppet desired state management?
Key concepts behind Puppet
The Puppet platform 
Puppet platform lifecycle 
Open source Puppet vs Puppet Enterprise (PE)
The Puppet ecosystem
Use cases
Glossary
Navigating the documentation



Set up Puppet

Install Puppet
System requirements
Installing Puppet  
Installing and configuring agents
Manually verify packages
Managing Platform versions



Configure Puppet settings
Puppet settings
Key configuration settings

Puppet's configuration files
puppet.conf: The main config file
environment.conf: Per-environment settings
fileserver.conf: Custom fileserver mount points
puppetdb.conf: PuppetDB server locations
autosign.conf: Basic certificate autosigning 
csr_attributes.yaml: Certificate extensions 
custom_trusted_oid_mapping.yaml: Short names for cert extension OIDs
device.conf: Network hardware access
routes.yaml: Advanced plugin routing


Adding file server mount points
Checking the values of settings
Editing settings on the command line
Configuration Reference



Upgrading
Upgrade Puppet Server

Upgrade agents
Upgrade agents using the puppet_agent module
Upgrade *nix agents
Upgrade Windows agents
Upgrade macOS agents


Upgrade PuppetDB



Environments
About environments
Creating environments
Environment isolation



Directories and files
Code and data directory (codedir)
Config directory (confdir)
Main manifest directory
The modulepath
SSL directory (ssldir)
Cache directory (vardir)


Report reference



Platform components

Puppet Server
About Puppet Server
Deprecated features
Server and agent compatibility
Installing Puppet Server

Configuring Puppet Server
Configuring Puppet Server

Puppet Server configuration files
auth.conf
ca.conf
global.conf
logback.xml
metrics.conf
product.conf
puppetserver.conf
web-routes.conf
webserver.conf


Migrating to the HOCON auth.conf format
Advanced logging configuration
Differing behavior in puppet.conf



Using and extending Puppet Server
Subcommands
Using Ruby gems
Intermediate CA
Infrastructure certificate revocation list (CRL)
External SSL termination

Server metrics
Monitoring Puppet Server metrics
HTTP Client Metrics


Tuning guide
Applying metrics to improve performance
Submitting usage telemetry
Scaling Puppet Server
Restarting Puppet Server"



Developer information
Developer debugging
Running from source
Tracing code events



Puppet Server HTTP API
Puppet Server HTTP API overview
PSON

Puppet v3 API
Catalog
Node
Facts
File Bucket File
File Content
File Metadata
Report



Puppet v4 APICatalog API


CA v1 API
Certificate
Certificate Request
Certificate Status
Certificate Revocation List
Expirations
Certificate Clean


Schemas (JSON)



API endpoints

Metrics API endpoints
v1 metrics
v2 (Jolokia) metrics



Status API endpoints
Services endpoint
Simple endpoint



Administrative API endpoints
Environment cache
JRuby pool



Server-specific Puppet API endpoints
Environment classes
Environment modules
Static file content





Certificate authority and SSL
Puppet Server CA commands
Intermediate CA
Autosigning certificate requests
CSR attributes and certificate extensions
Regenerating certificates in a Puppet deployment
External CA
External SSL termination





Facter  
Facter: CLI
Facter: Core Facts

Custom facts overviewEnvironment facts 

Writing custom facts
External facts
Configuring Facter with facter.conf


PuppetDB

Puppet services and tools
Puppet commands
Running Puppet commands on Windows  

primary Puppet serverAbout Puppet Server

Puppet agent on *nix systems
Puppet agent on Windows
Puppet apply
Puppet device



Puppet reports
Reporting
Report reference
Writing custom report processors
Report format



Life cycle of a Puppet run
Agent-server HTTPS communications
Catalog compilation
Static catalogs 





Using Puppet code
Classifying nodes
Managing environment content with a Puppetfile
Using content from Puppet Forge

Designing system configs (roles and profiles)
The roles and profiles method 
Roles and profiles example 
Designing advanced profiles 
Designing convenient roles 



Separating data (Hiera)
About Hiera  
Getting started with Hiera  
Configuring Hiera
Creating and editing data 
Looking up data with Hiera  
Writing new data backends 

Debugging Hiera
Unexpected values
Common errors


Upgrading to Hiera 5 



Use case examples
Manage NTP
Manage sudo 
Manage DNS
Manage firewall rules
Forge examples





Syntax and settings

The Puppet language
Puppet language overview
Puppet language syntax examples
The Puppet language style guide 
Files and paths on Windows  
Code comments 
Variables
Resources

Resource types
Resource Type Reference (Single-Page)
Built-in types
Optional resource types for Windows
Resource Type: exec
Using exec on Windows  
Resource Type: file
Using file on Windows
Resource Type: filebucket
Resource Type: group
Using user and group on Windows
Resource types overview
Resource Type: notify
Resource Type: package
Using package on Windows  
Resource Type: resources
Resource Type: schedule
Resource Type: service
Using service
Resource Type: stage
Resource Type: tidy
Resource Type: user


Relationships and ordering
Classes
Defined resource types
Bolt tasks
Expressions and operators
Conditional statements and expressions
Function calls
Built-in function reference
Node definitions

Facts and built-in variables
Accessing facts from Puppet code
Built-in variables


Reserved words and acceptable names

Custom resources

Develop types and providers with the Resource APIResource API reference


Low-level method for developing types and providers
Type development
Provider development
Creating resources





Custom functions
Custom functions overview 
Writing custom functions in the Puppet language

Writing custom functions in Ruby
Custom functions in Ruby overview
Ruby function signatures
Using special features in implementation methods
Iterative functions
Refactoring legacy 3.x functions



Deferring a function
Deferred functions overview
Using a template with Deferred values
Write a deferred function to store secrets
Integrations with secret stores





Values, data types, and aliases
Type aliases
Typecasting
Abstract data types
Arrays
Binary
Booleans
Data type syntax
Default
Error data type
Hashes
Numbers
Regular expressions
Resource and class references
Resource types
Sensitive
Strings
Time-related data types
Undef



Templates
Creating templates using Embedded Puppet
Creating templates using Embedded Ruby



Advanced constructs
Iteration and loops
Lambdas
Resource default statements
Resource collectors
Virtual resources
Exported resources
Tags
Run stages



Details of complex behaviors
Containment
Scope
Namespaces and autoloading


Securing sensitive data


Metaparameter reference
Configuration Reference
Built-in function reference

Puppet Man Pages

Core tools
Man Page: puppet agent
Man Page: puppet apply
Man Page: puppet module
Man Page: puppet resource
Man Page: puppet lookup



Occasionally useful
Man Page: puppet config
Man Page: puppet describe
Man Page: puppet device
Man Page: puppet doc
Man Page: puppet help
Man Page: puppet node
Man Page: puppet parser



Niche
Man Page: puppet catalog
Man Page: puppet facts
Man Page: puppet filebucket
Man Page: puppet report







Developing modules

Modules
Modules overview
Plug-ins in modules
Module cheat sheet
Installing and managing modules from the command line
Beginner's guide to writing modules
Module metadata
Documenting modules
Documenting modules with Puppet Strings  
Puppet Strings style guide

Publishing modulesUsing the Forge API

Contributing to Puppet modules


Puppet Development Kit (PDK)
Puppet VSCode extension

PowerShell DSC Resources
Converting DSC Resources
Distributing arbitrary DSC resources
Upgrading Puppet DSC modules 
Troubleshooting DSC Resources 


Ruby API for developing extensions


Modules overview

You'll keep nearly all of your Puppet code in modules. Each module manages a specific task
        in your infrastructure, such as installing and configuring a piece of software. Modules
        serve as the basic building blocks of Puppet and are reusable
        and shareable.
Modules contain Puppet classes, defined
            types, tasks, task plans, functions, resource types and providers, and plug-ins such as
            custom types or facts. Modules must be installed in the Puppet modulepath. Puppet
            loads all content from every module in the modulepath, making this code available for
            use.
You can download and install modules from the Puppet
Forge. The Forge contains
            thousands of modules written by Puppet developers and the
            open source community for a wide variety of use cases. Expect to write at least a few of
            your own modules to meet specific needs in your infrastructure.
If you're using Code Manager or r10k, you'll manage modules with a Puppetfile. For smaller, manually managed infrastructures
            or proof of concept projects, you can install and manage modules with the puppet module command. See
            the related topic about installing modules for details. 
The following video gives you an overview of modules:





Module structure

Modules have a specific directory structure that allows
            Puppet to find and load classes, defined types, facts,
        custom types and providers, functions, and tasks. 
Each module subdirectory has a specific function, and not all
            directories are required. Use the following directory structure:



data/

Contains data files specifying parameter defaults.

examples/

Contains examples showing how to declare the module's
                        classes and defined types.

init.pp: The
                        main class of the module.

example.pp:
                        Provide examples for major use cases.

facts.d/

Contains external facts, which are an alternative to Ruby-based custom facts. These are synced to
                        all agent nodes, so they can submit values for those facts to the primary
                            Puppet server. 

files/

Contains static files, which managed nodes can download.
                            

service.conf

This file's source => URL is
                                        puppet:///modules/my_module/service.conf. Its
                                    contents can also be accessed with the file function, such as
                                        content => file('my_module/service.conf').
                                



functions/

Contains custom functions written in the Puppet language.

lib/

Contains plug-ins, such as custom facts and custom resource types. These are
                        used by both the primary Puppet  server and
                        the Puppet agent, and they are synced to all
                        agent nodes in the environment on each Puppet
                        run.



facter/

Contains custom facts, written in Ruby.

puppet/

Contains custom functions, resource types,
                                    and resource providers:

puppet/functions/: Contains functions written in
                                        Ruby for the modern Puppet::Functions API.

puppet/parser/functions/: Contains functions
                                    written in Ruby for the legacy
                                        Puppet::Parser::Functions API.

puppet/provider/: Contains custom resource
                                    providers written in the Puppet
                                    language.

puppet/type/: Contains custom resource types
                                    written in the Puppet
                                    language.



locales/

Contains files relating to module localization into
                        languages other than English.

manifests/

Contains all of the manifests in the module.



init.pp

The init.pp class, if used, is the main
                                    class of the module. This class's name must match the module's
                                    name.

other_class.pp

Classes and defined types are named with the
                                    namespace of the module and the name of the class or defined
                                    type. For example, this class is named my_module::other_class.

implementation/

You can group related classes and defined
                                    types in subdirectories of the manifests/ directory. The name of
                                    this subdirectory is reflected in the names of the classes and
                                    types it contains. Classes and defined types are named with the
                                    namespace of the module, any subdirectories, and the name of the
                                    class or defined type.

implementation/my_defined_type.pp: This defined
                                    type is named my_module::implementation::my_defined_type.

implementation/class.pp: This defined type is
                                    named my_module::implementation::class.



plans/

Contains Puppet task
                        plans, which are sets of tasks that can be combined with other logic. Plans
                        are written in the Puppet language.

readmes/

The module's README localized into languages other than
                        English.

spec/

Contains spec tests for any plug-ins in the lib
                        directory.

tasks/

Contains Puppet tasks,
                        which can be written in any programming language that can be read by the
                        target node.

templates/

Contains templates, which the module's manifests can use
                        to generate content or variable values.



component.erb

A manifest can render this template with
                                        template('my_module/component.erb').

component.epp

A manifest can render this template with
                                        epp('my_module/component.epp').



types/

Contains resource type aliases.


Module names
Module names must match the expression: [a-z][a-z0-9_]*. In other words, they can
                contain only lowercase letters, numbers, and underscores, and begin with a lowercase
                letter. 
These restrictions are similar to those that apply
                to class names, with the added restriction that module names cannot contain the
                namespace separator (::), because modules cannot be nested. Certain module names are
                disallowed; see the list of reserved words and names.
Manifests
Manifests, contained in the module's manifests/ folder, each contain one class or defined
                type.
 The init.pp manifest is the main class of a module and,
                unlike other classes or defined types, it is referred to only by the name of the
                module itself. For example, the class in init.pp in the puppetlabs-motd module is the motd class. You cannot name a class
                    init. 
 All other classes or defined types names are composed of name
                segments, separated from each other by a namespace separator, ::



The module short name, followed by
                            the namespace separator.
Any manifests/ subdirectories that
                            the class or defined type is contained in, followed by a namespace
                            separato.
The manifest file name, without
                            the extension.


For example, each module class or defined type would have the
                following names based on their module name and location within the manifests/ directory:








Module name
Filepath to class or defined
                                    type
Class or defined type name





username-my_module


my_module/manifests/init.pp


my_module




username-my_module


my_module/manifests/other_class.pp


my_module::other_class




puppetlabs-apache


apache/manifests/security/rule_link.pp


apache::security::rule_link




puppetlabs-apache


apache/manifests/fastcgi/server.pp


apache::fastcgi::server 





Files in modules
You can serve files from a module's files/ directory to agent nodes.
 Download files to the agent by setting the file resource's source attribute to the puppet:/// URL for the
                file. Alternately, you can access module files with the file function.
To
                download the file with a URL, use the following format for the puppet:///
                URL:puppet:///<MODULE_DIRECTORY>/<MODULE_NAME>/<FILE_NAME>For
                example, given a file located in my_module/files/service.conf, the URL is: 

puppet:///modules/my_module/service.confTo
                access files with the file function, pass the reference <MODULE NAME>/<FILE NAME> to
                the function, which returns the content of the requested file from the module's
                    files/
                directory. Puppet URLs work for both puppet agent and puppet apply; in either case they
                retrieve the file from a module.
To learn more about the
                    file function,
                see the function reference.
Templates in
                modules
You can use ERB or EPP templates in your module
                to manage the content of configuration files. Templates combine code, data, and
                literal text to produce a string output, which can be used as the content attribute
                of a file resource
                or as a variable value. Templates are contained in the module's templates/ directory.
 For ERB templates, which use Ruby, use the template
                function. For EPP templates, which use the Puppet
                language, use the epp function. See the page about templates for
                detailed information.
 The template and epp functions look up templates identified
                by module and template name, passed as a string in parentheses: function('module_name/template_name.extension'). For example:template('my_module/component.erb')
epp('my_module/component.epp')



Writing modules

Every Puppet user can
        expect to write at least some of their own modules. You must give your modules a specific
        directory structure and include correctly formatted metadata. Puppet Development Kit (PDK) provides tools for writing, validating,
        and testing modules. 

PDK creates a complete module structure, class, defined
            type, and task templates, and configures a module testing framework. To test your
            modules, use PDK commands to run unit tests and to
            validate your module's metadata, syntax, and style. You can download and install PDK on any development machine; no Puppet installation is required. See the PDK
documentation to get started.
For help getting started writing modules, see our beginner's guide to
            writing modules. For details on best practices and code style, see the Puppet Language style guide. 


Related information
Beginner's guide to writing modules
Documenting modules
The Puppet language style guide

 




          Was this page helpful?
        
Yes
No







              Don’t fill this out if you’re human: 






Thank you for your feedback!

            Feel free to add a comment or suggestion.
            





Send
Please enter your feedback





              Don’t fill this out if you’re human: 







            We’re sorry to hear that! 
            Please tell us why so we can help.
          

            Enter your feedback and email. This form is sent to the Puppet docs team.
            We ask for your email as we might contact you regarding your feedback.
          

            If you need help with the product itself, visit Puppet Support
            or ask in Puppet Community on Slack.
          

            Feedback:
            






            Email Address:
            






            To learn about how Puppet uses your personal information,
            visit our privacy policy.
          


Send
Please enter your feedback and contact email

          If you leave us your email, we may contact you regarding your feedback.
          For more information on how Puppet uses your personal information, see
          our
          privacy policy.
        





            Don’t fill this out if you’re human: 








    See an issue? Please file a JIRA ticket in our
    [DOCUMENTATION]
      project.
  











Puppet by Perforce gives IT operations teams back their time and offers peace of mind with infrastructure automation that enables security and compliance.






Legal
Privacy Policy
Terms of Use
Security


©  Puppet, Inc., a Perforce company. All rights reserved.




Puppet and other identified trademarks are the property of Puppet, Inc., Perforce Software, Inc., or an affiliate. Such trademarks are claimed and/or registered in the U.S. and other countries and regions. All third-party trademarks are the property of their respective holders. References to third-party trademarks do not imply endorsement or sponsorship of any products or services by the trademark holder. Contact Puppet, Inc., for further details.

