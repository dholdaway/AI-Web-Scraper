Title: Man Page: puppet lookup
URL: https://www.puppet.com/docs/puppet/7/man/lookup

Puppet.com
Forge
Education


                                    Try Puppet
                                


































        Docs
        






Products
Puppet Enterprise
Open Source Puppet
Bolt
Security Compliance Management
Continuous Delivery
Puppet Development Kit
Puppet DB
Puppet Plugin for VMware



        Support
        






Get
Technical Support Plans
Support Lifecycle Policy
New Puppet Enterprise Customer?



        Community
        






About Puppet
Company
Developer Experience
Community
Puppet Champions
Puppet Test Pilots
Community Calendar
Slack Channel







 









































PRODUCT AND VERSION


      Current product
      










      Current version
      








Puppet  7.34.0

Release notes

Puppet release notes
Puppet  7.34.0Security


Puppet known issues
Puppet Server release notes
Puppet Server known Issues
PuppetDB release notes (link)

Facter release notes
Facter 4.10.0
Facter 4.9.0
Facter 4.8.0
Facter 4.7.1
Facter 4.7.0
Facter 4.6.1
Facter 4.6.0
Facter 4.5.2


Facter known issues
What's new since Puppet 6?
Upgrading from Puppet 6 to Puppet 7

Experimental featuresMsgpack support

Archived documentation



Puppet overview
What is Puppet?
Why use Puppet desired state management?
Key concepts behind Puppet
The Puppet platform 
Puppet platform lifecycle 
Open source Puppet vs Puppet Enterprise (PE)
The Puppet ecosystem
Use cases
Glossary
Navigating the documentation



Set up Puppet

Install Puppet
System requirements
Installing Puppet  
Installing and configuring agents
Manually verify packages
Managing Platform versions



Configure Puppet settings
Puppet settings
Key configuration settings

Puppet's configuration files
puppet.conf: The main config file
environment.conf: Per-environment settings
fileserver.conf: Custom fileserver mount points
puppetdb.conf: PuppetDB server locations
autosign.conf: Basic certificate autosigning 
csr_attributes.yaml: Certificate extensions 
custom_trusted_oid_mapping.yaml: Short names for cert extension OIDs
device.conf: Network hardware access
routes.yaml: Advanced plugin routing


Adding file server mount points
Checking the values of settings
Editing settings on the command line
Configuration Reference



Upgrading
Upgrade Puppet Server

Upgrade agents
Upgrade agents using the puppet_agent module
Upgrade *nix agents
Upgrade Windows agents
Upgrade macOS agents


Upgrade PuppetDB



Environments
About environments
Creating environments
Environment isolation



Directories and files
Code and data directory (codedir)
Config directory (confdir)
Main manifest directory
The modulepath
SSL directory (ssldir)
Cache directory (vardir)


Report reference



Platform components

Puppet Server
About Puppet Server
Deprecated features
Server and agent compatibility
Installing Puppet Server

Configuring Puppet Server
Configuring Puppet Server

Puppet Server configuration files
auth.conf
ca.conf
global.conf
logback.xml
metrics.conf
product.conf
puppetserver.conf
web-routes.conf
webserver.conf


Migrating to the HOCON auth.conf format
Advanced logging configuration
Differing behavior in puppet.conf



Using and extending Puppet Server
Subcommands
Using Ruby gems
Intermediate CA
Infrastructure certificate revocation list (CRL)
External SSL termination

Server metrics
Monitoring Puppet Server metrics
HTTP Client Metrics


Tuning guide
Applying metrics to improve performance
Submitting usage telemetry
Scaling Puppet Server
Restarting Puppet Server"



Developer information
Developer debugging
Running from source
Tracing code events



Puppet Server HTTP API
Puppet Server HTTP API overview
PSON

Puppet v3 API
Catalog
Node
Facts
File Bucket File
File Content
File Metadata
Report



Puppet v4 APICatalog API


CA v1 API
Certificate
Certificate Request
Certificate Status
Certificate Revocation List
Expirations
Certificate Clean


Schemas (JSON)



API endpoints

Metrics API endpoints
v1 metrics
v2 (Jolokia) metrics



Status API endpoints
Services endpoint
Simple endpoint



Administrative API endpoints
Environment cache
JRuby pool



Server-specific Puppet API endpoints
Environment classes
Environment modules
Static file content





Certificate authority and SSL
Puppet Server CA commands
Intermediate CA
Autosigning certificate requests
CSR attributes and certificate extensions
Regenerating certificates in a Puppet deployment
External CA
External SSL termination





Facter  
Facter: CLI
Facter: Core Facts

Custom facts overviewEnvironment facts 

Writing custom facts
External facts
Configuring Facter with facter.conf


PuppetDB

Puppet services and tools
Puppet commands
Running Puppet commands on Windows  

primary Puppet serverAbout Puppet Server

Puppet agent on *nix systems
Puppet agent on Windows
Puppet apply
Puppet device



Puppet reports
Reporting
Report reference
Writing custom report processors
Report format



Life cycle of a Puppet run
Agent-server HTTPS communications
Catalog compilation
Static catalogs 





Using Puppet code
Classifying nodes
Managing environment content with a Puppetfile
Using content from Puppet Forge

Designing system configs (roles and profiles)
The roles and profiles method 
Roles and profiles example 
Designing advanced profiles 
Designing convenient roles 



Separating data (Hiera)
About Hiera  
Getting started with Hiera  
Configuring Hiera
Creating and editing data 
Looking up data with Hiera  
Writing new data backends 

Debugging Hiera
Unexpected values
Common errors


Upgrading to Hiera 5 



Use case examples
Manage NTP
Manage sudo 
Manage DNS
Manage firewall rules
Forge examples





Syntax and settings

The Puppet language
Puppet language overview
Puppet language syntax examples
The Puppet language style guide 
Files and paths on Windows  
Code comments 
Variables
Resources

Resource types
Resource Type Reference (Single-Page)
Built-in types
Optional resource types for Windows
Resource Type: exec
Using exec on Windows  
Resource Type: file
Using file on Windows
Resource Type: filebucket
Resource Type: group
Using user and group on Windows
Resource types overview
Resource Type: notify
Resource Type: package
Using package on Windows  
Resource Type: resources
Resource Type: schedule
Resource Type: service
Using service
Resource Type: stage
Resource Type: tidy
Resource Type: user


Relationships and ordering
Classes
Defined resource types
Bolt tasks
Expressions and operators
Conditional statements and expressions
Function calls
Built-in function reference
Node definitions

Facts and built-in variables
Accessing facts from Puppet code
Built-in variables


Reserved words and acceptable names

Custom resources

Develop types and providers with the Resource APIResource API reference


Low-level method for developing types and providers
Type development
Provider development
Creating resources





Custom functions
Custom functions overview 
Writing custom functions in the Puppet language

Writing custom functions in Ruby
Custom functions in Ruby overview
Ruby function signatures
Using special features in implementation methods
Iterative functions
Refactoring legacy 3.x functions



Deferring a function
Deferred functions overview
Using a template with Deferred values
Write a deferred function to store secrets
Integrations with secret stores





Values, data types, and aliases
Type aliases
Typecasting
Abstract data types
Arrays
Binary
Booleans
Data type syntax
Default
Error data type
Hashes
Numbers
Regular expressions
Resource and class references
Resource types
Sensitive
Strings
Time-related data types
Undef



Templates
Creating templates using Embedded Puppet
Creating templates using Embedded Ruby



Advanced constructs
Iteration and loops
Lambdas
Resource default statements
Resource collectors
Virtual resources
Exported resources
Tags
Run stages



Details of complex behaviors
Containment
Scope
Namespaces and autoloading


Securing sensitive data


Metaparameter reference
Configuration Reference
Built-in function reference

Puppet Man Pages

Core tools
Man Page: puppet agent
Man Page: puppet apply
Man Page: puppet module
Man Page: puppet resource
Man Page: puppet lookup



Occasionally useful
Man Page: puppet config
Man Page: puppet describe
Man Page: puppet device
Man Page: puppet doc
Man Page: puppet help
Man Page: puppet node
Man Page: puppet parser



Niche
Man Page: puppet catalog
Man Page: puppet facts
Man Page: puppet filebucket
Man Page: puppet report







Developing modules

Modules
Modules overview
Plug-ins in modules
Module cheat sheet
Installing and managing modules from the command line
Beginner's guide to writing modules
Module metadata
Documenting modules
Documenting modules with Puppet Strings  
Puppet Strings style guide

Publishing modulesUsing the Forge API

Contributing to Puppet modules


Puppet Development Kit (PDK)
Puppet VSCode extension

PowerShell DSC Resources
Converting DSC Resources
Distributing arbitrary DSC resources
Upgrading Puppet DSC modules 
Troubleshooting DSC Resources 


Ruby API for developing extensions

Man Page: puppet lookup
NOTE: This page was generated from the Puppet source code on 2022-02-07 10:05:18 -0800
NAME
puppet-lookup - Interactive Hiera lookupSYNOPSIS

Does Hiera lookups from the command line.
Since this command needs access to your Hiera data, make sure to run it
on a node that has a copy of that data. This usually means logging into
a Puppet Server node and running 'puppet lookup' with sudo.
The most common version of this command is:
'puppet lookup KEY --node NAME --environment ENV --explain'
USAGE
puppet lookup [--help] [--type TYPESTRING] [--merge
first|unique|hash|deep] [--knock-out-prefix PREFIX-STRING]
[--sort-merged-arrays] [--merge-hash-arrays] [--explain]
[--environment ENV] [--default VALUE] [--node NODE-NAME]
[--facts FILE] [--compile] [--render-as
s|json|yaml|binary|msgpack] keysDESCRIPTION

The lookup command is a CLI for Puppet's 'lookup()' function. It
searches your Hiera data and returns a value for the requested lookup
key, so you can test and explore your data. It is a modern replacement
for the 'hiera' command. Lookup uses the setting for global hiera.yaml
from puppet's config, and the environment to find the environment level
hiera.yaml as well as the resulting modulepath for the environment (for
hiera.yaml files in modules). Hiera usually relies on a node's facts to
locate the relevant data sources. By default, 'puppet lookup' uses
facts from the node you run the command on, but you can get data for any
other node with the '--node NAME' option. If possible, the lookup
command will use the requested node's real stored facts from PuppetDB;
if PuppetDB isn't configured or you want to provide arbitrary fact
values, you can pass alternate facts as a JSON or YAML file with
'--facts FILE'.
If you're debugging your Hiera data and want to see where values are
coming from, use the '--explain' option.
If '--explain' isn't specified, lookup exits with 0 if a value was
found and 1 otherwise. With '--explain', lookup always exits with 0
unless there is a major error.
You can provide multiple lookup keys to this command, but it only
returns a value for the first found key, omitting the rest.
For more details about how Hiera works, see the Hiera documentation:
https://puppet.com/docs/puppet/latest/hiera_intro.html
OPTIONS

--help: Print this help message.
--explain Explain the details of how the lookup was performed and
where the final value came from (or the reason no value was found).
--node NODE-NAME Specify which node to look up data for; defaults
to the node where the command is run. Since Hiera's purpose is to
provide different values for different nodes (usually based on their
facts), you'll usually want to use some specific node's facts to
explore your data. If the node where you're running this command is
configured to talk to PuppetDB, the command will use the requested
node's most recent facts. Otherwise, you can override facts with
the '--facts' option.
--facts FILE Specify a .json or .yaml file of key => value
mappings to override the facts for this lookup. Any facts not
specified in this file maintain their original value.
--environment ENV Like with most Puppet commands, you can specify
an environment on the command line. This is important for lookup
because different environments can have different Hiera data. This
environment will be always be the one used regardless of any other
factors.
--merge first|unique|hash|deep: Specify the merge behavior,
overriding any merge behavior from the data's lookup_options.
'first' returns the first value found. 'unique' appends
everything to a merged, deduplicated array. 'hash' performs a
simple hash merge by overwriting keys of lower lookup priority.
'deep' performs a deep merge on values of Array and Hash type.
There are additional options that can be used with 'deep'.
--knock-out-prefix PREFIX-STRING Can be used with the 'deep'
merge strategy. Specifies a prefix to indicate a value should be
removed from the final result.
--sort-merged-arrays Can be used with the 'deep' merge strategy.
When this flag is used, all merged arrays are sorted.
--merge-hash-arrays Can be used with the 'deep' merge strategy.
When this flag is used, hashes WITHIN arrays are deep-merged with
their counterparts by position.
--explain-options Explain whether a lookup_options hash affects
this lookup, and how that hash was assembled. (lookup_options is how
Hiera configures merge behavior in data.)
--default VALUE A value to return if Hiera can't find a value in
data. For emulating calls to the 'lookup()' function that include
a default.
--type TYPESTRING: Assert that the value has the specified type.
For emulating calls to the 'lookup()' function that include a data
type.
--compile Perform a full catalog compilation prior to the lookup.
If your hierarchy and data only use the $facts, $trusted, and
$server_facts variables, you don't need this option; however, if
your Hiera configuration uses arbitrary variables set by a Puppet
manifest, you might need this option to get accurate data. No
catalog compilation takes place unless this flag is given.
--render-as s|json|yaml|binary|msgpack Specify the output
format of the results; "s" means plain text. The default when
producing a value is yaml and the default when producing an
explanation is s.
EXAMPLE

To look up 'key_name' using the Puppet Server node's facts: $ puppet
lookup key_name
To look up 'key_name' using the Puppet Server node's arbitrary
variables from a manifest, and classify the node if applicable: $
puppet lookup key_name --compile
To look up 'key_name' using the Puppet Server node's facts,
overridden by facts given in a file: $ puppet lookup key_name --facts
fact_file.yaml
To look up 'key_name' with agent.local's facts: $ puppet lookup
--node agent.local key_name
To get the first value found for 'key_name_one' and 'key_name_two'
with agent.local's facts while merging values and knocking out the
prefix 'foo' while merging: $ puppet lookup --node agent.local
--merge deep --knock-out-prefix foo key_name_one key_name_two
To lookup 'key_name' with agent.local's facts, and return a default
value of 'bar' if nothing was found: $ puppet lookup --node
agent.local --default bar key_name
To see an explanation of how the value for 'key_name' would be found,
using agent.local's facts: $ puppet lookup --node agent.local
--explain key_name
COPYRIGHT
Copyright (c) 2015 Puppet Inc., LLC Licensed under the Apache 2.0
License 




          Was this page helpful?
        
Yes
No







              Don’t fill this out if you’re human: 






Thank you for your feedback!

            Feel free to add a comment or suggestion.
            





Send
Please enter your feedback





              Don’t fill this out if you’re human: 







            We’re sorry to hear that! 
            Please tell us why so we can help.
          

            Enter your feedback and email. This form is sent to the Puppet docs team.
            We ask for your email as we might contact you regarding your feedback.
          

            If you need help with the product itself, visit Puppet Support
            or ask in Puppet Community on Slack.
          

            Feedback:
            






            Email Address:
            






            To learn about how Puppet uses your personal information,
            visit our privacy policy.
          


Send
Please enter your feedback and contact email

          If you leave us your email, we may contact you regarding your feedback.
          For more information on how Puppet uses your personal information, see
          our
          privacy policy.
        





            Don’t fill this out if you’re human: 








    See an issue? Please file a JIRA ticket in our
    [DOCUMENTATION]
      project.
  











Puppet by Perforce gives IT operations teams back their time and offers peace of mind with infrastructure automation that enables security and compliance.






Legal
Privacy Policy
Terms of Use
Security


©  Puppet, Inc., a Perforce company. All rights reserved.




Puppet and other identified trademarks are the property of Puppet, Inc., Perforce Software, Inc., or an affiliate. Such trademarks are claimed and/or registered in the U.S. and other countries and regions. All third-party trademarks are the property of their respective holders. References to third-party trademarks do not imply endorsement or sponsorship of any products or services by the trademark holder. Contact Puppet, Inc., for further details.

