Title: Resource Type: service
URL: https://www.puppet.com/docs/puppet/7/types/service

Puppet.com
Forge
Education


                                    Try Puppet
                                


































        Docs
        






Products
Puppet Enterprise
Open Source Puppet
Bolt
Security Compliance Management
Continuous Delivery
Puppet Development Kit
Puppet DB
Puppet Plugin for VMware



        Support
        






Get
Technical Support Plans
Support Lifecycle Policy
New Puppet Enterprise Customer?



        Community
        






About Puppet
Company
Developer Experience
Community
Puppet Champions
Puppet Test Pilots
Community Calendar
Slack Channel







 









































PRODUCT AND VERSION


      Current product
      










      Current version
      








Puppet  7.34.0

Release notes

Puppet release notes
Puppet  7.34.0Security


Puppet known issues
Puppet Server release notes
Puppet Server known Issues
PuppetDB release notes (link)

Facter release notes
Facter 4.10.0
Facter 4.9.0
Facter 4.8.0
Facter 4.7.1
Facter 4.7.0
Facter 4.6.1
Facter 4.6.0
Facter 4.5.2


Facter known issues
What's new since Puppet 6?
Upgrading from Puppet 6 to Puppet 7

Experimental featuresMsgpack support

Archived documentation



Puppet overview
What is Puppet?
Why use Puppet desired state management?
Key concepts behind Puppet
The Puppet platform 
Puppet platform lifecycle 
Open source Puppet vs Puppet Enterprise (PE)
The Puppet ecosystem
Use cases
Glossary
Navigating the documentation



Set up Puppet

Install Puppet
System requirements
Installing Puppet  
Installing and configuring agents
Manually verify packages
Managing Platform versions



Configure Puppet settings
Puppet settings
Key configuration settings

Puppet's configuration files
puppet.conf: The main config file
environment.conf: Per-environment settings
fileserver.conf: Custom fileserver mount points
puppetdb.conf: PuppetDB server locations
autosign.conf: Basic certificate autosigning 
csr_attributes.yaml: Certificate extensions 
custom_trusted_oid_mapping.yaml: Short names for cert extension OIDs
device.conf: Network hardware access
routes.yaml: Advanced plugin routing


Adding file server mount points
Checking the values of settings
Editing settings on the command line
Configuration Reference



Upgrading
Upgrade Puppet Server

Upgrade agents
Upgrade agents using the puppet_agent module
Upgrade *nix agents
Upgrade Windows agents
Upgrade macOS agents


Upgrade PuppetDB



Environments
About environments
Creating environments
Environment isolation



Directories and files
Code and data directory (codedir)
Config directory (confdir)
Main manifest directory
The modulepath
SSL directory (ssldir)
Cache directory (vardir)


Report reference



Platform components

Puppet Server
About Puppet Server
Deprecated features
Server and agent compatibility
Installing Puppet Server

Configuring Puppet Server
Configuring Puppet Server

Puppet Server configuration files
auth.conf
ca.conf
global.conf
logback.xml
metrics.conf
product.conf
puppetserver.conf
web-routes.conf
webserver.conf


Migrating to the HOCON auth.conf format
Advanced logging configuration
Differing behavior in puppet.conf



Using and extending Puppet Server
Subcommands
Using Ruby gems
Intermediate CA
Infrastructure certificate revocation list (CRL)
External SSL termination

Server metrics
Monitoring Puppet Server metrics
HTTP Client Metrics


Tuning guide
Applying metrics to improve performance
Submitting usage telemetry
Scaling Puppet Server
Restarting Puppet Server"



Developer information
Developer debugging
Running from source
Tracing code events



Puppet Server HTTP API
Puppet Server HTTP API overview
PSON

Puppet v3 API
Catalog
Node
Facts
File Bucket File
File Content
File Metadata
Report



Puppet v4 APICatalog API


CA v1 API
Certificate
Certificate Request
Certificate Status
Certificate Revocation List
Expirations
Certificate Clean


Schemas (JSON)



API endpoints

Metrics API endpoints
v1 metrics
v2 (Jolokia) metrics



Status API endpoints
Services endpoint
Simple endpoint



Administrative API endpoints
Environment cache
JRuby pool



Server-specific Puppet API endpoints
Environment classes
Environment modules
Static file content





Certificate authority and SSL
Puppet Server CA commands
Intermediate CA
Autosigning certificate requests
CSR attributes and certificate extensions
Regenerating certificates in a Puppet deployment
External CA
External SSL termination





Facter  
Facter: CLI
Facter: Core Facts

Custom facts overviewEnvironment facts 

Writing custom facts
External facts
Configuring Facter with facter.conf


PuppetDB

Puppet services and tools
Puppet commands
Running Puppet commands on Windows  

primary Puppet serverAbout Puppet Server

Puppet agent on *nix systems
Puppet agent on Windows
Puppet apply
Puppet device



Puppet reports
Reporting
Report reference
Writing custom report processors
Report format



Life cycle of a Puppet run
Agent-server HTTPS communications
Catalog compilation
Static catalogs 





Using Puppet code
Classifying nodes
Managing environment content with a Puppetfile
Using content from Puppet Forge

Designing system configs (roles and profiles)
The roles and profiles method 
Roles and profiles example 
Designing advanced profiles 
Designing convenient roles 



Separating data (Hiera)
About Hiera  
Getting started with Hiera  
Configuring Hiera
Creating and editing data 
Looking up data with Hiera  
Writing new data backends 

Debugging Hiera
Unexpected values
Common errors


Upgrading to Hiera 5 



Use case examples
Manage NTP
Manage sudo 
Manage DNS
Manage firewall rules
Forge examples





Syntax and settings

The Puppet language
Puppet language overview
Puppet language syntax examples
The Puppet language style guide 
Files and paths on Windows  
Code comments 
Variables
Resources

Resource types
Resource Type Reference (Single-Page)
Built-in types
Optional resource types for Windows
Resource Type: exec
Using exec on Windows  
Resource Type: file
Using file on Windows
Resource Type: filebucket
Resource Type: group
Using user and group on Windows
Resource types overview
Resource Type: notify
Resource Type: package
Using package on Windows  
Resource Type: resources
Resource Type: schedule
Resource Type: service
Using service
Resource Type: stage
Resource Type: tidy
Resource Type: user


Relationships and ordering
Classes
Defined resource types
Bolt tasks
Expressions and operators
Conditional statements and expressions
Function calls
Built-in function reference
Node definitions

Facts and built-in variables
Accessing facts from Puppet code
Built-in variables


Reserved words and acceptable names

Custom resources

Develop types and providers with the Resource APIResource API reference


Low-level method for developing types and providers
Type development
Provider development
Creating resources





Custom functions
Custom functions overview 
Writing custom functions in the Puppet language

Writing custom functions in Ruby
Custom functions in Ruby overview
Ruby function signatures
Using special features in implementation methods
Iterative functions
Refactoring legacy 3.x functions



Deferring a function
Deferred functions overview
Using a template with Deferred values
Write a deferred function to store secrets
Integrations with secret stores





Values, data types, and aliases
Type aliases
Typecasting
Abstract data types
Arrays
Binary
Booleans
Data type syntax
Default
Error data type
Hashes
Numbers
Regular expressions
Resource and class references
Resource types
Sensitive
Strings
Time-related data types
Undef



Templates
Creating templates using Embedded Puppet
Creating templates using Embedded Ruby



Advanced constructs
Iteration and loops
Lambdas
Resource default statements
Resource collectors
Virtual resources
Exported resources
Tags
Run stages



Details of complex behaviors
Containment
Scope
Namespaces and autoloading


Securing sensitive data


Metaparameter reference
Configuration Reference
Built-in function reference

Puppet Man Pages

Core tools
Man Page: puppet agent
Man Page: puppet apply
Man Page: puppet module
Man Page: puppet resource
Man Page: puppet lookup



Occasionally useful
Man Page: puppet config
Man Page: puppet describe
Man Page: puppet device
Man Page: puppet doc
Man Page: puppet help
Man Page: puppet node
Man Page: puppet parser



Niche
Man Page: puppet catalog
Man Page: puppet facts
Man Page: puppet filebucket
Man Page: puppet report







Developing modules

Modules
Modules overview
Plug-ins in modules
Module cheat sheet
Installing and managing modules from the command line
Beginner's guide to writing modules
Module metadata
Documenting modules
Documenting modules with Puppet Strings  
Puppet Strings style guide

Publishing modulesUsing the Forge API

Contributing to Puppet modules


Puppet Development Kit (PDK)
Puppet VSCode extension

PowerShell DSC Resources
Converting DSC Resources
Distributing arbitrary DSC resources
Upgrading Puppet DSC modules 
Troubleshooting DSC Resources 


Ruby API for developing extensions

Resource Type: service
NOTE: This page was generated from the Puppet source code on 2022-02-07 10:05:45 -0800
service

Attributes
Providers
Provider Features

Description 

Manage running services.  Service support unfortunately varies
widely by platform --- some platforms have very little if any concept of a
running service, and some have a very codified and powerful concept.
Puppet's service support is usually capable of doing the right thing, but
the more information you can provide, the better behaviour you will get.
Puppet 2.7 and newer expect init scripts to have a working status command.
If this isn't the case for any of your services' init scripts, you will
need to set hasstatus to false and possibly specify a custom status
command in the status attribute. As a last resort, Puppet will attempt to
search the process table by calling whatever command is listed in the ps
fact. The default search pattern is the name of the service, but you can
specify it with the pattern attribute.
Refresh: service resources can respond to refresh events (via
notify, subscribe, or the ~> arrow). If a service receives an
event from another resource, Puppet will restart the service it manages.
The actual command used to restart the service depends on the platform and
can be configured:

If you set hasrestart to true, Puppet will use the init script's restart command.
You can provide an explicit command for restarting with the restart attribute.
If you do neither, the service's stop and start commands will be used.

Attributes 
service { 'resource title':
  name          => # (namevar) The name of the service to run.  This name is...
  ensure        => # Whether a service should be running. Default...
  binary        => # The path to the daemon.  This is only used for...
  control       => # The control variable used to manage services...
  enable        => # Whether a service should be enabled to start at...
  flags         => # Specify a string of flags to pass to the startup 
  hasrestart    => # Specify that an init script has a `restart...
  hasstatus     => # Declare whether the service's init script has a...
  logonaccount  => # Specify an account for service...
  logonpassword => # Specify a password for service logon. Default...
  manifest      => # Specify a command to config a service, or a path 
  path          => # The search path for finding init scripts....
  pattern       => # The pattern to search for in the process table...
  provider      => # The specific backend to use for this `service...
  restart       => # Specify a *restart* command manually.  If left...
  start         => # Specify a *start* command manually.  Most...
  status        => # Specify a *status* command manually.  This...
  stop          => # Specify a *stop* command...
  timeout       => # Specify an optional minimum timeout (in seconds) 
  # ...plus any applicable metaparameters.
}
name 

(Namevar: If omitted, this attribute's value defaults to the resource's title.)
The name of the service to run.
This name is used to find the service; on platforms where services
have short system names and long display names, this should be the
short name. (To take an example from Windows, you would use "wuauserv"
rather than "Automatic Updates.")
(↑ Back to service attributes)
ensure 

(Property: This attribute represents concrete state on the target system.)
Whether a service should be running. Default values depend on the platform.
Allowed values:

stopped
running
false
true

(↑ Back to service attributes)
binary 

The path to the daemon.  This is only used for
systems that do not support init scripts.  This binary will be
used to start the service if no start parameter is
provided.
(↑ Back to service attributes)
control 

The control variable used to manage services (originally for HP-UX).
Defaults to the upcased service name plus START replacing dots with
underscores, for those providers that support the controllable feature.
(↑ Back to service attributes)
enable 

(Property: This attribute represents concrete state on the target system.)
Whether a service should be enabled to start at boot.
This property behaves differently depending on the platform;
wherever possible, it relies on local tools to enable or disable
a given service. Default values depend on the platform.
If you don't specify a value for the enable attribute, Puppet leaves
that aspect of the service alone and your operating system determines
the behavior.
Allowed values:

true
false
manual
mask
delayed

Requires features enableable.
(↑ Back to service attributes)
flags 

(Property: This attribute represents concrete state on the target system.)
Specify a string of flags to pass to the startup script.
Requires features flaggable.
(↑ Back to service attributes)
hasrestart 

Specify that an init script has a restart command.  If this is
false and you do not specify a command in the restart attribute,
the init script's stop and start commands will be used.
Allowed values:

true
false

(↑ Back to service attributes)
hasstatus 

Declare whether the service's init script has a functional status
command. This attribute's default value changed in Puppet 2.7.0.
The init script's status command must return 0 if the service is
running and a nonzero value otherwise. Ideally, these exit codes
should conform to the LSB's specification for init
script status actions, but Puppet only considers the difference
between 0 and nonzero to be relevant.
If a service's init script does not support any kind of status command,
you should set hasstatus to false and either provide a specific
command using the status attribute or expect that Puppet will look for
the service name in the process table. Be aware that 'virtual' init
scripts (like 'network' under Red Hat systems) will respond poorly to
refresh events from other resources if you override the default behavior
without providing a status command.
Default: true
Allowed values:

true
false

(↑ Back to service attributes)
logonaccount 

(Property: This attribute represents concrete state on the target system.)
Specify an account for service logon
Requires features manages_logon_credentials.
(↑ Back to service attributes)
logonpassword 

Specify a password for service logon. Default value is an empty string (when logonaccount is specified).
Requires features manages_logon_credentials.
(↑ Back to service attributes)
manifest 

Specify a command to config a service, or a path to a manifest to do so.
(↑ Back to service attributes)
path 

The search path for finding init scripts.  Multiple values should
be separated by colons or provided as an array.
(↑ Back to service attributes)
pattern 

The pattern to search for in the process table.
This is used for stopping services on platforms that do not
support init scripts, and is also used for determining service
status on those service whose init scripts do not include a status
command.
Defaults to the name of the service. The pattern can be a simple string
or any legal Ruby pattern, including regular expressions (which should
be quoted without enclosing slashes).
(↑ Back to service attributes)
provider 

The specific backend to use for this service resource. You will seldom need to specify this --- Puppet will usually discover the appropriate provider for your platform.
Available providers are:

base
bsd
daemontools
debian
freebsd
gentoo
init
launchd
openbsd
openrc
openwrt
rcng
redhat
runit
service
smf
src
systemd
upstart
windows

(↑ Back to service attributes)
restart 

Specify a restart command manually.  If left
unspecified, the service will be stopped and then started.
(↑ Back to service attributes)
start 

Specify a start command manually.  Most service subsystems
support a start command, so this will not need to be
specified.
(↑ Back to service attributes)
status 

Specify a status command manually.  This command must
return 0 if the service is running and a nonzero value otherwise.
Ideally, these exit codes should conform to the LSB's
specification for init script status actions, but
Puppet only considers the difference between 0 and nonzero to be
relevant.
If left unspecified, the status of the service will be determined
automatically, usually by looking for the service in the process
table.
(↑ Back to service attributes)
stop 

Specify a stop command manually.
(↑ Back to service attributes)
timeout 

Specify an optional minimum timeout (in seconds) for puppet to wait when syncing service properties
Requires features configurable_timeout.
(↑ Back to service attributes)
Providers 

base 

The simplest form of Unix service support.
You have to specify enough about your service for this to work; the
minimum you can specify is a binary for starting the process, and this
same binary will be searched for in the process table to stop the
service.  As with init-style services, it is preferable to specify start,
stop, and status commands.
Required binaries: kill
bsd 

Generic BSD form of init-style service management with rc.d.
Uses rc.conf.d for service enabling and disabling.
Confined to: operatingsystem == [:freebsd, :dragonfly]
daemontools 

Daemontools service management.
This provider manages daemons supervised by D.J. Bernstein daemontools.
When detecting the service directory it will check, in order of preference:

/service
/etc/service
/var/lib/svscan

The daemon directory should be in one of the following locations:

/var/lib/service
/etc

...or this can be overridden in the resource's attributes:
service { 'myservice':
  provider => 'daemontools',
  path     => '/path/to/daemons',
}
This provider supports out of the box:

start/stop (mapped to enable/disable)
enable/disable
restart
status

If a service has ensure => "running", it will link /path/to/daemon to
/path/to/service, which will automatically enable the service.
If a service has ensure => "stopped", it will only shut down the service, not
remove the /path/to/service link.
Required binaries: /usr/bin/svc, /usr/bin/svstat
debian 

Debian's form of init-style management.
The only differences from init are support for enabling and disabling
services via update-rc.d and the ability to determine enabled status via
invoke-rc.d.

Required binaries: /usr/sbin/update-rc.d, /usr/sbin/invoke-rc.d, /usr/sbin/service
Confined to: false == Puppet::FileSystem.exist?('/proc/1/comm') && Puppet::FileSystem.read('/proc/1/comm').include?('systemd')
Default for: ["operatingsystem", "cumuluslinux"] == ["operatingsystemmajrelease", "['1','2']"], ["operatingsystem", "debian"] == ["operatingsystemmajrelease", "['5','6','7']"], ["operatingsystem", "devuan"] == 

freebsd 

Provider for FreeBSD and DragonFly BSD. Uses the rcvar argument of init scripts and parses/edits rc files.

Confined to: operatingsystem == [:freebsd, :dragonfly]
Default for: ["operatingsystem", "[:freebsd, :dragonfly]"] == 

gentoo 

Gentoo's form of init-style service management.
Uses rc-update for service enabling and disabling.

Required binaries: /sbin/rc-update
Confined to: operatingsystem == gentoo

init 

Standard init-style service management.
Confined to: true == begin
os = Puppet.runtime[:facter].value(:operatingsystem).downcase
family = Puppet.runtime[:facter].value(:osfamily).downcase
!(os == 'debian' || os == 'ubuntu' || family == 'redhat')
end
launchd 

This provider manages jobs with launchd, which is the default service
framework for Mac OS X (and may be available for use on other platforms).
For more information, see the launchd man page:
https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man8/launchd.8.html
This provider reads plists out of the following directories:

/System/Library/LaunchDaemons
/System/Library/LaunchAgents
/Library/LaunchDaemons
/Library/LaunchAgents

...and builds up a list of services based upon each plist's "Label" entry.
This provider supports:

ensure => running/stopped,
enable => true/false
status
restart

Here is how the Puppet states correspond to launchd states:

stopped --- job unloaded
started --- job loaded
enabled --- 'Disable' removed from job plist file
disabled --- 'Disable' added to job plist file

Note that this allows you to do something launchctl can't do, which is to
be in a state of "stopped/enabled" or "running/disabled".
Note that this provider does not support overriding 'restart'

Required binaries: /bin/launchctl
Confined to: operatingsystem == darwin, feature == cfpropertylist
Default for: ["operatingsystem", "darwin"] == 
Supported features: enableable, refreshable

openbsd 

Provider for OpenBSD's rc.d daemon control scripts

Required binaries: /usr/sbin/rcctl
Confined to: operatingsystem == openbsd
Default for: ["operatingsystem", "openbsd"] == 
Supported features: flaggable

openrc 

Support for Gentoo's OpenRC initskripts
Uses rc-update, rc-status and rc-service to manage services.

Required binaries: /sbin/rc-service, /sbin/rc-update
Default for: ["operatingsystem", "gentoo"] == , ["operatingsystem", "funtoo"] == 

openwrt 

Support for OpenWrt flavored init scripts.
Uses /etc/init.d/service_name enable, disable, and enabled.

Confined to: operatingsystem == openwrt
Default for: ["operatingsystem", "openwrt"] == 
Supported features: enableable

rcng 

RCng service management with rc.d

Confined to: operatingsystem == [:netbsd, :cargos]
Default for: ["operatingsystem", "[:netbsd, :cargos]"] == 

redhat 

Red Hat's (and probably many others') form of init-style service
management. Uses chkconfig for service enabling and disabling.

Required binaries: /sbin/chkconfig, /sbin/service
Default for: ["osfamily", "redhat"] == , ["osfamily", "suse"] == ["operatingsystemmajrelease", "["10", "11"]"]

runit 

Runit service management.
This provider manages daemons running supervised by Runit.
When detecting the service directory it will check, in order of preference:

/service
/etc/service
/var/service

The daemon directory should be in one of the following locations:

/etc/sv
/var/lib/service

or this can be overridden in the service resource parameters:
service { 'myservice':
  provider => 'runit',
  path     => '/path/to/daemons',
}
This provider supports out of the box:

start/stop
enable/disable
restart
status
Required binaries: /usr/bin/sv

service 
The simplest form of service support.smf 

Support for Sun's new Service Management Framework.
When managing the enable property, this provider will try to preserve
the previous ensure state per the enableable semantics. On Solaris,
enabling a service starts it up while disabling a service stops it. Thus,
there's a chance for this provider to execute two operations when managing
the enable property. For example, if enable is set to true and the ensure
state is stopped, this provider will manage the service using two operations:
one to enable the service which will start it up, and another to stop the
service (without affecting its enabled status).
By specifying manifest => "/path/to/service.xml", the SMF manifest will
be imported if it does not exist.

Required binaries: /usr/sbin/svcadm, /usr/bin/svcs, /usr/sbin/svccfg
Confined to: osfamily == solaris
Default for: ["osfamily", "solaris"] == 
Supported features: refreshable

src 

Support for AIX's System Resource controller.
Services are started/stopped based on the stopsrc and startsrc
commands, and some services can be refreshed with refresh command.
Enabling and disabling services is not supported, as it requires
modifications to /etc/inittab. Starting and stopping groups of subsystems
is not yet supported.

Confined to: operatingsystem == aix
Default for: ["operatingsystem", "aix"] == 
Supported features: refreshable

systemd 

Manages systemd services using systemctl.
Because systemd defaults to assuming the .service unit type, the suffix
may be omitted.  Other unit types (such as .path) may be managed by
providing the proper suffix.

Required binaries: systemctl
Confined to: true == Puppet::FileSystem.exist?('/proc/1/comm') && Puppet::FileSystem.read('/proc/1/comm').include?('systemd')
Default for: ["osfamily", "[:archlinux]"] == , ["osfamily", "redhat"] == ["operatingsystemmajrelease", "["7", "8", "9"]"], ["osfamily", "redhat"] == ["operatingsystem", "fedora"], ["osfamily", "suse"] == , ["osfamily", "coreos"] == , ["operatingsystem", "amazon"] == ["operatingsystemmajrelease", "["2"]"], ["operatingsystem", "debian"] == , ["operatingsystem", "LinuxMint"] == , ["operatingsystem", "ubuntu"] == , ["operatingsystem", "cumuluslinux"] == ["operatingsystemmajrelease", "["3", "4"]"]

upstart 

Ubuntu service management with upstart.
This provider manages upstart jobs on Ubuntu. For upstart documentation,
see http://upstart.ubuntu.com/.

Required binaries: /sbin/start, /sbin/stop, /sbin/restart, /sbin/status, /sbin/initctl
Confined to: any == [
Puppet.runtime[:facter].value(:operatingsystem) == 'Ubuntu',
(Puppet.runtime[:facter].value(:osfamily) == 'RedHat' and Puppet.runtime[:facter].value(:operatingsystemrelease) =~ /^6./),
(Puppet.runtime[:facter].value(:operatingsystem) == 'Amazon' and Puppet.runtime[:facter].value(:operatingsystemmajrelease) =~ /\d{4}/),
Puppet.runtime[:facter].value(:operatingsystem) == 'LinuxMint',
], true == lambda { has_initctl? }
Default for: ["operatingsystem", "ubuntu"] == ["operatingsystemmajrelease", "["10.04", "12.04", "14.04", "14.10"]"], ["operatingsystem", "LinuxMint"] == ["operatingsystemmajrelease", "["10", "11", "12", "13", "14", "15", "16", "17"]"]
Supported features: enableable

windows 

Support for Windows Service Control Manager (SCM). This provider can
start, stop, enable, and disable services, and the SCM provides working
status methods for all services.
Control of service groups (dependencies) is not yet supported, nor is running
services as a specific user.

Confined to: operatingsystem == windows
Default for: ["operatingsystem", "windows"] == 
Supported features: refreshable, configurable_timeout, manages_logon_credentials

Provider Features 

Available features:

configurable_timeout --- The provider can specify a minumum timeout for syncing service properties
controllable --- The provider uses a control variable.
delayed_startable --- The provider can set service to delayed start
enableable --- The provider can enable and disable the service.
flaggable --- The provider can pass flags to the service.
manages_logon_credentials --- The provider can specify the logon credentials used for a service
manual_startable --- The provider can set service to manual start
maskable --- The provider can 'mask' the service.
refreshable --- The provider can restart the service.

Provider support:

base - No supported Provider features
bsd - No supported Provider features
daemontools - No supported Provider features
debian - No supported Provider features
freebsd - No supported Provider features
gentoo - No supported Provider features
init - No supported Provider features
launchd - enableable, refreshable
openbsd - flaggable
openrc - No supported Provider features
openwrt - enableable
rcng - No supported Provider features
redhat - No supported Provider features
runit - No supported Provider features
service - No supported Provider features
smf - refreshable
src - refreshable
systemd - No supported Provider features
upstart - enableable
windows - refreshable, configurable timeout, manages logon credentials

 




          Was this page helpful?
        
Yes
No







              Don’t fill this out if you’re human: 






Thank you for your feedback!

            Feel free to add a comment or suggestion.
            





Send
Please enter your feedback





              Don’t fill this out if you’re human: 







            We’re sorry to hear that! 
            Please tell us why so we can help.
          

            Enter your feedback and email. This form is sent to the Puppet docs team.
            We ask for your email as we might contact you regarding your feedback.
          

            If you need help with the product itself, visit Puppet Support
            or ask in Puppet Community on Slack.
          

            Feedback:
            






            Email Address:
            






            To learn about how Puppet uses your personal information,
            visit our privacy policy.
          


Send
Please enter your feedback and contact email

          If you leave us your email, we may contact you regarding your feedback.
          For more information on how Puppet uses your personal information, see
          our
          privacy policy.
        





            Don’t fill this out if you’re human: 








    See an issue? Please file a JIRA ticket in our
    [DOCUMENTATION]
      project.
  











Puppet by Perforce gives IT operations teams back their time and offers peace of mind with infrastructure automation that enables security and compliance.






Legal
Privacy Policy
Terms of Use
Security


©  Puppet, Inc., a Perforce company. All rights reserved.




Puppet and other identified trademarks are the property of Puppet, Inc., Perforce Software, Inc., or an affiliate. Such trademarks are claimed and/or registered in the U.S. and other countries and regions. All third-party trademarks are the property of their respective holders. References to third-party trademarks do not imply endorsement or sponsorship of any products or services by the trademark holder. Contact Puppet, Inc., for further details.

