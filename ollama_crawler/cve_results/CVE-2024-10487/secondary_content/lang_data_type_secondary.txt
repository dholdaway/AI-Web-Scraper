Title: Data type syntax
URL: https://www.puppet.com/docs/puppet/7/lang_data_type

Puppet.com
Forge
Education


                                    Try Puppet
                                


































        Docs
        






Products
Puppet Enterprise
Open Source Puppet
Bolt
Security Compliance Management
Continuous Delivery
Puppet Development Kit
Puppet DB
Puppet Plugin for VMware



        Support
        






Get
Technical Support Plans
Support Lifecycle Policy
New Puppet Enterprise Customer?



        Community
        






About Puppet
Company
Developer Experience
Community
Puppet Champions
Puppet Test Pilots
Community Calendar
Slack Channel







 









































PRODUCT AND VERSION


      Current product
      










      Current version
      








Puppet  7.34.0

Release notes

Puppet release notes
Puppet  7.34.0Security


Puppet known issues
Puppet Server release notes
Puppet Server known Issues
PuppetDB release notes (link)

Facter release notes
Facter 4.10.0
Facter 4.9.0
Facter 4.8.0
Facter 4.7.1
Facter 4.7.0
Facter 4.6.1
Facter 4.6.0
Facter 4.5.2


Facter known issues
What's new since Puppet 6?
Upgrading from Puppet 6 to Puppet 7

Experimental featuresMsgpack support

Archived documentation



Puppet overview
What is Puppet?
Why use Puppet desired state management?
Key concepts behind Puppet
The Puppet platform 
Puppet platform lifecycle 
Open source Puppet vs Puppet Enterprise (PE)
The Puppet ecosystem
Use cases
Glossary
Navigating the documentation



Set up Puppet

Install Puppet
System requirements
Installing Puppet  
Installing and configuring agents
Manually verify packages
Managing Platform versions



Configure Puppet settings
Puppet settings
Key configuration settings

Puppet's configuration files
puppet.conf: The main config file
environment.conf: Per-environment settings
fileserver.conf: Custom fileserver mount points
puppetdb.conf: PuppetDB server locations
autosign.conf: Basic certificate autosigning 
csr_attributes.yaml: Certificate extensions 
custom_trusted_oid_mapping.yaml: Short names for cert extension OIDs
device.conf: Network hardware access
routes.yaml: Advanced plugin routing


Adding file server mount points
Checking the values of settings
Editing settings on the command line
Configuration Reference



Upgrading
Upgrade Puppet Server

Upgrade agents
Upgrade agents using the puppet_agent module
Upgrade *nix agents
Upgrade Windows agents
Upgrade macOS agents


Upgrade PuppetDB



Environments
About environments
Creating environments
Environment isolation



Directories and files
Code and data directory (codedir)
Config directory (confdir)
Main manifest directory
The modulepath
SSL directory (ssldir)
Cache directory (vardir)


Report reference



Platform components

Puppet Server
About Puppet Server
Deprecated features
Server and agent compatibility
Installing Puppet Server

Configuring Puppet Server
Configuring Puppet Server

Puppet Server configuration files
auth.conf
ca.conf
global.conf
logback.xml
metrics.conf
product.conf
puppetserver.conf
web-routes.conf
webserver.conf


Migrating to the HOCON auth.conf format
Advanced logging configuration
Differing behavior in puppet.conf



Using and extending Puppet Server
Subcommands
Using Ruby gems
Intermediate CA
Infrastructure certificate revocation list (CRL)
External SSL termination

Server metrics
Monitoring Puppet Server metrics
HTTP Client Metrics


Tuning guide
Applying metrics to improve performance
Submitting usage telemetry
Scaling Puppet Server
Restarting Puppet Server"



Developer information
Developer debugging
Running from source
Tracing code events



Puppet Server HTTP API
Puppet Server HTTP API overview
PSON

Puppet v3 API
Catalog
Node
Facts
File Bucket File
File Content
File Metadata
Report



Puppet v4 APICatalog API


CA v1 API
Certificate
Certificate Request
Certificate Status
Certificate Revocation List
Expirations
Certificate Clean


Schemas (JSON)



API endpoints

Metrics API endpoints
v1 metrics
v2 (Jolokia) metrics



Status API endpoints
Services endpoint
Simple endpoint



Administrative API endpoints
Environment cache
JRuby pool



Server-specific Puppet API endpoints
Environment classes
Environment modules
Static file content





Certificate authority and SSL
Puppet Server CA commands
Intermediate CA
Autosigning certificate requests
CSR attributes and certificate extensions
Regenerating certificates in a Puppet deployment
External CA
External SSL termination





Facter  
Facter: CLI
Facter: Core Facts

Custom facts overviewEnvironment facts 

Writing custom facts
External facts
Configuring Facter with facter.conf


PuppetDB

Puppet services and tools
Puppet commands
Running Puppet commands on Windows  

primary Puppet serverAbout Puppet Server

Puppet agent on *nix systems
Puppet agent on Windows
Puppet apply
Puppet device



Puppet reports
Reporting
Report reference
Writing custom report processors
Report format



Life cycle of a Puppet run
Agent-server HTTPS communications
Catalog compilation
Static catalogs 





Using Puppet code
Classifying nodes
Managing environment content with a Puppetfile
Using content from Puppet Forge

Designing system configs (roles and profiles)
The roles and profiles method 
Roles and profiles example 
Designing advanced profiles 
Designing convenient roles 



Separating data (Hiera)
About Hiera  
Getting started with Hiera  
Configuring Hiera
Creating and editing data 
Looking up data with Hiera  
Writing new data backends 

Debugging Hiera
Unexpected values
Common errors


Upgrading to Hiera 5 



Use case examples
Manage NTP
Manage sudo 
Manage DNS
Manage firewall rules
Forge examples





Syntax and settings

The Puppet language
Puppet language overview
Puppet language syntax examples
The Puppet language style guide 
Files and paths on Windows  
Code comments 
Variables
Resources

Resource types
Resource Type Reference (Single-Page)
Built-in types
Optional resource types for Windows
Resource Type: exec
Using exec on Windows  
Resource Type: file
Using file on Windows
Resource Type: filebucket
Resource Type: group
Using user and group on Windows
Resource types overview
Resource Type: notify
Resource Type: package
Using package on Windows  
Resource Type: resources
Resource Type: schedule
Resource Type: service
Using service
Resource Type: stage
Resource Type: tidy
Resource Type: user


Relationships and ordering
Classes
Defined resource types
Bolt tasks
Expressions and operators
Conditional statements and expressions
Function calls
Built-in function reference
Node definitions

Facts and built-in variables
Accessing facts from Puppet code
Built-in variables


Reserved words and acceptable names

Custom resources

Develop types and providers with the Resource APIResource API reference


Low-level method for developing types and providers
Type development
Provider development
Creating resources





Custom functions
Custom functions overview 
Writing custom functions in the Puppet language

Writing custom functions in Ruby
Custom functions in Ruby overview
Ruby function signatures
Using special features in implementation methods
Iterative functions
Refactoring legacy 3.x functions



Deferring a function
Deferred functions overview
Using a template with Deferred values
Write a deferred function to store secrets
Integrations with secret stores





Values, data types, and aliases
Type aliases
Typecasting
Abstract data types
Arrays
Binary
Booleans
Data type syntax
Default
Error data type
Hashes
Numbers
Regular expressions
Resource and class references
Resource types
Sensitive
Strings
Time-related data types
Undef



Templates
Creating templates using Embedded Puppet
Creating templates using Embedded Ruby



Advanced constructs
Iteration and loops
Lambdas
Resource default statements
Resource collectors
Virtual resources
Exported resources
Tags
Run stages



Details of complex behaviors
Containment
Scope
Namespaces and autoloading


Securing sensitive data


Metaparameter reference
Configuration Reference
Built-in function reference

Puppet Man Pages

Core tools
Man Page: puppet agent
Man Page: puppet apply
Man Page: puppet module
Man Page: puppet resource
Man Page: puppet lookup



Occasionally useful
Man Page: puppet config
Man Page: puppet describe
Man Page: puppet device
Man Page: puppet doc
Man Page: puppet help
Man Page: puppet node
Man Page: puppet parser



Niche
Man Page: puppet catalog
Man Page: puppet facts
Man Page: puppet filebucket
Man Page: puppet report







Developing modules

Modules
Modules overview
Plug-ins in modules
Module cheat sheet
Installing and managing modules from the command line
Beginner's guide to writing modules
Module metadata
Documenting modules
Documenting modules with Puppet Strings  
Puppet Strings style guide

Publishing modulesUsing the Forge API

Contributing to Puppet modules


Puppet Development Kit (PDK)
Puppet VSCode extension

PowerShell DSC Resources
Converting DSC Resources
Distributing arbitrary DSC resources
Upgrading Puppet DSC modules 
Troubleshooting DSC Resources 


Ruby API for developing extensions


Data type syntax

Each value in the Puppet
        language has a data type, like “string.” There is also a set of values whose data type is “data type.” These values represent the other
        data types. For example, the value String represents the data type of strings. The value
        that represents the data type of these values
            is Type.
You can use these special values to
                examine a piece of data or enforce rules. For example, you can test whether
                something is a string with the expression $possible_string =~ String, or specify that a class
                parameter requires string values with class myclass (String $string_parameter = "default value") { ...
                    }.
Syntax
Data types are written as unquoted upper-case words, like String.
Data types sometimes take parameters, which make them more specific. For
                    example, String[8] is the data type of
                strings with a minimum of eight characters.
Each known data type defines how many parameters it accepts, what values those
                parameters take, and the order in which they must be given. Some of the abstract
                    types require parameters, and most types have some optional
                parameters available.
The general form of a data type is:

An upper-case word matching one of the known data types.


Sometimes, a set of parameters, which consists of:

An opening square bracket [
                                        after the type’s name. There can’t be any space between the
                                        name and the bracket.


A comma-separated list of values or expressions. Arbitrary
                                        whitespace is allowed, but you can’t have a trailing comma
                                        after the final value.


A closing square bracket ].






The following example uses an abstract data type Variant, which takes any number of data types as parameters. One of
                the parameters provided in the example is another abstract data type
                    Enum, which takes any number of strings as
                parameters:Variant[Boolean, Enum['true', 'false', 'running', 'stopped']]



Note: When parameters are required, you must specify them. The only
                    situation when you can leave out required parameters is if you’re referring to
                    the type itself. For example, Type[Variant] is legal, even though Variant has required parameters.




Usage

Data types are useful in parameter lists, match (=~) expressions, case statements, and
    selector expressions. There are also a few less common uses for them.
Specify data types in your Puppet code whenever you can, aligning them in columns. Type
        your class parameters wherever possible, and be specific when using a type. For example, use
        an Enum for input
        validation, instead of using a String and checking the contents of the string in the code. You have the option
        to specify String[1] instead
        of String, because you might
        want to enforce non-empty strings. Specify data types as deeply as possible, without
        affecting readability. If readability becomes a problem, consider creating a custom data type
        alias.
Parameter lists
Classes, defined types, and lambdas all let you
        specify parameters, which let your code request data from a user or some other
        source. Generally, your code expects each parameter to be a specific kind of data. You can
        enforce that expectation by putting a data type before that parameter’s name in the
        parameter list. At evaluation time, Puppet raises an error if
        a parameter receives an illegal value.
For example, consider the following class. If you tried to set $autoupdate to a string like "true",
          Puppet would raise an error, because it expects a Boolean
        value:class ntp (
  Boolean $service_manage = true,
  Boolean $autoupdate     = false,
  String  $package_ensure = 'present',
  # ...
) {
  # ...
}

Abstract data types let you write more sophisticated and flexible restrictions. For
        example, this $puppetdb_service_statusparameter accepts
        values of true, false, "true", "false", "running", and "stopped", and raises an error for any other
        value:class puppetdb::server (
  Variant[Boolean, Enum['true', 'false', 'running', 'stopped']]
    $puppetdb_service_status = $puppetdb::params::puppetdb_service_status,
) inherits puppetdb::params {
  # ...
}


Cases
Case statements and selector expressions allow data types as
          their cases. Puppet chooses a data type case if
        the control expression resolves to a value of that data type. For
        example:$enable_real = $enable ? {
  Boolean => $enable,
  String  => str2bool($enable),
  Numeric => num2bool($enable),
  default => fail('Illegal value for $enable parameter'),
}


Match expressions
The match operators =~ and !~ accept a data type on the right operand, and test whether the
        left operand is a value of that data type.
For example, 5 =~ Integer and 5 =~ Integer[1,10] both resolve to true.

Less common uses
The built-in function
            assert_type
 takes a value and a data type, and raises errors if your code encounters an
        illegal value. Think of it as shorthand for an if statement with a non-match (!~) expression
        and a fail() function call.
You can also provide data types as both operands for the comparison operators ==, !=, <, >, <=, and >=, to test
        whether two data types are equal, whether one is a subset of another, and so on.

Obtaining data types
The built-in function type returns the type of any
        value. For example, type(3) returns Integer[3,3].



List of Puppet data types

The following data types are available in the Puppet language.

For details on each data type, see the linked documentation or the specification document.










Data type
Purpose
Type category 




Any
The parent type of all types.
Abstract



Array

The data type of arrays.
Data


Binary
A type representing a  sequence of bytes. 
Data



Boolean

The data type of Boolean values.
Data, Scalar


Callable
Something that can be called (such as a function or lambda).
Platform


CatalogEntry
The parent type of all types that are included in a Puppet
                           catalog.
Abstract


Class
 A special data type used to declare classes. 
Catalog


Collection
A parent type of Array and
                           Hash.
Abstract


Data
A parent type of all data directly representable as JSON.
Abstract




Default


The "default value" type.
Platform


Deferred
A type describing a call to be resolved in the future. 
Platform


Enum
An enumeration of strings.
Abstract


Error
A type used to communicate when a function has produced an error. 




Float

The data type of floating point numbers.
Data, Scalar



Hash

The data type of hashes.
Data


Init
A type used to accept values that are compatible of some other type's
                           "new".




Integer

The data type of integers.
Data, Scalar


Iterable
A type that represents all types that allow iteration.
Abstract


Iterator
A special kind of lazy Iterable suitable for
                           chaining.
Abstract


NotUndef
A type that represents all types not assignable from the
                              Undef type.
Abstract




Numeric


The parent type of all numeric data types.
Abstract


Object
Experimental. Can be a simple object only having attributes, or a
                           more complex object also supporting callable methods.



Optional
Either Undef or a specific type.
Abstract


Pattern
An enumeration of regular expression patterns.
Abstract



Regexp

The data type of regular expressions.
Scalar


Resource
A special data type used to declare resources. 
Catalog


RichData
A parent type of all data types except the non serializeable types
                              Callable, Iterator,
                              Iterable, and Runtime.
Abstract


Runtime
The type of runtime (non Puppet) types.
Platform


Scalar
Represents the abstract notion of "value".
Abstract


ScalarData
A parent type of all single valued data types that are directly
                           representable in JSON.
Abstract


SemVer
A type representing semantic versions. 
Scalar


SemVerRange
A range of SemVer versions.
Abstract




Sensitive


A type that represents a data type that has "clear text"
                           restrictions.
Platform



String

The data type of strings.
Data, Scalar


Struct
A Hash where each entry is
                           individually named and typed.
Abstract


Timespan
A type representing a duration of time.
Scalar


Timestamp
A type representing a specific point in time
Scalar


Tuple
An Array where each slot is typed
                           individually
Abstract


Type
The type of types.
Platform


Typeset
Experimental. Represents a collection of Object-based data types.




Undef

The "no value" type.
Data, Platform


URI
A type representing a Uniform Resource Identifier
Data


Variant
One of a selection of types.
Abstract







The Type data type

The data type of literal data type values is Type. By default, Type matches any value that
      represents a data type, such as Integer, Integer[0,800], String, or Enum["running", "stopped"]. You can use parameters to restrict which
         values Type matches.
Parameters
The full signature for Type is:Type[<ANY DATA TYPE>]This
            parameter is optional. 










Position
Parameter
Data type
Default
Description




1
Any data type
Type
Any
A data type, which causes the resulting Type object to only match against that
                           type or types that are more specific subtypes of that type.
                        




Examples: 

Type

Matches any data type, such as Integer, String, Any, or Type.
                  

Type[String]

Matches the data type String, as well as
                     any of its more specific subtypes like String[3] or Enum["running",
                        "stopped"]. 
Type[Resource]
Matches any Resource data type —
                     that is, any resource reference.




 




          Was this page helpful?
        
Yes
No







              Don’t fill this out if you’re human: 






Thank you for your feedback!

            Feel free to add a comment or suggestion.
            





Send
Please enter your feedback





              Don’t fill this out if you’re human: 







            We’re sorry to hear that! 
            Please tell us why so we can help.
          

            Enter your feedback and email. This form is sent to the Puppet docs team.
            We ask for your email as we might contact you regarding your feedback.
          

            If you need help with the product itself, visit Puppet Support
            or ask in Puppet Community on Slack.
          

            Feedback:
            






            Email Address:
            






            To learn about how Puppet uses your personal information,
            visit our privacy policy.
          


Send
Please enter your feedback and contact email

          If you leave us your email, we may contact you regarding your feedback.
          For more information on how Puppet uses your personal information, see
          our
          privacy policy.
        





            Don’t fill this out if you’re human: 








    See an issue? Please file a JIRA ticket in our
    [DOCUMENTATION]
      project.
  











Puppet by Perforce gives IT operations teams back their time and offers peace of mind with infrastructure automation that enables security and compliance.






Legal
Privacy Policy
Terms of Use
Security


©  Puppet, Inc., a Perforce company. All rights reserved.




Puppet and other identified trademarks are the property of Puppet, Inc., Perforce Software, Inc., or an affiliate. Such trademarks are claimed and/or registered in the U.S. and other countries and regions. All third-party trademarks are the property of their respective holders. References to third-party trademarks do not imply endorsement or sponsorship of any products or services by the trademark holder. Contact Puppet, Inc., for further details.

