Title: Reserved words and acceptable names
URL: https://www.puppet.com/docs/puppet/7/lang_reserved

Puppet.com
Forge
Education


                                    Try Puppet
                                


































        Docs
        






Products
Puppet Enterprise
Open Source Puppet
Bolt
Security Compliance Management
Continuous Delivery
Puppet Development Kit
Puppet DB
Puppet Plugin for VMware



        Support
        






Get
Technical Support Plans
Support Lifecycle Policy
New Puppet Enterprise Customer?



        Community
        






About Puppet
Company
Developer Experience
Community
Puppet Champions
Puppet Test Pilots
Community Calendar
Slack Channel







 









































PRODUCT AND VERSION


      Current product
      










      Current version
      








Puppet  7.34.0

Release notes

Puppet release notes
Puppet  7.34.0Security


Puppet known issues
Puppet Server release notes
Puppet Server known Issues
PuppetDB release notes (link)

Facter release notes
Facter 4.10.0
Facter 4.9.0
Facter 4.8.0
Facter 4.7.1
Facter 4.7.0
Facter 4.6.1
Facter 4.6.0
Facter 4.5.2


Facter known issues
What's new since Puppet 6?
Upgrading from Puppet 6 to Puppet 7

Experimental featuresMsgpack support

Archived documentation



Puppet overview
What is Puppet?
Why use Puppet desired state management?
Key concepts behind Puppet
The Puppet platform 
Puppet platform lifecycle 
Open source Puppet vs Puppet Enterprise (PE)
The Puppet ecosystem
Use cases
Glossary
Navigating the documentation



Set up Puppet

Install Puppet
System requirements
Installing Puppet  
Installing and configuring agents
Manually verify packages
Managing Platform versions



Configure Puppet settings
Puppet settings
Key configuration settings

Puppet's configuration files
puppet.conf: The main config file
environment.conf: Per-environment settings
fileserver.conf: Custom fileserver mount points
puppetdb.conf: PuppetDB server locations
autosign.conf: Basic certificate autosigning 
csr_attributes.yaml: Certificate extensions 
custom_trusted_oid_mapping.yaml: Short names for cert extension OIDs
device.conf: Network hardware access
routes.yaml: Advanced plugin routing


Adding file server mount points
Checking the values of settings
Editing settings on the command line
Configuration Reference



Upgrading
Upgrade Puppet Server

Upgrade agents
Upgrade agents using the puppet_agent module
Upgrade *nix agents
Upgrade Windows agents
Upgrade macOS agents


Upgrade PuppetDB



Environments
About environments
Creating environments
Environment isolation



Directories and files
Code and data directory (codedir)
Config directory (confdir)
Main manifest directory
The modulepath
SSL directory (ssldir)
Cache directory (vardir)


Report reference



Platform components

Puppet Server
About Puppet Server
Deprecated features
Server and agent compatibility
Installing Puppet Server

Configuring Puppet Server
Configuring Puppet Server

Puppet Server configuration files
auth.conf
ca.conf
global.conf
logback.xml
metrics.conf
product.conf
puppetserver.conf
web-routes.conf
webserver.conf


Migrating to the HOCON auth.conf format
Advanced logging configuration
Differing behavior in puppet.conf



Using and extending Puppet Server
Subcommands
Using Ruby gems
Intermediate CA
Infrastructure certificate revocation list (CRL)
External SSL termination

Server metrics
Monitoring Puppet Server metrics
HTTP Client Metrics


Tuning guide
Applying metrics to improve performance
Submitting usage telemetry
Scaling Puppet Server
Restarting Puppet Server"



Developer information
Developer debugging
Running from source
Tracing code events



Puppet Server HTTP API
Puppet Server HTTP API overview
PSON

Puppet v3 API
Catalog
Node
Facts
File Bucket File
File Content
File Metadata
Report



Puppet v4 APICatalog API


CA v1 API
Certificate
Certificate Request
Certificate Status
Certificate Revocation List
Expirations
Certificate Clean


Schemas (JSON)



API endpoints

Metrics API endpoints
v1 metrics
v2 (Jolokia) metrics



Status API endpoints
Services endpoint
Simple endpoint



Administrative API endpoints
Environment cache
JRuby pool



Server-specific Puppet API endpoints
Environment classes
Environment modules
Static file content





Certificate authority and SSL
Puppet Server CA commands
Intermediate CA
Autosigning certificate requests
CSR attributes and certificate extensions
Regenerating certificates in a Puppet deployment
External CA
External SSL termination





Facter  
Facter: CLI
Facter: Core Facts

Custom facts overviewEnvironment facts 

Writing custom facts
External facts
Configuring Facter with facter.conf


PuppetDB

Puppet services and tools
Puppet commands
Running Puppet commands on Windows  

primary Puppet serverAbout Puppet Server

Puppet agent on *nix systems
Puppet agent on Windows
Puppet apply
Puppet device



Puppet reports
Reporting
Report reference
Writing custom report processors
Report format



Life cycle of a Puppet run
Agent-server HTTPS communications
Catalog compilation
Static catalogs 





Using Puppet code
Classifying nodes
Managing environment content with a Puppetfile
Using content from Puppet Forge

Designing system configs (roles and profiles)
The roles and profiles method 
Roles and profiles example 
Designing advanced profiles 
Designing convenient roles 



Separating data (Hiera)
About Hiera  
Getting started with Hiera  
Configuring Hiera
Creating and editing data 
Looking up data with Hiera  
Writing new data backends 

Debugging Hiera
Unexpected values
Common errors


Upgrading to Hiera 5 



Use case examples
Manage NTP
Manage sudo 
Manage DNS
Manage firewall rules
Forge examples





Syntax and settings

The Puppet language
Puppet language overview
Puppet language syntax examples
The Puppet language style guide 
Files and paths on Windows  
Code comments 
Variables
Resources

Resource types
Resource Type Reference (Single-Page)
Built-in types
Optional resource types for Windows
Resource Type: exec
Using exec on Windows  
Resource Type: file
Using file on Windows
Resource Type: filebucket
Resource Type: group
Using user and group on Windows
Resource types overview
Resource Type: notify
Resource Type: package
Using package on Windows  
Resource Type: resources
Resource Type: schedule
Resource Type: service
Using service
Resource Type: stage
Resource Type: tidy
Resource Type: user


Relationships and ordering
Classes
Defined resource types
Bolt tasks
Expressions and operators
Conditional statements and expressions
Function calls
Built-in function reference
Node definitions

Facts and built-in variables
Accessing facts from Puppet code
Built-in variables


Reserved words and acceptable names

Custom resources

Develop types and providers with the Resource APIResource API reference


Low-level method for developing types and providers
Type development
Provider development
Creating resources





Custom functions
Custom functions overview 
Writing custom functions in the Puppet language

Writing custom functions in Ruby
Custom functions in Ruby overview
Ruby function signatures
Using special features in implementation methods
Iterative functions
Refactoring legacy 3.x functions



Deferring a function
Deferred functions overview
Using a template with Deferred values
Write a deferred function to store secrets
Integrations with secret stores





Values, data types, and aliases
Type aliases
Typecasting
Abstract data types
Arrays
Binary
Booleans
Data type syntax
Default
Error data type
Hashes
Numbers
Regular expressions
Resource and class references
Resource types
Sensitive
Strings
Time-related data types
Undef



Templates
Creating templates using Embedded Puppet
Creating templates using Embedded Ruby



Advanced constructs
Iteration and loops
Lambdas
Resource default statements
Resource collectors
Virtual resources
Exported resources
Tags
Run stages



Details of complex behaviors
Containment
Scope
Namespaces and autoloading


Securing sensitive data


Metaparameter reference
Configuration Reference
Built-in function reference

Puppet Man Pages

Core tools
Man Page: puppet agent
Man Page: puppet apply
Man Page: puppet module
Man Page: puppet resource
Man Page: puppet lookup



Occasionally useful
Man Page: puppet config
Man Page: puppet describe
Man Page: puppet device
Man Page: puppet doc
Man Page: puppet help
Man Page: puppet node
Man Page: puppet parser



Niche
Man Page: puppet catalog
Man Page: puppet facts
Man Page: puppet filebucket
Man Page: puppet report







Developing modules

Modules
Modules overview
Plug-ins in modules
Module cheat sheet
Installing and managing modules from the command line
Beginner's guide to writing modules
Module metadata
Documenting modules
Documenting modules with Puppet Strings  
Puppet Strings style guide

Publishing modulesUsing the Forge API

Contributing to Puppet modules


Puppet Development Kit (PDK)
Puppet VSCode extension

PowerShell DSC Resources
Converting DSC Resources
Distributing arbitrary DSC resources
Upgrading Puppet DSC modules 
Troubleshooting DSC Resources 


Ruby API for developing extensions


Reserved words and acceptable names
You can use only certain characters for naming variables,
        modules, classes, defined types, and other custom constructs. Additionally, some words in
        the Puppet language are reserved and cannot be used as bare
        word strings or names.

Reserved words

 

Reserved words cannot be used as:
Bare word strings—to use these words as strings, you
                        must enclose them in quotes.
Names for custom functions.
Names for classes.
Names for custom resource types or defined resource
                        types.


In addition, do not:
Use the name of any existing resource type or function
                        as the name of a function.
Use the name of any existing resource type as the name
                        of a defined type.
Use the name of any existing data type (such as integer) as the name of a
                        defined type.





Table 1. 







Reserved word
Description




and
Expression operator


application
Language keyword


attr
Reserved for future use


case
Language keyword


component
Reserved


consumes
Language keyword


default
Language keyword


define
Language keyword


elsif
Language keyword


environment
Reserved for symbolic namespace
                                    use


false
Boolean value


function
Language keyword


if
Language keyword


import
Former language keyword


in
Expression operator


inherits
Language keyword


node
Language keyword


or
Expression operator


private
Reserved for future use


produces
Language keyword


regexp
Reserved


site
Language keyword


true
Boolean value


type
Language keyword


undef
Special value


unit
Reserved


unless
Language keyword





Reserved class names

Puppet automatically creates two names that must not
                be used as class names elsewhere:

main: Puppet creates a
                            main class, which contains any resources not contained
                        by any other class.

settings: Puppet creates a
                            settings namespace, which contains variables with the
                        settings available to the primary server.


Additionally, the names of data types can't be used as class names:

any, Any


array, Array


binary, Binary


boolean, Boolean


catalogentry, catalogEntry,
                            CatalogEntry


class, Class


collection, Collection


callable, Callable


data, Data


default, Default


deferred, Deferred


enum, Enum


float, Float


hash, Hash


integer, Integer


notundef, NotUndef


numeric, Numeric


optional, Optional


pattern, Pattern


resource, Resource


regexp, Regexp


runtime, Runtime


scalar, Scalar


semver, SemVer


semVerRange, SemVerRange


sensitive, Sensitive


string, String


struct, Struct


timespan, Timespan


timestamp, TImestamp


tuple, Tuple


type, Type


undef, Undef


variant, Variant




Reserved variable names
The following variable names are reserved. Unless otherwise noted, you can't assign
                values to them or use them as parameters in classes or defined types. 

Table 2. 







Reserved variable name
Description





$0, $1, and every other
                                    variable name consisting only of digits
These are regex capture variables automatically set by
                                    regular expression used in conditional statements. Their values
                                    do not persist oustide their associated code block or selector
                                    value. Assigning these variables causes an error.


Top-scope Puppet built-in
                                    variables and facts
 Built-in variables and facts are reserved at top scope, but
                                    you can safely reuse them at node or local scope. See built-in variables
                                        and facts for a list of these variables and
                                    facts.


$facts
Reserved for facts and cannot be reassigned at local
                                    scopes.


$trusted
Reserved for facts and cannot be reassigned at local
                                    scopes.


$server_facts
If enabled, this variable is reserved for trusted server
                                    facts and cannot be reassigned at local scopes.


title
Reserved for the title of a class or defined type.


name
Reserved for the name of a class or defined type.







Related information
Facts and built-in variables
Scope


Acceptable characters in names


Puppet limits the characters
                                        you can use when naming language constructs. 


CAUTION:  In
                                                  some cases, names containing unsupported
                                                  characters might still work. Such cases are bugs
                                                  and could cease to work at any time. Removal of
                                                  these bug cases is not limited to major
                                                  releases.

Classes and defined resource type names
The names of classes and defined resource types can consist of one
                                        or more namespace segments. Each namespace
                                                  segment:
Must begin with a lowercase letter.
Can include lowercase letters.
Can include digits.
Can include underscores.


Important: The filename of a class (the loadable
                                                  path) must be all lowercase ⁠— even if class name
                                                  is mixed or camel case. 

When you follow these rules, each namespace segment matches the
                                        following regular expression:
                                        \A[a-z][a-z0-9_]*\ZThe one exception
                                        is the top namespace, whose name is the empty string.
Multiple namespace segments are joined together in a class or
                                        defined type name with the double colon namespace separator:
                                                  ::. Class names with multiple
                                        namespaces must match the following regular expression:
                                        \A([a-z][a-z0-9_]*)?(::[a-z][a-z0-9_]*)*\Z
                                        Some words and class names are reserved and cannot be used
                                        as class or defined type names. Additionally, the filename
                                                  init.pp is reserved for the class
                                        named after any given module, so you cannot use the name
                                                  <MODULE NAME>::init for a
                                        class or defined type. 

Variable names
 Variable names are case-sensitive and must begin with a dollar
                sign ($). Most
                variable names must start with a lowercase letter or an underscore. The exception is
                regex capture variables, which are named with only numbers.
 Variable names can include: 

Uppercase and lowercase letters


Numbers


Underscores ( _ ). If the first character is an
                            underscore, access that variable only from its own local scope.



Qualified variable names are prefixed with the name of their scope
                and the double colon (::) namespace
                separator. For example, the $vhostdir variable from the apache::params class would be $apache::params::vhostdir. 
 Optionally, the name of the very first namespace can be empty,
                representing the top namespace. The main reason to namespace this way is to indicate
                to anyone reading your code that you're accessing a top-scope variable, such as
                    $::is_virtual.
You can also use a regular expression for variable names. Short
                variable names match the following regular expression:
                \A\$[a-z0-9_][a-zA-Z0-9_]*\Z
                Qualified variable names match the following regular expression:
                \A\$([a-z][a-z0-9_]*)?(::[a-z][a-z0-9_]*)*::[a-z0-9_][a-zA-Z0-9_]*\Z



Module names
Module names obey the same rules as individual namespace segments,
                                        just as in a class or defined type name. That is, each
                                        namespace segment:
Must begin with a lowercase letter.
Can include lowercase letters.
Can include digits.
Can include underscores.


When you follow these rules, each namespace segment matches the
                                        following regular expression:
                                        \A[a-z][a-z0-9_]*\Z

Reserved words and class names cannot be used as module names. 

Parameter names
Parameter names begin with a dollar sign prefix
                                        ($). The parameter name after the
                                                  prefix:
Must begin with a lowercase letter.
Can include lowercase letters.
Can include digits.
Can include underscores.


When you follow these rules, a parameter name matches the following
                                        regular expression:
                                        \A\$[a-z][a-z0-9_]*\Z


Tag names
Tag names must begin with:

A lowercase letter, or


An number, or


An underscore.



Tag names can include:

Lowercase letters


Uppercase letters


Digits


Underscores


Colons


Periods


Hyphens



When you follow these rules, a tag name matches the following
                                        regular
                                        expression:\A[[:alnum:]_][[:alnum:]_:.-]*\Z


Resource names
Resource titles can contain any characters whatsoever and are
                                        case-sensitive. Resource names, or the namevar
                                        attribute, might be limited by the system being managed. For
                                        example, most operating systems have limits on the
                                        characters permitted in the name of a user account. You are
                                        generally responsible for knowing the name limits on the
                                        platforms you manage.

Node names
Node names can contain: 
Letters
Digits
Periods
Underscores
Dashes
 That is, node names match the regular
                                        expression: /\A[a-z0-9._-]+\Z/


Environment names
Environment names can contain:
Lowercase letters
Numbers
Underscores
That is, environment names match the regular
                                        expression: \A[a-z0-9_]+\Z 



 




          Was this page helpful?
        
Yes
No







              Don’t fill this out if you’re human: 






Thank you for your feedback!

            Feel free to add a comment or suggestion.
            





Send
Please enter your feedback





              Don’t fill this out if you’re human: 







            We’re sorry to hear that! 
            Please tell us why so we can help.
          

            Enter your feedback and email. This form is sent to the Puppet docs team.
            We ask for your email as we might contact you regarding your feedback.
          

            If you need help with the product itself, visit Puppet Support
            or ask in Puppet Community on Slack.
          

            Feedback:
            






            Email Address:
            






            To learn about how Puppet uses your personal information,
            visit our privacy policy.
          


Send
Please enter your feedback and contact email

          If you leave us your email, we may contact you regarding your feedback.
          For more information on how Puppet uses your personal information, see
          our
          privacy policy.
        





            Don’t fill this out if you’re human: 








    See an issue? Please file a JIRA ticket in our
    [DOCUMENTATION]
      project.
  











Puppet by Perforce gives IT operations teams back their time and offers peace of mind with infrastructure automation that enables security and compliance.






Legal
Privacy Policy
Terms of Use
Security


©  Puppet, Inc., a Perforce company. All rights reserved.




Puppet and other identified trademarks are the property of Puppet, Inc., Perforce Software, Inc., or an affiliate. Such trademarks are claimed and/or registered in the U.S. and other countries and regions. All third-party trademarks are the property of their respective holders. References to third-party trademarks do not imply endorsement or sponsorship of any products or services by the trademark holder. Contact Puppet, Inc., for further details.

