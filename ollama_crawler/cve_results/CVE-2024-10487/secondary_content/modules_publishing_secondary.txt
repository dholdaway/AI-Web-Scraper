Title: Publishing modules
URL: https://www.puppet.com/docs/puppet/7/modules_publishing

Puppet.com
Forge
Education


                                    Try Puppet
                                


































        Docs
        






Products
Puppet Enterprise
Open Source Puppet
Bolt
Security Compliance Management
Continuous Delivery
Puppet Development Kit
Puppet DB
Puppet Plugin for VMware



        Support
        






Get
Technical Support Plans
Support Lifecycle Policy
New Puppet Enterprise Customer?



        Community
        






About Puppet
Company
Developer Experience
Community
Puppet Champions
Puppet Test Pilots
Community Calendar
Slack Channel







 









































PRODUCT AND VERSION


      Current product
      










      Current version
      








Puppet  7.34.0

Release notes

Puppet release notes
Puppet  7.34.0Security


Puppet known issues
Puppet Server release notes
Puppet Server known Issues
PuppetDB release notes (link)

Facter release notes
Facter 4.10.0
Facter 4.9.0
Facter 4.8.0
Facter 4.7.1
Facter 4.7.0
Facter 4.6.1
Facter 4.6.0
Facter 4.5.2


Facter known issues
What's new since Puppet 6?
Upgrading from Puppet 6 to Puppet 7

Experimental featuresMsgpack support

Archived documentation



Puppet overview
What is Puppet?
Why use Puppet desired state management?
Key concepts behind Puppet
The Puppet platform 
Puppet platform lifecycle 
Open source Puppet vs Puppet Enterprise (PE)
The Puppet ecosystem
Use cases
Glossary
Navigating the documentation



Set up Puppet

Install Puppet
System requirements
Installing Puppet  
Installing and configuring agents
Manually verify packages
Managing Platform versions



Configure Puppet settings
Puppet settings
Key configuration settings

Puppet's configuration files
puppet.conf: The main config file
environment.conf: Per-environment settings
fileserver.conf: Custom fileserver mount points
puppetdb.conf: PuppetDB server locations
autosign.conf: Basic certificate autosigning 
csr_attributes.yaml: Certificate extensions 
custom_trusted_oid_mapping.yaml: Short names for cert extension OIDs
device.conf: Network hardware access
routes.yaml: Advanced plugin routing


Adding file server mount points
Checking the values of settings
Editing settings on the command line
Configuration Reference



Upgrading
Upgrade Puppet Server

Upgrade agents
Upgrade agents using the puppet_agent module
Upgrade *nix agents
Upgrade Windows agents
Upgrade macOS agents


Upgrade PuppetDB



Environments
About environments
Creating environments
Environment isolation



Directories and files
Code and data directory (codedir)
Config directory (confdir)
Main manifest directory
The modulepath
SSL directory (ssldir)
Cache directory (vardir)


Report reference



Platform components

Puppet Server
About Puppet Server
Deprecated features
Server and agent compatibility
Installing Puppet Server

Configuring Puppet Server
Configuring Puppet Server

Puppet Server configuration files
auth.conf
ca.conf
global.conf
logback.xml
metrics.conf
product.conf
puppetserver.conf
web-routes.conf
webserver.conf


Migrating to the HOCON auth.conf format
Advanced logging configuration
Differing behavior in puppet.conf



Using and extending Puppet Server
Subcommands
Using Ruby gems
Intermediate CA
Infrastructure certificate revocation list (CRL)
External SSL termination

Server metrics
Monitoring Puppet Server metrics
HTTP Client Metrics


Tuning guide
Applying metrics to improve performance
Submitting usage telemetry
Scaling Puppet Server
Restarting Puppet Server"



Developer information
Developer debugging
Running from source
Tracing code events



Puppet Server HTTP API
Puppet Server HTTP API overview
PSON

Puppet v3 API
Catalog
Node
Facts
File Bucket File
File Content
File Metadata
Report



Puppet v4 APICatalog API


CA v1 API
Certificate
Certificate Request
Certificate Status
Certificate Revocation List
Expirations
Certificate Clean


Schemas (JSON)



API endpoints

Metrics API endpoints
v1 metrics
v2 (Jolokia) metrics



Status API endpoints
Services endpoint
Simple endpoint



Administrative API endpoints
Environment cache
JRuby pool



Server-specific Puppet API endpoints
Environment classes
Environment modules
Static file content





Certificate authority and SSL
Puppet Server CA commands
Intermediate CA
Autosigning certificate requests
CSR attributes and certificate extensions
Regenerating certificates in a Puppet deployment
External CA
External SSL termination





Facter  
Facter: CLI
Facter: Core Facts

Custom facts overviewEnvironment facts 

Writing custom facts
External facts
Configuring Facter with facter.conf


PuppetDB

Puppet services and tools
Puppet commands
Running Puppet commands on Windows  

primary Puppet serverAbout Puppet Server

Puppet agent on *nix systems
Puppet agent on Windows
Puppet apply
Puppet device



Puppet reports
Reporting
Report reference
Writing custom report processors
Report format



Life cycle of a Puppet run
Agent-server HTTPS communications
Catalog compilation
Static catalogs 





Using Puppet code
Classifying nodes
Managing environment content with a Puppetfile
Using content from Puppet Forge

Designing system configs (roles and profiles)
The roles and profiles method 
Roles and profiles example 
Designing advanced profiles 
Designing convenient roles 



Separating data (Hiera)
About Hiera  
Getting started with Hiera  
Configuring Hiera
Creating and editing data 
Looking up data with Hiera  
Writing new data backends 

Debugging Hiera
Unexpected values
Common errors


Upgrading to Hiera 5 



Use case examples
Manage NTP
Manage sudo 
Manage DNS
Manage firewall rules
Forge examples





Syntax and settings

The Puppet language
Puppet language overview
Puppet language syntax examples
The Puppet language style guide 
Files and paths on Windows  
Code comments 
Variables
Resources

Resource types
Resource Type Reference (Single-Page)
Built-in types
Optional resource types for Windows
Resource Type: exec
Using exec on Windows  
Resource Type: file
Using file on Windows
Resource Type: filebucket
Resource Type: group
Using user and group on Windows
Resource types overview
Resource Type: notify
Resource Type: package
Using package on Windows  
Resource Type: resources
Resource Type: schedule
Resource Type: service
Using service
Resource Type: stage
Resource Type: tidy
Resource Type: user


Relationships and ordering
Classes
Defined resource types
Bolt tasks
Expressions and operators
Conditional statements and expressions
Function calls
Built-in function reference
Node definitions

Facts and built-in variables
Accessing facts from Puppet code
Built-in variables


Reserved words and acceptable names

Custom resources

Develop types and providers with the Resource APIResource API reference


Low-level method for developing types and providers
Type development
Provider development
Creating resources





Custom functions
Custom functions overview 
Writing custom functions in the Puppet language

Writing custom functions in Ruby
Custom functions in Ruby overview
Ruby function signatures
Using special features in implementation methods
Iterative functions
Refactoring legacy 3.x functions



Deferring a function
Deferred functions overview
Using a template with Deferred values
Write a deferred function to store secrets
Integrations with secret stores





Values, data types, and aliases
Type aliases
Typecasting
Abstract data types
Arrays
Binary
Booleans
Data type syntax
Default
Error data type
Hashes
Numbers
Regular expressions
Resource and class references
Resource types
Sensitive
Strings
Time-related data types
Undef



Templates
Creating templates using Embedded Puppet
Creating templates using Embedded Ruby



Advanced constructs
Iteration and loops
Lambdas
Resource default statements
Resource collectors
Virtual resources
Exported resources
Tags
Run stages



Details of complex behaviors
Containment
Scope
Namespaces and autoloading


Securing sensitive data


Metaparameter reference
Configuration Reference
Built-in function reference

Puppet Man Pages

Core tools
Man Page: puppet agent
Man Page: puppet apply
Man Page: puppet module
Man Page: puppet resource
Man Page: puppet lookup



Occasionally useful
Man Page: puppet config
Man Page: puppet describe
Man Page: puppet device
Man Page: puppet doc
Man Page: puppet help
Man Page: puppet node
Man Page: puppet parser



Niche
Man Page: puppet catalog
Man Page: puppet facts
Man Page: puppet filebucket
Man Page: puppet report







Developing modules

Modules
Modules overview
Plug-ins in modules
Module cheat sheet
Installing and managing modules from the command line
Beginner's guide to writing modules
Module metadata
Documenting modules
Documenting modules with Puppet Strings  
Puppet Strings style guide

Publishing modulesUsing the Forge API

Contributing to Puppet modules


Puppet Development Kit (PDK)
Puppet VSCode extension

PowerShell DSC Resources
Converting DSC Resources
Distributing arbitrary DSC resources
Upgrading Puppet DSC modules 
Troubleshooting DSC Resources 


Ruby API for developing extensions


Publishing modules

To share your module with other Puppet users, get contributions to your modules, and maintain
        your module releases, publish your module on the Puppet
Forge. The Forge is a
        community repository of modules, written and contributed by open source Puppet and Puppet Enterprise
        users.
To publish your module, you'll:
Create a Forge account, if you don't already have one.
                    
Prepare your module for packaging.
                    
Add module metadata in the metadata.json
                        file.
Build an uploadable tarball of your
                        module.
Upload your module using the Forge web interface.


Naming your module
                
Your module has two names: a short name, like "mysql",
                and a long name that includes your Forge username,
                like "puppetlabs-mysql". When you upload your module to the Forge, use the module's long name.
 Your module's short name is the same as that module's directory on your
                disk. This name must consist of letters, numbers, and underscores only; it can't
                contain dashes or periods.
 The long name is composed of
                your Forge username and the short name of your
                module. For example, the "puppetlabs" user maintains a "mysql" module, which is
                located in a ./modules/mysql directory and is known to the Forge as "puppetlabs-mysql".
 In your module's metadata.json file, always use the long name of your module. This
                helps disambiguate modules that might have common short names, such as "mysql" or
                "apache." If you created your module with Puppet Development Kit (PDK), and you provided your Forge username to PDK,
                the metadata.json
                file already contains the correct long name for the module. Otherwise, edit your
                module's metadata with the correct long name.

Tip: Although the Forge expects to receive modules named username-module, its web interface presents them as
                        username/module. Always use the username-module style in your metadata
                    files and when issuing commands.


Related informationModule metadata

Create a Forge account

To publish your modules to the Forge, you must first create a Forge account.


In your web browser, navigate to the Forge website and click Sign Up.


Fill in the fields on the sign-up form. The
                    username you pick becomes part of your module long name, such as
                    "bobcat-apache".


Check your email for a verification email from the
                        Forge, and then follow the instructions in
                    the email to verify your email address.


Results
After you have verified
                your email address, you can publish modules to the Forge.


Prepare your module for publishing

Before you build your module package for
                                publishing, make sure it's ready to be packaged.
Exclude unnecessary files from your package,
                                                remove or ignore any symlinks your module contains,
                                                and make sure your metadata.json file contains the correct
                                                information. 
Tip: To publish your module to the Forge, your README,
                                                  license file, changelog, and metadata.json must be UTF-8 encoded. If
                                                  you used Puppet Development Kit (or the deprecated
                                                  puppet module generate
                                                  command) to create your module, these files are
                                                  already UTF-8 encoded. 

Excluding files from the package
To exclude certain files from
                                                  your module build, include them in either an
                                                  ignore file. Ignore files are useful for excluding
                                                  files that are not needed to run the module, such
                                                  as temporary files or files generated by spec
                                                  tests. The ignore file must be in the root
                                                  directory. You can use .pdkignore,
                                                  .gitignore, or.pmtignore files in your module.
If you are building your module
                                                  with PDK, your
                                                  module package contains a .pdkignore file that already includes a
                                                  list of commonly ignored files. To add or remove
                                                  files to this list, define them in the module's
                                                  .sync.yml file. For more
                                                  information about customizing your module's
                                                  configuration with .sync.yml,
                                                  see the 
PDK
                                                  documentation. 
If you are building your module with the puppet module build command, create a
                                                  .pmtignore file and in it,
                                                  list the files you want to exclude from the module
                                                  package.
To prevent
                                                  files, such as those in temporary directories,
                                                  from ever being checked into your module's Git repo, list the
                                                  files in a .gitignore file. 
For example, a typical ignore
                                                  file might look like this:
                                                  import/
/spec/fixtures/
.tmp
*.lock
*.local
.rbenv-gemsets
.ruby-version
build/
docs/
tests/
log/
junit/
tmp/

Removing symlinks from your module
Symlinks in modules are
                                                  unsupported. If your module contains symlinks,
                                                  either remove them or ignore them before you build
                                                  your module.
 If you try
                                                  to build a module package that contains symlinks,
                                                  you receive the following error:
                                                  Warning: Symlinks in modules are unsupported. Please investigate symlink manifests/my-module.pp->manifests/init.pp.
Error: Found symlinks. Symlinks in modules are not allowed, please remove them.
Error: Try 'puppet help module build' for usage

Verifying metadata
To publish your module on the Forge, it must contain
                                                  required metadata in a metadata.json file. If you created your
                                                  module with PDK or
                                                  the deprecated puppet module
                                                  generate command, you'll already have a
                                                  metadata.json file. Open
                                                  the file in any text editor, and make any
                                                  necessary edits. For details on writing or editing
                                                  the metadata.json file, see
                                                  the related topic about module metadata.
                                                


Build a module package

To upload your module to the Forge, first build an uploadable
                        module package with Puppet Development Kit.

PDK builds a .tar.gz
                                                package with the naming convention <USERNAME>-<MODULE_SHORT_NAME>-<VERSION>.tar.gz.
                                                in the module's pkg/
                                                subdirectory. For complete details about this task,
                                                see the PDK topic about building module
                                                packages.


Change into the
                                                  module directory by running cd
                                                  <MODULE_DIRECTORY>


Build the package
                                                  by running pdk build


Answer the
                                                  question prompts as needed. You can use default
                                                  answers to optional questions by pressing
                                                  Enter at the prompt.


At the
                                                  confirmation prompt, confirm or cancel package
                                                  creation.


Results



Upload a module to the Forge


To publish a new module release to the Forge, upload the module tarball using the web
        interface.

The module package must be a compiled tar.gz package of 10MB or less.



In your web browser, navigate to the Forge and log in.


Click Publish in the upper right hand corner of the screen.


On the upload page, click Choose File and use the file browser
                    to locate and select the release tarball. Then click Upload Release.


Results
After a successful
                upload, your browser loads the new release page for your module. If there were any
                errors on your upload, they appear on the same screen. Your module's README,
                Changelog, and License files are displayed on your module's Forge page. 


Publish modules to the Forge with
    Travis CI

You can automatically publish new versions of your module to
    the Forge using Travis CI.



If this is your first time using Travis CI for automatic
          publishing, you must first enable Travis CI to publish to the Forge.


Enable Travis CI for the module repository.


Generate a Travis-encrypted Forge password string. For instructions, see the Travis
              CI encryption keys docs.


Create a .travis.yml file in the module's repository base. Include a
              deployment section that includes your Forge username
              and the encrypted Forge password, such as:
deploy:
  provider: puppetforge
  user: <FORGE_USER>
  password:
    secure: "<ENCRYPTED_FORGE_PASSWORD>"
  on:
    tags: true
    # all_branches is required to use tags
    all_branches: true




To publish to the Forge
          with Travis CI, update, tag, and push your repository.


Update the version number in the module's metadata.json file and
              commit the change to the module repository.


Tag the module repo with the desired version number.
              For more information about how to do this, see Git docs
              on basic
                tagging. 


Push the commit and tag to your Git repository. Travis CI builds and publish the
              module.






Publish modules to the Forge with Github Actions and Puppet Development Kit


You can also manually publish new versions of your module to the Forge using Puppet Development Kit, or automate
    publishing with PDK using Github Actions.



When creating a Github Action to publish to the Forge,
          ensure that you have access to the Forge API and have your
          API token on hand.


Set up your Github Action to build a release of your module when triggered and publish
          it using the PDK
release publish command.


Example: 


# This is a generic workflow for releasing a Puppet module.
# It requires that the caller sets `secrets: inherit` to ensure
# that secrets are visible from steps in this workflow.
name: "Module Release"

on:
  workflow_call:

jobs:
  release:
    name: "Release"
    runs-on: "ubuntu-latest"
    if: github.repository_owner == 'puppetlabs'

    steps:

      - name: "Checkout"
        uses: "actions/checkout@v4"
        with:
          ref: "${{ github.ref }}"
          clean: true
          fetch-depth: 0

      - name: "Get version"
        id: "get_version"
        run: |
          echo "version=$(jq --raw-output .version metadata.json)" >> $GITHUB_OUTPUT

      - name: "PDK build"
        uses: "docker://puppet/pdk:3.0.0.0"
        with:
          args: "build"

      - name: "Generate release notes"
        run: |
          export GH_HOST=github.com
          gh extension install chelnak/gh-changelog
          gh changelog get --latest > OUTPUT.md
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Create release"
        run: |
          gh release create v${{ steps.get_version.outputs.version }} --title v${{ steps.get_version.outputs.version }} -F OUTPUT.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Publish module"
        uses: "docker://puppet/pdk:3.0.0.0"
        with:
          args: 'release publish --forge-token ${{ secrets.FORGE_API_KEY }} --force'





For more information on Github Actions, visit the Github Actions
            documentation.


For more information on the PDK
release command, visit PDK release command.




Deprecate a module on the Forge


To let your module users know that you are no longer
        maintaining your module, deprecate your module on the Forge.

File a ticket in the FORGE project on the Puppet JIRA
                    site. The ticket must include:


The full name of the
                                    module to be deprecated, such as puppetlabs-apache.
The
                                    reason for the deprecation. The reason is publicly displayed on
                                    the Forge.
A
                                    recommended alternative module or workaround. 



Results


Using the Forge API

Use the Forge API to create, delete, and understand
        your modules.
Create a module release
Use the /v3/releases endpoint in the Forge API to create and publish a new module or a
                release of an existing module. 

Download a module release
Use the /v3/files/{filename} endpoint in the Forge API to download the tarball for an existing
                module. 

Fetch information about a module release
Use the /v3/releases/{release_slug} endpoint in the
                    Forge API to fetch information about your module,
                identified by the module's slug value.

Delete a module release
Use the /v3/releases/{release_slug} endpoint in the
                    Forge API to soft delete a release of your
                module, identified by the module's slug value. A
                deleted release is still downloadable from the /v3/files endpoint,
                but not available in Puppet
Forge.

More information about the Forge API
For more detailed information about the Forge API,
                including parameters, responses, and example code, see the Forge API documentation. 


 




          Was this page helpful?
        
Yes
No







              Don’t fill this out if you’re human: 






Thank you for your feedback!

            Feel free to add a comment or suggestion.
            





Send
Please enter your feedback





              Don’t fill this out if you’re human: 







            We’re sorry to hear that! 
            Please tell us why so we can help.
          

            Enter your feedback and email. This form is sent to the Puppet docs team.
            We ask for your email as we might contact you regarding your feedback.
          

            If you need help with the product itself, visit Puppet Support
            or ask in Puppet Community on Slack.
          

            Feedback:
            






            Email Address:
            






            To learn about how Puppet uses your personal information,
            visit our privacy policy.
          


Send
Please enter your feedback and contact email

          If you leave us your email, we may contact you regarding your feedback.
          For more information on how Puppet uses your personal information, see
          our
          privacy policy.
        





            Don’t fill this out if you’re human: 








    See an issue? Please file a JIRA ticket in our
    [DOCUMENTATION]
      project.
  











Puppet by Perforce gives IT operations teams back their time and offers peace of mind with infrastructure automation that enables security and compliance.






Legal
Privacy Policy
Terms of Use
Security


©  Puppet, Inc., a Perforce company. All rights reserved.




Puppet and other identified trademarks are the property of Puppet, Inc., Perforce Software, Inc., or an affiliate. Such trademarks are claimed and/or registered in the U.S. and other countries and regions. All third-party trademarks are the property of their respective holders. References to third-party trademarks do not imply endorsement or sponsorship of any products or services by the trademark holder. Contact Puppet, Inc., for further details.

