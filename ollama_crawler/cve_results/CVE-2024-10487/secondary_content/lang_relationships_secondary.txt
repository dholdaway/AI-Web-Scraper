Title: Relationships and ordering
URL: https://www.puppet.com/docs/puppet/7/lang_relationships

Puppet.com
Forge
Education


                                    Try Puppet
                                


































        Docs
        






Products
Puppet Enterprise
Open Source Puppet
Bolt
Security Compliance Management
Continuous Delivery
Puppet Development Kit
Puppet DB
Puppet Plugin for VMware



        Support
        






Get
Technical Support Plans
Support Lifecycle Policy
New Puppet Enterprise Customer?



        Community
        






About Puppet
Company
Developer Experience
Community
Puppet Champions
Puppet Test Pilots
Community Calendar
Slack Channel







 









































PRODUCT AND VERSION


      Current product
      










      Current version
      








Puppet  7.34.0

Release notes

Puppet release notes
Puppet  7.34.0Security


Puppet known issues
Puppet Server release notes
Puppet Server known Issues
PuppetDB release notes (link)

Facter release notes
Facter 4.10.0
Facter 4.9.0
Facter 4.8.0
Facter 4.7.1
Facter 4.7.0
Facter 4.6.1
Facter 4.6.0
Facter 4.5.2


Facter known issues
What's new since Puppet 6?
Upgrading from Puppet 6 to Puppet 7

Experimental featuresMsgpack support

Archived documentation



Puppet overview
What is Puppet?
Why use Puppet desired state management?
Key concepts behind Puppet
The Puppet platform 
Puppet platform lifecycle 
Open source Puppet vs Puppet Enterprise (PE)
The Puppet ecosystem
Use cases
Glossary
Navigating the documentation



Set up Puppet

Install Puppet
System requirements
Installing Puppet  
Installing and configuring agents
Manually verify packages
Managing Platform versions



Configure Puppet settings
Puppet settings
Key configuration settings

Puppet's configuration files
puppet.conf: The main config file
environment.conf: Per-environment settings
fileserver.conf: Custom fileserver mount points
puppetdb.conf: PuppetDB server locations
autosign.conf: Basic certificate autosigning 
csr_attributes.yaml: Certificate extensions 
custom_trusted_oid_mapping.yaml: Short names for cert extension OIDs
device.conf: Network hardware access
routes.yaml: Advanced plugin routing


Adding file server mount points
Checking the values of settings
Editing settings on the command line
Configuration Reference



Upgrading
Upgrade Puppet Server

Upgrade agents
Upgrade agents using the puppet_agent module
Upgrade *nix agents
Upgrade Windows agents
Upgrade macOS agents


Upgrade PuppetDB



Environments
About environments
Creating environments
Environment isolation



Directories and files
Code and data directory (codedir)
Config directory (confdir)
Main manifest directory
The modulepath
SSL directory (ssldir)
Cache directory (vardir)


Report reference



Platform components

Puppet Server
About Puppet Server
Deprecated features
Server and agent compatibility
Installing Puppet Server

Configuring Puppet Server
Configuring Puppet Server

Puppet Server configuration files
auth.conf
ca.conf
global.conf
logback.xml
metrics.conf
product.conf
puppetserver.conf
web-routes.conf
webserver.conf


Migrating to the HOCON auth.conf format
Advanced logging configuration
Differing behavior in puppet.conf



Using and extending Puppet Server
Subcommands
Using Ruby gems
Intermediate CA
Infrastructure certificate revocation list (CRL)
External SSL termination

Server metrics
Monitoring Puppet Server metrics
HTTP Client Metrics


Tuning guide
Applying metrics to improve performance
Submitting usage telemetry
Scaling Puppet Server
Restarting Puppet Server"



Developer information
Developer debugging
Running from source
Tracing code events



Puppet Server HTTP API
Puppet Server HTTP API overview
PSON

Puppet v3 API
Catalog
Node
Facts
File Bucket File
File Content
File Metadata
Report



Puppet v4 APICatalog API


CA v1 API
Certificate
Certificate Request
Certificate Status
Certificate Revocation List
Expirations
Certificate Clean


Schemas (JSON)



API endpoints

Metrics API endpoints
v1 metrics
v2 (Jolokia) metrics



Status API endpoints
Services endpoint
Simple endpoint



Administrative API endpoints
Environment cache
JRuby pool



Server-specific Puppet API endpoints
Environment classes
Environment modules
Static file content





Certificate authority and SSL
Puppet Server CA commands
Intermediate CA
Autosigning certificate requests
CSR attributes and certificate extensions
Regenerating certificates in a Puppet deployment
External CA
External SSL termination





Facter  
Facter: CLI
Facter: Core Facts

Custom facts overviewEnvironment facts 

Writing custom facts
External facts
Configuring Facter with facter.conf


PuppetDB

Puppet services and tools
Puppet commands
Running Puppet commands on Windows  

primary Puppet serverAbout Puppet Server

Puppet agent on *nix systems
Puppet agent on Windows
Puppet apply
Puppet device



Puppet reports
Reporting
Report reference
Writing custom report processors
Report format



Life cycle of a Puppet run
Agent-server HTTPS communications
Catalog compilation
Static catalogs 





Using Puppet code
Classifying nodes
Managing environment content with a Puppetfile
Using content from Puppet Forge

Designing system configs (roles and profiles)
The roles and profiles method 
Roles and profiles example 
Designing advanced profiles 
Designing convenient roles 



Separating data (Hiera)
About Hiera  
Getting started with Hiera  
Configuring Hiera
Creating and editing data 
Looking up data with Hiera  
Writing new data backends 

Debugging Hiera
Unexpected values
Common errors


Upgrading to Hiera 5 



Use case examples
Manage NTP
Manage sudo 
Manage DNS
Manage firewall rules
Forge examples





Syntax and settings

The Puppet language
Puppet language overview
Puppet language syntax examples
The Puppet language style guide 
Files and paths on Windows  
Code comments 
Variables
Resources

Resource types
Resource Type Reference (Single-Page)
Built-in types
Optional resource types for Windows
Resource Type: exec
Using exec on Windows  
Resource Type: file
Using file on Windows
Resource Type: filebucket
Resource Type: group
Using user and group on Windows
Resource types overview
Resource Type: notify
Resource Type: package
Using package on Windows  
Resource Type: resources
Resource Type: schedule
Resource Type: service
Using service
Resource Type: stage
Resource Type: tidy
Resource Type: user


Relationships and ordering
Classes
Defined resource types
Bolt tasks
Expressions and operators
Conditional statements and expressions
Function calls
Built-in function reference
Node definitions

Facts and built-in variables
Accessing facts from Puppet code
Built-in variables


Reserved words and acceptable names

Custom resources

Develop types and providers with the Resource APIResource API reference


Low-level method for developing types and providers
Type development
Provider development
Creating resources





Custom functions
Custom functions overview 
Writing custom functions in the Puppet language

Writing custom functions in Ruby
Custom functions in Ruby overview
Ruby function signatures
Using special features in implementation methods
Iterative functions
Refactoring legacy 3.x functions



Deferring a function
Deferred functions overview
Using a template with Deferred values
Write a deferred function to store secrets
Integrations with secret stores





Values, data types, and aliases
Type aliases
Typecasting
Abstract data types
Arrays
Binary
Booleans
Data type syntax
Default
Error data type
Hashes
Numbers
Regular expressions
Resource and class references
Resource types
Sensitive
Strings
Time-related data types
Undef



Templates
Creating templates using Embedded Puppet
Creating templates using Embedded Ruby



Advanced constructs
Iteration and loops
Lambdas
Resource default statements
Resource collectors
Virtual resources
Exported resources
Tags
Run stages



Details of complex behaviors
Containment
Scope
Namespaces and autoloading


Securing sensitive data


Metaparameter reference
Configuration Reference
Built-in function reference

Puppet Man Pages

Core tools
Man Page: puppet agent
Man Page: puppet apply
Man Page: puppet module
Man Page: puppet resource
Man Page: puppet lookup



Occasionally useful
Man Page: puppet config
Man Page: puppet describe
Man Page: puppet device
Man Page: puppet doc
Man Page: puppet help
Man Page: puppet node
Man Page: puppet parser



Niche
Man Page: puppet catalog
Man Page: puppet facts
Man Page: puppet filebucket
Man Page: puppet report







Developing modules

Modules
Modules overview
Plug-ins in modules
Module cheat sheet
Installing and managing modules from the command line
Beginner's guide to writing modules
Module metadata
Documenting modules
Documenting modules with Puppet Strings  
Puppet Strings style guide

Publishing modulesUsing the Forge API

Contributing to Puppet modules


Puppet Development Kit (PDK)
Puppet VSCode extension

PowerShell DSC Resources
Converting DSC Resources
Distributing arbitrary DSC resources
Upgrading Puppet DSC modules 
Troubleshooting DSC Resources 


Ruby API for developing extensions


Relationships and ordering

 Resources are included and applied in the order they are defined in their manifest,
      but only if the resource has no implicit relationship with another resource, as this can
      affect the declared order. To manage a group of resources in a specific order, explicitly
      declare such relationships with relationship metaparameters, chaining arrows, and the require function.
To override Puppet's default manifest ordering, declare an explicit
            relationship between resources. All relationships cause Puppet to manage specific resources before other
            resources. Relationships are not limited by evaluation-order; you can declare a
            relationship with a resource before that resource has been declared.
Refreshing and notification
Some resource types can refresh when one of their dependencies changes. For example,
            some services must restart when their configuration files change, so service resources can refresh by restarting the service. 
The built-in resource types that can refresh are service, exec, and package. For specific details about these types, see the resource reference.
 To specify that a resource must refresh when a related resource changes, create a
            notifying relationship with the subscribe or notify metaparameters or the notification chaining arrow
               (~>). When a resources changes, it sends a refresh
            event to any resources that subscribe to it. Those resources that are subscribed receive
            the refresh event.
When receiving refresh events: 

If a resource gets a refresh event during a run, and its resource type has a
                     refresh action, it performs that action.


If a resource gets a refresh event, but its resource type cannot refresh,
                     nothing happens.


If a class or defined resource gets a refresh event, every resource it contains
                     also gets a refresh event.


A resource can perform its refresh action up to once per run. If it receives
                     multiple refresh events, they're combined, and the resource refreshes only
                     once.



 When sending refresh events: 

If a resource is not in its desired state, and Puppet makes changes to it during a run, it sends
                     a refresh event to any subscribed resources. 


If a resource performs its refresh action during a run, it sends a refresh
                     event to any subscribed resources.


If Puppet changes or refreshes any resource in a
                     class or defined resource, that class or defined resource sends a refresh event
                     to any subscribed resources. 



If non-operational (no-op) mode is enabled: 

The resource does not refresh when it receives a refresh event. Instead, Puppet logs a message stating what would have
                     happened. 


The resource does not send refresh events to subscribed resources. Instead, Puppet logs messages stating what would have
                     happened to any resources further down the subscription chain. 

For more information about refresh behavior, see the types
               documentation.


Automatic relationships
Certain resource types can have automatic relationships with other resources, using
            autorequire, autonotify, autobefore, or autosubscribe. This creates an ordering
            relationship without you explicitly stating one.

Puppet establishes automatic relationships between types
            and resources when it applies a catalog. It searches the catalog for any resources that
            match certain rules and processes them in the correct order, sending refresh events if
            necessary. If any explicit relationship, such as those created by chaining arrows,
            conflicts with an automatic relationship, the explicit relationship take precedence.
         

Missing dependencies
If one of the resources in a relationship is never declared, compilation
            fails with one of the following errors: 

Could not find dependency <OTHER RESOURCE> for
                     <RESOURCE>


Could not find resource '<OTHER RESOURCE>' for relationship on
                     '<RESOURCE>




Failed dependencies 
If Puppet fails to apply the prior resource in a
            relationship, it skips the subsequent resource and log the following messages:
            notice: <RESOURCE>: Dependency <OTHER RESOURCE> has failures: true warning: <RESOURCE>: Skipping because of failed dependenciesIt
            then continues to apply any unrelated resources. Any resources that depend on the
            skipped resource are also skipped. This helps prevent an inconsistent system state,
            rather than attempting to apply a resource that might have broken prerequisites.

Dependency cycles
If two or more resources require each other in a loop, Puppet compiles the catalog but won’t be able to apply it.
               Puppet logs an error like the following, and attempts
            to help identify the
            cycle:err: Could not apply complete catalog: Found 1 dependency cycle:
(<RESOURCE> => <OTHER RESOURCE> => <RESOURCE>)
Try the '--graph' option and opening the resulting '.dot' file in OmniGraffle or GraphVizTo
            locate the directory containing the graph files, run puppet agent
               --configprint graphdir.



Related informationContainment

Relationship metaparameters

 You can use certain metaparameters to establish
    relationships by setting any of them as an attribute in any resource.

The following video gives you an overview of metaparameters:



Set the value of any relationship metaparameter to either a resource
        reference or an array of references that point to one or more target resources: 

before: Applies a resource before the target resource.


require: Applies
              a resource after the target resource.


notify: Applies a
              resource before the target resource. The target resource refreshes if the notifying
              resource changes.


subscribe:
              Applies a resource after the target resource. The subscribing resource refreshes if
              the target resource changes.



If two resources need to happen in order, you can either put a
          before attribute in the prior one or a require attribute in the
        subsequent one; either approach creates the same relationship. The same is true of
          notify and subscribe.
The two examples below create the same ordering relationship, ensuring
        that the openssh-server package is managed
        before the sshd_config file: 
package { 'openssh-server':
  ensure => present,
  before => File['/etc/ssh/sshd_config'],
}


file { '/etc/ssh/sshd_config':
  ensure  => file,
  mode    => '0600',
  source  => 'puppet:///modules/sshd/sshd_config',
  require => Package['openssh-server'],
}


The two examples below create the same notifying relationship, so that
        if Puppet changes the sshd_config file, it sends a notification to the sshd service: 
file { '/etc/ssh/sshd_config':
  ensure => file,
  mode   => '0600',
  source => 'puppet:///modules/sshd/sshd_config',
  notify => Service['sshd'],
}


service { 'sshd':
  ensure    => running,
  enable    => true,
  subscribe => File['/etc/ssh/sshd_config'],
}


 Because an array of resource references can contain resources of
        differing types, these two examples also create the same ordering relationship. In both
        examples, Puppet manages the openssh-server package and the sshd_config file before it manages the sshd service. 
service { 'sshd':
  ensure  => running,
  require => [
    Package['openssh-server'],
    File['/etc/ssh/sshd_config'],
  ],
}


package { 'openssh-server':
  ensure => present,
  before => Service['sshd'],
}

file { '/etc/ssh/sshd_config':
  ensure => file,
  mode   => '0600',
  source => 'puppet:///modules/sshd/sshd_config',
  before => Service['sshd'],
}





Related information
Resources
Resource and class references
The Array data type


Chaining arrows

You can create relationships between resources or groups of
    resources using the -> and ~>
    operators.
The ordering arrow is a hyphen and a
        greater-than sign (->).
        It applies the resource on the left before the resource on the right.
The notifying arrow is a tilde and a greater-than sign (~>). It applies the resource on the left first.
        If the left-hand resource changes, the right-hand resource refreshes.
In this example, Puppet applies configuration to the
          ntp.conf file resource and notifies the
          ntpd service resource if there are any
        changes.
        File['/etc/ntp.conf'] ~> Service['ntpd']



Note:  When possible, use relationship metaparameters, not chaining
          arrows. Metaparameters are more explicit and easier to maintain. See the Puppet language style guide for information on when and how to use chaining
          arrows. 

Operands
The chaining arrows accept the following kinds of operands on either side of the arrow:

Resource references, including multi-resource references.
Arrays of resource references.

Resource declarations.

Resource collectors.

You can link operands to apply a series of relationships and notifications. In this
        example, Puppet applies configuration to the package,
        notifies the file resource if there are changes, and then, if there are resulting changes to
        the file resouce, Puppet notifies the service resource:
        Package['ntp'] -> File['/etc/ntp.conf'] ~> Service['ntpd']

Resource declarations can be chained. That means you can use chaining arrows to make Puppet apply a section of code in the order that it
        is written. This example applies configuration to the package, the file, and the service, in
        that order, with each related resource notifying the next of any changes:
        # first:
package { 'openssh-server':
  ensure => present,
} # and then:
-> file { '/etc/ssh/sshd_config':
  ensure => file,
  mode   => '0600',
  source => 'puppet:///modules/sshd/sshd_config',
} # and then:
~> service { 'sshd':
  ensure => running,
  enable => true,
}

Collectors can also be chained, so you can create relationships between many resources at
        one time. This example applies all Yum repository resources before applying any package
        resources, which protects any packages that rely on custom repositorie :
        Yumrepo <| |> -> Package <| |>


Capturing resource references for generated resources
In Puppet, the value of a resource declaration is
        a reference to the resource it creates.
This is useful if you're automatically creating resources whose titles you can't predict:
        use the iteration functions to declare several resources at once or use an array of strings
        as a resource title. If you assign the resulting resource references to a variable, you can
        then use them in chaining statements without ever knowing the final title of the affected
        resources.
For example:

The map function iterates over its arguments and returns
          an array of values, with each value produced by the last expression in the block. If that
          last expression is a resource declaration, map produces an
          array of resource references, which you could then use as an operand for a chaining
          arrow.
For a resource declaration whose title is an array, the value is itself an array of
          resource references that you can assign to a variable and use in a chaining
          statement.


Cautions when chaining resource collectors 


Chains can create dependency cycles.
Chained collectors can cause huge dependency cycles; be careful when using them.
              They can also be dangerous when used with virtual resources, which are implicitly
              realized by collectors.
Chains can break.
Although you can usually chain many resources or collectors together (File['one'] -> File['two'] -> File['three']), the
              chain can break if it includes a collector whose search expression doesn't match any
              resources.
Implicit properties aren't searchable.
Collectors can search only on attributes present in the manifests; they cannot see
              properties that are automatically set or are read from the target system. For example,
              the chain Yumrepo <| |> -> Package <| provider ==
                yum |>, creates only relationships with packages whose provider attribute is explicitly set to yum in the manifests. It would not affect packages that
              didn't specify a provider but use Yum because it's the operating system's default
              provider.



Reversed forms
Both chaining arrows have a reversed form
          (<- and <~). As implied by their shape,
        these forms operate in reverse, causing the resource on their right to be applied before the
        resource on their left. Avoid these reversed forms, as they are confusing and difficult to
        notice.



Related information
Resource and class references
Resources
Resource collectors
Lambdas
Virtual resources


The require
    function

Use the require function to declare a class and make it a dependency of
    the surrounding container.
For example:
        class wordpress {
  require apache
  require mysql
  ...
}
The above example causes every resource in the apache and mysql
        classes to be applied before any of the resources in the wordpress class. 
Unlike the relationship
        metaparameters and chaining arrows, the require function does not have a reciprocal form or a notifying form. However,
        you can create more complex behavior by combining include and chaining arrows inside a class definition. This example notifies and
        restarts every service in the apache::ssl
        class if any of the SSL certificates on the node
        change:class apache::ssl {
  include site::certificates
  Class['site::certificates'] ~> Class['apache::ssl']
}


 




          Was this page helpful?
        
Yes
No







              Don’t fill this out if you’re human: 






Thank you for your feedback!

            Feel free to add a comment or suggestion.
            





Send
Please enter your feedback





              Don’t fill this out if you’re human: 







            We’re sorry to hear that! 
            Please tell us why so we can help.
          

            Enter your feedback and email. This form is sent to the Puppet docs team.
            We ask for your email as we might contact you regarding your feedback.
          

            If you need help with the product itself, visit Puppet Support
            or ask in Puppet Community on Slack.
          

            Feedback:
            






            Email Address:
            






            To learn about how Puppet uses your personal information,
            visit our privacy policy.
          


Send
Please enter your feedback and contact email

          If you leave us your email, we may contact you regarding your feedback.
          For more information on how Puppet uses your personal information, see
          our
          privacy policy.
        





            Don’t fill this out if you’re human: 








    See an issue? Please file a JIRA ticket in our
    [DOCUMENTATION]
      project.
  











Puppet by Perforce gives IT operations teams back their time and offers peace of mind with infrastructure automation that enables security and compliance.






Legal
Privacy Policy
Terms of Use
Security


©  Puppet, Inc., a Perforce company. All rights reserved.




Puppet and other identified trademarks are the property of Puppet, Inc., Perforce Software, Inc., or an affiliate. Such trademarks are claimed and/or registered in the U.S. and other countries and regions. All third-party trademarks are the property of their respective holders. References to third-party trademarks do not imply endorsement or sponsorship of any products or services by the trademark holder. Contact Puppet, Inc., for further details.

