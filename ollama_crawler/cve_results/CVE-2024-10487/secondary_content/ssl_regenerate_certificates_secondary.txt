Title: Regenerating certificates in a Puppet deployment
URL: https://www.puppet.com/docs/puppet/7/ssl_regenerate_certificates

Puppet.com
Forge
Education


                                    Try Puppet
                                


































        Docs
        






Products
Puppet Enterprise
Open Source Puppet
Bolt
Security Compliance Management
Continuous Delivery
Puppet Development Kit
Puppet DB
Puppet Plugin for VMware



        Support
        






Get
Technical Support Plans
Support Lifecycle Policy
New Puppet Enterprise Customer?



        Community
        






About Puppet
Company
Developer Experience
Community
Puppet Champions
Puppet Test Pilots
Community Calendar
Slack Channel







 









































PRODUCT AND VERSION


      Current product
      










      Current version
      








Puppet  7.34.0

Release notes

Puppet release notes
Puppet  7.34.0Security


Puppet known issues
Puppet Server release notes
Puppet Server known Issues
PuppetDB release notes (link)

Facter release notes
Facter 4.10.0
Facter 4.9.0
Facter 4.8.0
Facter 4.7.1
Facter 4.7.0
Facter 4.6.1
Facter 4.6.0
Facter 4.5.2


Facter known issues
What's new since Puppet 6?
Upgrading from Puppet 6 to Puppet 7

Experimental featuresMsgpack support

Archived documentation



Puppet overview
What is Puppet?
Why use Puppet desired state management?
Key concepts behind Puppet
The Puppet platform 
Puppet platform lifecycle 
Open source Puppet vs Puppet Enterprise (PE)
The Puppet ecosystem
Use cases
Glossary
Navigating the documentation



Set up Puppet

Install Puppet
System requirements
Installing Puppet  
Installing and configuring agents
Manually verify packages
Managing Platform versions



Configure Puppet settings
Puppet settings
Key configuration settings

Puppet's configuration files
puppet.conf: The main config file
environment.conf: Per-environment settings
fileserver.conf: Custom fileserver mount points
puppetdb.conf: PuppetDB server locations
autosign.conf: Basic certificate autosigning 
csr_attributes.yaml: Certificate extensions 
custom_trusted_oid_mapping.yaml: Short names for cert extension OIDs
device.conf: Network hardware access
routes.yaml: Advanced plugin routing


Adding file server mount points
Checking the values of settings
Editing settings on the command line
Configuration Reference



Upgrading
Upgrade Puppet Server

Upgrade agents
Upgrade agents using the puppet_agent module
Upgrade *nix agents
Upgrade Windows agents
Upgrade macOS agents


Upgrade PuppetDB



Environments
About environments
Creating environments
Environment isolation



Directories and files
Code and data directory (codedir)
Config directory (confdir)
Main manifest directory
The modulepath
SSL directory (ssldir)
Cache directory (vardir)


Report reference



Platform components

Puppet Server
About Puppet Server
Deprecated features
Server and agent compatibility
Installing Puppet Server

Configuring Puppet Server
Configuring Puppet Server

Puppet Server configuration files
auth.conf
ca.conf
global.conf
logback.xml
metrics.conf
product.conf
puppetserver.conf
web-routes.conf
webserver.conf


Migrating to the HOCON auth.conf format
Advanced logging configuration
Differing behavior in puppet.conf



Using and extending Puppet Server
Subcommands
Using Ruby gems
Intermediate CA
Infrastructure certificate revocation list (CRL)
External SSL termination

Server metrics
Monitoring Puppet Server metrics
HTTP Client Metrics


Tuning guide
Applying metrics to improve performance
Submitting usage telemetry
Scaling Puppet Server
Restarting Puppet Server"



Developer information
Developer debugging
Running from source
Tracing code events



Puppet Server HTTP API
Puppet Server HTTP API overview
PSON

Puppet v3 API
Catalog
Node
Facts
File Bucket File
File Content
File Metadata
Report



Puppet v4 APICatalog API


CA v1 API
Certificate
Certificate Request
Certificate Status
Certificate Revocation List
Expirations
Certificate Clean


Schemas (JSON)



API endpoints

Metrics API endpoints
v1 metrics
v2 (Jolokia) metrics



Status API endpoints
Services endpoint
Simple endpoint



Administrative API endpoints
Environment cache
JRuby pool



Server-specific Puppet API endpoints
Environment classes
Environment modules
Static file content





Certificate authority and SSL
Puppet Server CA commands
Intermediate CA
Autosigning certificate requests
CSR attributes and certificate extensions
Regenerating certificates in a Puppet deployment
External CA
External SSL termination





Facter  
Facter: CLI
Facter: Core Facts

Custom facts overviewEnvironment facts 

Writing custom facts
External facts
Configuring Facter with facter.conf


PuppetDB

Puppet services and tools
Puppet commands
Running Puppet commands on Windows  

primary Puppet serverAbout Puppet Server

Puppet agent on *nix systems
Puppet agent on Windows
Puppet apply
Puppet device



Puppet reports
Reporting
Report reference
Writing custom report processors
Report format



Life cycle of a Puppet run
Agent-server HTTPS communications
Catalog compilation
Static catalogs 





Using Puppet code
Classifying nodes
Managing environment content with a Puppetfile
Using content from Puppet Forge

Designing system configs (roles and profiles)
The roles and profiles method 
Roles and profiles example 
Designing advanced profiles 
Designing convenient roles 



Separating data (Hiera)
About Hiera  
Getting started with Hiera  
Configuring Hiera
Creating and editing data 
Looking up data with Hiera  
Writing new data backends 

Debugging Hiera
Unexpected values
Common errors


Upgrading to Hiera 5 



Use case examples
Manage NTP
Manage sudo 
Manage DNS
Manage firewall rules
Forge examples





Syntax and settings

The Puppet language
Puppet language overview
Puppet language syntax examples
The Puppet language style guide 
Files and paths on Windows  
Code comments 
Variables
Resources

Resource types
Resource Type Reference (Single-Page)
Built-in types
Optional resource types for Windows
Resource Type: exec
Using exec on Windows  
Resource Type: file
Using file on Windows
Resource Type: filebucket
Resource Type: group
Using user and group on Windows
Resource types overview
Resource Type: notify
Resource Type: package
Using package on Windows  
Resource Type: resources
Resource Type: schedule
Resource Type: service
Using service
Resource Type: stage
Resource Type: tidy
Resource Type: user


Relationships and ordering
Classes
Defined resource types
Bolt tasks
Expressions and operators
Conditional statements and expressions
Function calls
Built-in function reference
Node definitions

Facts and built-in variables
Accessing facts from Puppet code
Built-in variables


Reserved words and acceptable names

Custom resources

Develop types and providers with the Resource APIResource API reference


Low-level method for developing types and providers
Type development
Provider development
Creating resources





Custom functions
Custom functions overview 
Writing custom functions in the Puppet language

Writing custom functions in Ruby
Custom functions in Ruby overview
Ruby function signatures
Using special features in implementation methods
Iterative functions
Refactoring legacy 3.x functions



Deferring a function
Deferred functions overview
Using a template with Deferred values
Write a deferred function to store secrets
Integrations with secret stores





Values, data types, and aliases
Type aliases
Typecasting
Abstract data types
Arrays
Binary
Booleans
Data type syntax
Default
Error data type
Hashes
Numbers
Regular expressions
Resource and class references
Resource types
Sensitive
Strings
Time-related data types
Undef



Templates
Creating templates using Embedded Puppet
Creating templates using Embedded Ruby



Advanced constructs
Iteration and loops
Lambdas
Resource default statements
Resource collectors
Virtual resources
Exported resources
Tags
Run stages



Details of complex behaviors
Containment
Scope
Namespaces and autoloading


Securing sensitive data


Metaparameter reference
Configuration Reference
Built-in function reference

Puppet Man Pages

Core tools
Man Page: puppet agent
Man Page: puppet apply
Man Page: puppet module
Man Page: puppet resource
Man Page: puppet lookup



Occasionally useful
Man Page: puppet config
Man Page: puppet describe
Man Page: puppet device
Man Page: puppet doc
Man Page: puppet help
Man Page: puppet node
Man Page: puppet parser



Niche
Man Page: puppet catalog
Man Page: puppet facts
Man Page: puppet filebucket
Man Page: puppet report







Developing modules

Modules
Modules overview
Plug-ins in modules
Module cheat sheet
Installing and managing modules from the command line
Beginner's guide to writing modules
Module metadata
Documenting modules
Documenting modules with Puppet Strings  
Puppet Strings style guide

Publishing modulesUsing the Forge API

Contributing to Puppet modules


Puppet Development Kit (PDK)
Puppet VSCode extension

PowerShell DSC Resources
Converting DSC Resources
Distributing arbitrary DSC resources
Upgrading Puppet DSC modules 
Troubleshooting DSC Resources 


Ruby API for developing extensions


Regenerating certificates in a Puppet deployment

In some cases, you might need to regenerate the
        certificates and security credentials (private and public keys) that are generated by Puppetâ€™s built-in PKI systems.
For example, you might have a Puppet
            primary server you need to move to a different network in your infrastructure, or you might have
            experienced a security vulnerability that makes existing credentials untrustworthy.


Tip: There are other, more automated ways of doing this. We recommend using
                    Bolt to regenerate certs when needed. See the
                    Bolt documentation for more information. There is also a
                supported ca_extend module, which you can use to
                extend the expiry date of a certificate authority (CA).

Important: The information on this page describes the
                steps for regenerating certs in an open source Puppet
                deployment. If you use Puppet Enterprise do not use
                the information on this page, as it leaves you with an incomplete replacement and
                non-functional deployment. Instead, PE customers
                must refer to one of the following pages: 

Regenerating certificatesPE deployments














If your goal is to...


Do this...





Regenerate an agentâ€™s certificate


Clear and
                                        regenerate certs for Puppet
                                        agents




Fix a compromised or damaged certificate
                                authority


Regenerate
                                        the CA and all certificates




Completely regenerate all Puppet deployment
                                certificates


Regenerate
                                        the CA and all certificates




Add DNS alt-names or other certificate
                                extensions to your existing Puppet
                                primary server

Regenerate the agent certificate of your Puppet primary server and add DNS
                                    alt-names or other certificates







Regenerate the agent certificate of your Puppet primary server and add DNS alt-names or other certificate
        extensions

This option preserves the primary server/agent relationship and
        lets you add DNS alt-names or certificate extensions to your existing primary server.


 Revoke the Puppet
                    primary serverâ€™s certificate and clean the CA files pertaining to it. Note that the
                    agents wonâ€™t be able to connect to the primary server until all of the following steps
                    are finished.
puppetserver ca clean --certname <CERTNAME_OF_YOUR_SERVER>


Remove the agent-specific copy of the public key,
                    private key, and certificate-signing request  pertaining to the
                    certificate:
puppet ssl clean


Stop the Puppet
                    primary server service:

puppet resource service puppetserver ensure=stopped

Note: The CA and server run in the same
                                primary server so this also stops the CA.



After youâ€™ve stopped the primary server and CA service,
                    create a certificate signed by the CA and add DNS alt names (comma
                    separated):

 puppetserver ca generate --certname <CERTNAME> --subject-alt-names <DNS ALT NAMES> --ca-client

Note:

If you donâ€™t want to add DNS alt names to your primary server, omit
                                the --subject-alt-names <DNS ALT
                                    NAMES> option from the command above.
Although this particular use of the generate
                                command requires you to stop puppetserver service,
                                all other uses of this command require the service to be
                                running.
If the tool cannot determine the status of the server, but you know
                                the server is offline, you can use the --force option to run the command without checking
                                server status.





Restart the Puppet
                    primary server service:
puppet resource service puppetserver ensure=running




Regenerate the CA and all certificates


CAUTION: This process destroys the certificate authority and
                    all other certificates. It is meant for use in the event of a total compromise
                    of your site, or some other unusual circumstance. If you want to preserve the
                    primary server/agent relationship, regenerate the
                        agent certificate of your Puppet
                        primary server. If you just need to replace a few agent certificates, clear
                        and regenerate certs for Puppet
                    agents.


Step 1: Clear and regenerate certs on your primary Puppet server


On the primary server hosting the CA:


Back up the SSL
                    directory, which is in /etc/puppetlabs/puppet/ssl/. If something goes
                    wrong, you can restore this directory so your deployment can stay functional.
                    However, if you needed to regenerate your certs for security reasons and
                    couldnâ€™t, get some assistance as soon as possible so you can keep your site
                    secure.


Stop the agent service:

sudo puppet resource service puppet ensure=stopped




Stop the primary server service.

For Puppet Server, run:
                        sudo puppet resource service puppetserver ensure=stopped




Delete the SSL directory:

sudo rm -r /etc/puppetlabs/puppet/ssl



Regenerate the CA and primary server's cert:


sudo puppetserver ca setup



You will see this message: Notice: Signed
                            certificate request for ca.



Start the primary server  service by running: 


sudo puppet resource service puppetserver ensure=running




Start the Puppet
                    agent service by running this command:

sudo puppet resource service puppet ensure=running




Results
At this point: 
You have a new CA certificate and
                            key.
Your primary server has a certificate from the new CA, and it can field new certificate requests. 
The primary server  rejects any requests for configuration catalogs from nodes that havenâ€™t
                            replaced their certificates. At this point, it is all of them except
                            itself. 
When using any extensions that rely on Puppet certificates, like
                                PuppetDB, the primary server wonâ€™t be
                            able to communicate with them. Consequently, it might not be able to
                            serve catalogs, even to agents that do have new certificates. 




Step 2: Clear and regenerate certs for any
                                extension

You might be using an extension, like PuppetDB or MCollective, to enhance Puppet. These extensions probably use certificates from Puppetâ€™s CA in order to communicate securely with the primary Puppet server. For each extension like this, youâ€™ll need to
    regenerate the certificates it uses. 
Many tools have scripts or documentation to
                                                help you set up SSL, and you can often just re-run
                                                the setup instructions.

PuppetDB

We recommend PuppetDB users first follow the instructions in
        Step 3: Clear and regenerate certs for agents, below, because PuppetDB re-uses Puppet agentsâ€™
        certificates. After that, restart the PuppetDB service. See
          Redo SSL setup after changing certificates for more information.
      



Step 3: Clear and regenerate certs for Puppet agents

To replace the certs on agents, youâ€™ll need to
                                log into each agent node and do the following steps.


Stop the agent
                                                  service. On *nix:

sudo puppet resource service puppet ensure=stoppedOn
                                                  Windows, with
                                                  Administrator
                                                  privileges: puppet resource service puppet ensure=stopped



Locate Puppetâ€™s SSL
                                                  directory and delete its
                                                  contents.
The SSL directory can be
                                                  determined by running puppet config print
                                                  ssldir --section agent



Restart the
                                                  agent service. On *nix:

sudo puppet resource service puppet ensure=runningOn
                                                  Windows, with
                                                  Administrator
                                                  privileges:puppet resource service puppet ensure=running

When the agent starts, it generates keys and requests a new certificate from the CA primary
            server.


If you are not using autosigning, log in to the CA primary server and sign each agent
          nodeâ€™s certificate request.

To view pending requests,
            run:sudo puppetserver ca list

To sign requests,
            run:sudo puppetserver ca sign --certname <NAME>



After an agent nodeâ€™s new certificate is signed, it's retrieved within a few minutes
            and a Puppet run starts.



Results
After you have regenerated all agentsâ€™
                                                  certificates, everything will be fully functional
                                                  under the new CA.


Note: You can
                                                  achieve the same results by turning these steps
                                                  into Bolt tasks or
                                                  plans. See the Bolt documentation for
                                                  more information.


 




          Was this page helpful?
        
Yes
No







              Donâ€™t fill this out if youâ€™re human: 






Thank you for your feedback!

            Feel free to add a comment or suggestion.
            





Send
Please enter your feedback





              Donâ€™t fill this out if youâ€™re human: 







            Weâ€™re sorry to hear that! 
            Please tell us why so we can help.
          

            Enter your feedback and email. This form is sent to the Puppet docs team.
            We ask for your email as we might contact you regarding your feedback.
          

            If you need help with the product itself, visit Puppet Support
            or ask in Puppet Community on Slack.
          

            Feedback:
            






            Email Address:
            






            To learn about how Puppet uses your personal information,
            visit our privacy policy.
          


Send
Please enter your feedback and contact email

          If you leave us your email, we may contact you regarding your feedback.
          For more information on how Puppet uses your personal information, see
          our
          privacy policy.
        





            Donâ€™t fill this out if youâ€™re human: 








    See an issue? Please file a JIRA ticket in our
    [DOCUMENTATION]
      project.
  











Puppet by Perforce gives IT operations teams back their time and offers peace of mind with infrastructure automation that enables security and compliance.






Legal
Privacy Policy
Terms of Use
Security


Â©  Puppet, Inc., a Perforce company. All rights reserved.




Puppet and other identified trademarks are the property of Puppet, Inc., Perforce Software, Inc., or an affiliate. Such trademarks are claimed and/or registered in the U.S. and other countries and regions. All third-party trademarks are the property of their respective holders. References to third-party trademarks do not imply endorsement or sponsorship of any products or services by the trademark holder. Contact Puppet, Inc., for further details.

