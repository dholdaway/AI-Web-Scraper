Title: Man Page: puppet agent
URL: https://www.puppet.com/docs/puppet/7/man/agent

Puppet.com
Forge
Education


                                    Try Puppet
                                


































        Docs
        






Products
Puppet Enterprise
Open Source Puppet
Bolt
Security Compliance Management
Continuous Delivery
Puppet Development Kit
Puppet DB
Puppet Plugin for VMware



        Support
        






Get
Technical Support Plans
Support Lifecycle Policy
New Puppet Enterprise Customer?



        Community
        






About Puppet
Company
Developer Experience
Community
Puppet Champions
Puppet Test Pilots
Community Calendar
Slack Channel







 









































PRODUCT AND VERSION


      Current product
      










      Current version
      








Puppet  7.34.0

Release notes

Puppet release notes
Puppet  7.34.0Security


Puppet known issues
Puppet Server release notes
Puppet Server known Issues
PuppetDB release notes (link)

Facter release notes
Facter 4.10.0
Facter 4.9.0
Facter 4.8.0
Facter 4.7.1
Facter 4.7.0
Facter 4.6.1
Facter 4.6.0
Facter 4.5.2


Facter known issues
What's new since Puppet 6?
Upgrading from Puppet 6 to Puppet 7

Experimental featuresMsgpack support

Archived documentation



Puppet overview
What is Puppet?
Why use Puppet desired state management?
Key concepts behind Puppet
The Puppet platform 
Puppet platform lifecycle 
Open source Puppet vs Puppet Enterprise (PE)
The Puppet ecosystem
Use cases
Glossary
Navigating the documentation



Set up Puppet

Install Puppet
System requirements
Installing Puppet  
Installing and configuring agents
Manually verify packages
Managing Platform versions



Configure Puppet settings
Puppet settings
Key configuration settings

Puppet's configuration files
puppet.conf: The main config file
environment.conf: Per-environment settings
fileserver.conf: Custom fileserver mount points
puppetdb.conf: PuppetDB server locations
autosign.conf: Basic certificate autosigning 
csr_attributes.yaml: Certificate extensions 
custom_trusted_oid_mapping.yaml: Short names for cert extension OIDs
device.conf: Network hardware access
routes.yaml: Advanced plugin routing


Adding file server mount points
Checking the values of settings
Editing settings on the command line
Configuration Reference



Upgrading
Upgrade Puppet Server

Upgrade agents
Upgrade agents using the puppet_agent module
Upgrade *nix agents
Upgrade Windows agents
Upgrade macOS agents


Upgrade PuppetDB



Environments
About environments
Creating environments
Environment isolation



Directories and files
Code and data directory (codedir)
Config directory (confdir)
Main manifest directory
The modulepath
SSL directory (ssldir)
Cache directory (vardir)


Report reference



Platform components

Puppet Server
About Puppet Server
Deprecated features
Server and agent compatibility
Installing Puppet Server

Configuring Puppet Server
Configuring Puppet Server

Puppet Server configuration files
auth.conf
ca.conf
global.conf
logback.xml
metrics.conf
product.conf
puppetserver.conf
web-routes.conf
webserver.conf


Migrating to the HOCON auth.conf format
Advanced logging configuration
Differing behavior in puppet.conf



Using and extending Puppet Server
Subcommands
Using Ruby gems
Intermediate CA
Infrastructure certificate revocation list (CRL)
External SSL termination

Server metrics
Monitoring Puppet Server metrics
HTTP Client Metrics


Tuning guide
Applying metrics to improve performance
Submitting usage telemetry
Scaling Puppet Server
Restarting Puppet Server"



Developer information
Developer debugging
Running from source
Tracing code events



Puppet Server HTTP API
Puppet Server HTTP API overview
PSON

Puppet v3 API
Catalog
Node
Facts
File Bucket File
File Content
File Metadata
Report



Puppet v4 APICatalog API


CA v1 API
Certificate
Certificate Request
Certificate Status
Certificate Revocation List
Expirations
Certificate Clean


Schemas (JSON)



API endpoints

Metrics API endpoints
v1 metrics
v2 (Jolokia) metrics



Status API endpoints
Services endpoint
Simple endpoint



Administrative API endpoints
Environment cache
JRuby pool



Server-specific Puppet API endpoints
Environment classes
Environment modules
Static file content





Certificate authority and SSL
Puppet Server CA commands
Intermediate CA
Autosigning certificate requests
CSR attributes and certificate extensions
Regenerating certificates in a Puppet deployment
External CA
External SSL termination





Facter  
Facter: CLI
Facter: Core Facts

Custom facts overviewEnvironment facts 

Writing custom facts
External facts
Configuring Facter with facter.conf


PuppetDB

Puppet services and tools
Puppet commands
Running Puppet commands on Windows  

primary Puppet serverAbout Puppet Server

Puppet agent on *nix systems
Puppet agent on Windows
Puppet apply
Puppet device



Puppet reports
Reporting
Report reference
Writing custom report processors
Report format



Life cycle of a Puppet run
Agent-server HTTPS communications
Catalog compilation
Static catalogs 





Using Puppet code
Classifying nodes
Managing environment content with a Puppetfile
Using content from Puppet Forge

Designing system configs (roles and profiles)
The roles and profiles method 
Roles and profiles example 
Designing advanced profiles 
Designing convenient roles 



Separating data (Hiera)
About Hiera  
Getting started with Hiera  
Configuring Hiera
Creating and editing data 
Looking up data with Hiera  
Writing new data backends 

Debugging Hiera
Unexpected values
Common errors


Upgrading to Hiera 5 



Use case examples
Manage NTP
Manage sudo 
Manage DNS
Manage firewall rules
Forge examples





Syntax and settings

The Puppet language
Puppet language overview
Puppet language syntax examples
The Puppet language style guide 
Files and paths on Windows  
Code comments 
Variables
Resources

Resource types
Resource Type Reference (Single-Page)
Built-in types
Optional resource types for Windows
Resource Type: exec
Using exec on Windows  
Resource Type: file
Using file on Windows
Resource Type: filebucket
Resource Type: group
Using user and group on Windows
Resource types overview
Resource Type: notify
Resource Type: package
Using package on Windows  
Resource Type: resources
Resource Type: schedule
Resource Type: service
Using service
Resource Type: stage
Resource Type: tidy
Resource Type: user


Relationships and ordering
Classes
Defined resource types
Bolt tasks
Expressions and operators
Conditional statements and expressions
Function calls
Built-in function reference
Node definitions

Facts and built-in variables
Accessing facts from Puppet code
Built-in variables


Reserved words and acceptable names

Custom resources

Develop types and providers with the Resource APIResource API reference


Low-level method for developing types and providers
Type development
Provider development
Creating resources





Custom functions
Custom functions overview 
Writing custom functions in the Puppet language

Writing custom functions in Ruby
Custom functions in Ruby overview
Ruby function signatures
Using special features in implementation methods
Iterative functions
Refactoring legacy 3.x functions



Deferring a function
Deferred functions overview
Using a template with Deferred values
Write a deferred function to store secrets
Integrations with secret stores





Values, data types, and aliases
Type aliases
Typecasting
Abstract data types
Arrays
Binary
Booleans
Data type syntax
Default
Error data type
Hashes
Numbers
Regular expressions
Resource and class references
Resource types
Sensitive
Strings
Time-related data types
Undef



Templates
Creating templates using Embedded Puppet
Creating templates using Embedded Ruby



Advanced constructs
Iteration and loops
Lambdas
Resource default statements
Resource collectors
Virtual resources
Exported resources
Tags
Run stages



Details of complex behaviors
Containment
Scope
Namespaces and autoloading


Securing sensitive data


Metaparameter reference
Configuration Reference
Built-in function reference

Puppet Man Pages

Core tools
Man Page: puppet agent
Man Page: puppet apply
Man Page: puppet module
Man Page: puppet resource
Man Page: puppet lookup



Occasionally useful
Man Page: puppet config
Man Page: puppet describe
Man Page: puppet device
Man Page: puppet doc
Man Page: puppet help
Man Page: puppet node
Man Page: puppet parser



Niche
Man Page: puppet catalog
Man Page: puppet facts
Man Page: puppet filebucket
Man Page: puppet report







Developing modules

Modules
Modules overview
Plug-ins in modules
Module cheat sheet
Installing and managing modules from the command line
Beginner's guide to writing modules
Module metadata
Documenting modules
Documenting modules with Puppet Strings  
Puppet Strings style guide

Publishing modulesUsing the Forge API

Contributing to Puppet modules


Puppet Development Kit (PDK)
Puppet VSCode extension

PowerShell DSC Resources
Converting DSC Resources
Distributing arbitrary DSC resources
Upgrading Puppet DSC modules 
Troubleshooting DSC Resources 


Ruby API for developing extensions

Man Page: puppet agent
NOTE: This page was generated from the Puppet source code on 2022-02-07 10:05:18 -0800
NAME
puppet-agent - The puppet agent daemonSYNOPSIS

Retrieves the client configuration from the Puppet master and applies it
to the local host.
This service may be run as a daemon, run periodically using cron (or
something similar), or run interactively for testing purposes.
USAGE
puppet agent [--certname NAME]
[-D|--daemonize|--no-daemonize] [-d|--debug]
[--detailed-exitcodes] [--digest DIGEST] [--disable
[MESSAGE]] [--enable] [--fingerprint] [-h|--help]
[-l|--logdest syslog|eventlog|ABS FILEPATH|console]
[--serverport PORT] [--noop] [-o|--onetime]
[--sourceaddress IP_ADDRESS] [-t|--test] [-v|--verbose]
[-V|--version] [-w|--waitforcert SECONDS]DESCRIPTION

This is the main puppet client. Its job is to retrieve the local
machine's configuration from a remote server and apply it. In order to
successfully communicate with the remote server, the client must have a
certificate signed by a certificate authority that the server trusts;
the recommended method for this, at the moment, is to run a certificate
authority as part of the puppet server (which is the default). The
client will connect and request a signed certificate, and will continue
connecting until it receives one.
Once the client has a signed certificate, it will retrieve its
configuration and apply it.
USAGE NOTES

'puppet agent' does its best to find a compromise between interactive
use and daemon use. If you run it with no arguments and no
configuration, it goes into the background, attempts to get a signed
certificate, and retrieves and applies its configuration every 30
minutes.
Some flags are meant specifically for interactive use --- in
particular, 'test', 'tags' and 'fingerprint' are useful.
'--test' runs once in the foreground with verbose logging, then
exits. It also exits if it can't get a valid catalog. --test
includes the '--detailed-exitcodes' option by default and exits with
one of the following exit codes:

0: The run succeeded with no changes or failures; the system was
already in the desired state.
1: The run failed, or wasn't attempted due to another run already
in progress.
2: The run succeeded, and some resources were changed.
4: The run succeeded, and some resources failed.
6: The run succeeded, and included both changes and failures.

'--tags' allows you to specify what portions of a configuration you
want to apply. Puppet elements are tagged with all of the class or
definition names that contain them, and you can use the 'tags' flag to
specify one of these names, causing only configuration elements
contained within that class or definition to be applied. This is very
useful when you are testing new configurations --- for instance, if
you are just starting to manage 'ntpd', you would put all of the new
elements into an 'ntpd' class, and call puppet with '--tags ntpd',
which would only apply that small portion of the configuration during
your testing, rather than applying the whole thing.
'--fingerprint' is a one-time flag. In this mode 'puppet agent'
runs once and displays on the console (and in the log) the current
certificate (or certificate request) fingerprint. Providing the
'--digest' option allows to use a different digest algorithm to
generate the fingerprint. The main use is to verify that before signing
a certificate request on the master, the certificate request the master
received is the same as the one the client sent (to prevent against
man-in-the-middle attacks when signing certificates).
'--skip_tags' is a flag used to filter resources. If this is set,
then only resources not tagged with the specified tags will be applied.
Values must be comma-separated.
OPTIONS

Note that any Puppet setting that's valid in the configuration file is
also a valid long argument. For example, 'server' is a valid setting,
so you can specify '--server servername' as an argument. Boolean
settings accept a '--no-' prefix to turn off a behavior, translating
into '--setting' and '--no-setting' pairs, such as
--daemonize and --no-daemonize.
See the configuration file documentation at
https://puppet.com/docs/puppet/latest/configuration.html for the full
list of acceptable settings. A commented list of all settings can also
be generated by running puppet agent with '--genconfig'.

--certname: Set the certname (unique ID) of the client. The master
reads this unique identifying string, which is usually set to the
node's fully-qualified domain name, to determine which
configurations the node will receive. Use this option to debug setup
problems or implement unusual node identification schemes. (This is
a Puppet setting, and can go in puppet.conf.)
--daemonize: Send the process into the background. This is the
default. (This is a Puppet setting, and can go in puppet.conf. Note
the special 'no-' prefix for boolean settings on the command
line.)
--no-daemonize: Do not send the process into the background. (This
is a Puppet setting, and can go in puppet.conf. Note the special
'no-' prefix for boolean settings on the command line.)
--debug: Enable full debugging.

--detailed-exitcodes: Provide extra information about the run via
exit codes; works only if '--test' or '--onetime' is also
specified. If enabled, 'puppet agent' uses the following exit
codes:
0: The run succeeded with no changes or failures; the system was
already in the desired state.
1: The run failed, or wasn't attempted due to another run already
in progress.
2: The run succeeded, and some resources were changed.
4: The run succeeded, and some resources failed.
6: The run succeeded, and included both changes and failures.

--digest: Change the certificate fingerprinting digest algorithm.
The default is SHA256. Valid values depends on the version of
OpenSSL installed, but will likely contain MD5, MD2, SHA1 and
SHA256.

--disable: Disable working on the local system. This puts a lock
file in place, causing 'puppet agent' not to work on the system
until the lock file is removed. This is useful if you are testing a
configuration and do not want the central configuration to override
the local state until everything is tested and committed.
Disable can also take an optional message that will be reported by
the 'puppet agent' at the next disabled run.
'puppet agent' uses the same lock file while it is running, so no
more than one 'puppet agent' process is working at a time.
'puppet agent' exits after executing this.


--enable: Enable working on the local system. This removes any lock
file, causing 'puppet agent' to start managing the local system
again However, it continues to use its normal scheduling, so it
might not start for another half hour.
'puppet agent' exits after executing this.

--evaltrace: Logs each resource as it is being evaluated. This
allows you to interactively see exactly what is being done. (This is
a Puppet setting, and can go in puppet.conf. Note the special
'no-' prefix for boolean settings on the command line.)
--fingerprint: Display the current certificate or certificate
signing request fingerprint and then exit. Use the '--digest'
option to change the digest algorithm used.
--help: Print this help message
--job-id: Attach the specified job id to the catalog request and
the report used for this agent run. This option only works when
'--onetime' is used. When using Puppet Enterprise this flag
should not be used as the orchestrator sets the job-id for you and
it must be unique.

--logdest: Where to send log messages. Choose between 'syslog'
(the POSIX syslog service), 'eventlog' (the Windows Event Log),
'console', or the path to a log file. If debugging or verbosity is
enabled, this defaults to 'console'. Otherwise, it defaults to
'syslog' on POSIX systems and 'eventlog' on Windows. Multiple
destinations can be set using a comma separated list (eg:
/path/file1,console,/path/file2)"
A path ending with '.json' will receive structured output in JSON
format. The log file will not have an ending ']' automatically
written to it due to the appending nature of logging. It must be
appended manually to make the content valid JSON.
A path ending with '.jsonl' will receive structured output in JSON
Lines format.

--masterport: The port on which to contact the Puppet Server. (This
is a Puppet setting, and can go in puppet.conf. Deprecated in favor
of the 'serverport' setting.)
--noop: Use 'noop' mode where the daemon runs in a no-op or
dry-run mode. This is useful for seeing what changes Puppet would
make without actually executing the changes. (This is a Puppet
setting, and can go in puppet.conf. Note the special 'no-' prefix
for boolean settings on the command line.)
--onetime: Run the configuration once. Runs a single (normally
daemonized) Puppet run. Useful for interactively running puppet
agent when used in conjunction with the --no-daemonize option.
(This is a Puppet setting, and can go in puppet.conf. Note the
special 'no-' prefix for boolean settings on the command line.)
--serverport: The port on which to contact the Puppet Server. (This
is a Puppet setting, and can go in puppet.conf.)
--sourceaddress: Set the source IP address for transactions. This
defaults to automatically selected. (This is a Puppet setting, and
can go in puppet.conf.)
--test: Enable the most common options used for testing. These are
'onetime', 'verbose', 'no-daemonize',
'no-usecacheonfailure', 'detailed-exitcodes', 'no-splay', and
'show_diff'.
--trace Prints stack traces on some errors. (This is a Puppet
setting, and can go in puppet.conf. Note the special 'no-' prefix
for boolean settings on the command line.)
--verbose: Turn on verbose reporting.
--version: Print the puppet version number and exit.
--waitforcert: This option only matters for daemons that do not yet
have certificates and it is enabled by default, with a value of 120
(seconds). This causes 'puppet agent' to connect to the server
every 2 minutes and ask it to sign a certificate request. This is
useful for the initial setup of a puppet client. You can turn off
waiting for certificates by specifying a time of 0. (This is a
Puppet setting, and can go in puppet.conf.)
--write_catalog_summary After compiling the catalog saves the
resource list and classes list to the node in the state directory
named classes.txt and resources.txt (This is a Puppet setting, and
can go in puppet.conf.)

EXAMPLE
$ puppet agent --server puppet.domain.comDIAGNOSTICS

Puppet agent accepts the following signals:

SIGHUP
Restart the puppet agent daemon.
SIGINT and SIGTERM
Shut down the puppet agent daemon.
SIGUSR1
Immediately retrieve and apply configurations from the puppet
master.
SIGUSR2
Close file descriptors for log files and reopen them. Used with
logrotate.

AUTHOR
Luke KaniesCOPYRIGHT
Copyright (c) 2011 Puppet Inc., LLC Licensed under the Apache 2.0
License 




          Was this page helpful?
        
Yes
No







              Don’t fill this out if you’re human: 






Thank you for your feedback!

            Feel free to add a comment or suggestion.
            





Send
Please enter your feedback





              Don’t fill this out if you’re human: 







            We’re sorry to hear that! 
            Please tell us why so we can help.
          

            Enter your feedback and email. This form is sent to the Puppet docs team.
            We ask for your email as we might contact you regarding your feedback.
          

            If you need help with the product itself, visit Puppet Support
            or ask in Puppet Community on Slack.
          

            Feedback:
            






            Email Address:
            






            To learn about how Puppet uses your personal information,
            visit our privacy policy.
          


Send
Please enter your feedback and contact email

          If you leave us your email, we may contact you regarding your feedback.
          For more information on how Puppet uses your personal information, see
          our
          privacy policy.
        





            Don’t fill this out if you’re human: 








    See an issue? Please file a JIRA ticket in our
    [DOCUMENTATION]
      project.
  











Puppet by Perforce gives IT operations teams back their time and offers peace of mind with infrastructure automation that enables security and compliance.






Legal
Privacy Policy
Terms of Use
Security


©  Puppet, Inc., a Perforce company. All rights reserved.




Puppet and other identified trademarks are the property of Puppet, Inc., Perforce Software, Inc., or an affiliate. Such trademarks are claimed and/or registered in the U.S. and other countries and regions. All third-party trademarks are the property of their respective holders. References to third-party trademarks do not imply endorsement or sponsorship of any products or services by the trademark holder. Contact Puppet, Inc., for further details.

