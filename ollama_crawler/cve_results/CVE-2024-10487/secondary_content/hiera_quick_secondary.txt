Title: Getting started with Hiera
URL: https://www.puppet.com/docs/puppet/7/hiera_quick

Puppet.com
Forge
Education


                                    Try Puppet
                                


































        Docs
        






Products
Puppet Enterprise
Open Source Puppet
Bolt
Security Compliance Management
Continuous Delivery
Puppet Development Kit
Puppet DB
Puppet Plugin for VMware



        Support
        






Get
Technical Support Plans
Support Lifecycle Policy
New Puppet Enterprise Customer?



        Community
        






About Puppet
Company
Developer Experience
Community
Puppet Champions
Puppet Test Pilots
Community Calendar
Slack Channel







 









































PRODUCT AND VERSION


      Current product
      










      Current version
      








Puppet  7.34.0

Release notes

Puppet release notes
Puppet  7.34.0Security


Puppet known issues
Puppet Server release notes
Puppet Server known Issues
PuppetDB release notes (link)

Facter release notes
Facter 4.10.0
Facter 4.9.0
Facter 4.8.0
Facter 4.7.1
Facter 4.7.0
Facter 4.6.1
Facter 4.6.0
Facter 4.5.2


Facter known issues
What's new since Puppet 6?
Upgrading from Puppet 6 to Puppet 7

Experimental featuresMsgpack support

Archived documentation



Puppet overview
What is Puppet?
Why use Puppet desired state management?
Key concepts behind Puppet
The Puppet platform 
Puppet platform lifecycle 
Open source Puppet vs Puppet Enterprise (PE)
The Puppet ecosystem
Use cases
Glossary
Navigating the documentation



Set up Puppet

Install Puppet
System requirements
Installing Puppet  
Installing and configuring agents
Manually verify packages
Managing Platform versions



Configure Puppet settings
Puppet settings
Key configuration settings

Puppet's configuration files
puppet.conf: The main config file
environment.conf: Per-environment settings
fileserver.conf: Custom fileserver mount points
puppetdb.conf: PuppetDB server locations
autosign.conf: Basic certificate autosigning 
csr_attributes.yaml: Certificate extensions 
custom_trusted_oid_mapping.yaml: Short names for cert extension OIDs
device.conf: Network hardware access
routes.yaml: Advanced plugin routing


Adding file server mount points
Checking the values of settings
Editing settings on the command line
Configuration Reference



Upgrading
Upgrade Puppet Server

Upgrade agents
Upgrade agents using the puppet_agent module
Upgrade *nix agents
Upgrade Windows agents
Upgrade macOS agents


Upgrade PuppetDB



Environments
About environments
Creating environments
Environment isolation



Directories and files
Code and data directory (codedir)
Config directory (confdir)
Main manifest directory
The modulepath
SSL directory (ssldir)
Cache directory (vardir)


Report reference



Platform components

Puppet Server
About Puppet Server
Deprecated features
Server and agent compatibility
Installing Puppet Server

Configuring Puppet Server
Configuring Puppet Server

Puppet Server configuration files
auth.conf
ca.conf
global.conf
logback.xml
metrics.conf
product.conf
puppetserver.conf
web-routes.conf
webserver.conf


Migrating to the HOCON auth.conf format
Advanced logging configuration
Differing behavior in puppet.conf



Using and extending Puppet Server
Subcommands
Using Ruby gems
Intermediate CA
Infrastructure certificate revocation list (CRL)
External SSL termination

Server metrics
Monitoring Puppet Server metrics
HTTP Client Metrics


Tuning guide
Applying metrics to improve performance
Submitting usage telemetry
Scaling Puppet Server
Restarting Puppet Server"



Developer information
Developer debugging
Running from source
Tracing code events



Puppet Server HTTP API
Puppet Server HTTP API overview
PSON

Puppet v3 API
Catalog
Node
Facts
File Bucket File
File Content
File Metadata
Report



Puppet v4 APICatalog API


CA v1 API
Certificate
Certificate Request
Certificate Status
Certificate Revocation List
Expirations
Certificate Clean


Schemas (JSON)



API endpoints

Metrics API endpoints
v1 metrics
v2 (Jolokia) metrics



Status API endpoints
Services endpoint
Simple endpoint



Administrative API endpoints
Environment cache
JRuby pool



Server-specific Puppet API endpoints
Environment classes
Environment modules
Static file content





Certificate authority and SSL
Puppet Server CA commands
Intermediate CA
Autosigning certificate requests
CSR attributes and certificate extensions
Regenerating certificates in a Puppet deployment
External CA
External SSL termination





Facter  
Facter: CLI
Facter: Core Facts

Custom facts overviewEnvironment facts 

Writing custom facts
External facts
Configuring Facter with facter.conf


PuppetDB

Puppet services and tools
Puppet commands
Running Puppet commands on Windows  

primary Puppet serverAbout Puppet Server

Puppet agent on *nix systems
Puppet agent on Windows
Puppet apply
Puppet device



Puppet reports
Reporting
Report reference
Writing custom report processors
Report format



Life cycle of a Puppet run
Agent-server HTTPS communications
Catalog compilation
Static catalogs 





Using Puppet code
Classifying nodes
Managing environment content with a Puppetfile
Using content from Puppet Forge

Designing system configs (roles and profiles)
The roles and profiles method 
Roles and profiles example 
Designing advanced profiles 
Designing convenient roles 



Separating data (Hiera)
About Hiera  
Getting started with Hiera  
Configuring Hiera
Creating and editing data 
Looking up data with Hiera  
Writing new data backends 

Debugging Hiera
Unexpected values
Common errors


Upgrading to Hiera 5 



Use case examples
Manage NTP
Manage sudo 
Manage DNS
Manage firewall rules
Forge examples





Syntax and settings

The Puppet language
Puppet language overview
Puppet language syntax examples
The Puppet language style guide 
Files and paths on Windows  
Code comments 
Variables
Resources

Resource types
Resource Type Reference (Single-Page)
Built-in types
Optional resource types for Windows
Resource Type: exec
Using exec on Windows  
Resource Type: file
Using file on Windows
Resource Type: filebucket
Resource Type: group
Using user and group on Windows
Resource types overview
Resource Type: notify
Resource Type: package
Using package on Windows  
Resource Type: resources
Resource Type: schedule
Resource Type: service
Using service
Resource Type: stage
Resource Type: tidy
Resource Type: user


Relationships and ordering
Classes
Defined resource types
Bolt tasks
Expressions and operators
Conditional statements and expressions
Function calls
Built-in function reference
Node definitions

Facts and built-in variables
Accessing facts from Puppet code
Built-in variables


Reserved words and acceptable names

Custom resources

Develop types and providers with the Resource APIResource API reference


Low-level method for developing types and providers
Type development
Provider development
Creating resources





Custom functions
Custom functions overview 
Writing custom functions in the Puppet language

Writing custom functions in Ruby
Custom functions in Ruby overview
Ruby function signatures
Using special features in implementation methods
Iterative functions
Refactoring legacy 3.x functions



Deferring a function
Deferred functions overview
Using a template with Deferred values
Write a deferred function to store secrets
Integrations with secret stores





Values, data types, and aliases
Type aliases
Typecasting
Abstract data types
Arrays
Binary
Booleans
Data type syntax
Default
Error data type
Hashes
Numbers
Regular expressions
Resource and class references
Resource types
Sensitive
Strings
Time-related data types
Undef



Templates
Creating templates using Embedded Puppet
Creating templates using Embedded Ruby



Advanced constructs
Iteration and loops
Lambdas
Resource default statements
Resource collectors
Virtual resources
Exported resources
Tags
Run stages



Details of complex behaviors
Containment
Scope
Namespaces and autoloading


Securing sensitive data


Metaparameter reference
Configuration Reference
Built-in function reference

Puppet Man Pages

Core tools
Man Page: puppet agent
Man Page: puppet apply
Man Page: puppet module
Man Page: puppet resource
Man Page: puppet lookup



Occasionally useful
Man Page: puppet config
Man Page: puppet describe
Man Page: puppet device
Man Page: puppet doc
Man Page: puppet help
Man Page: puppet node
Man Page: puppet parser



Niche
Man Page: puppet catalog
Man Page: puppet facts
Man Page: puppet filebucket
Man Page: puppet report







Developing modules

Modules
Modules overview
Plug-ins in modules
Module cheat sheet
Installing and managing modules from the command line
Beginner's guide to writing modules
Module metadata
Documenting modules
Documenting modules with Puppet Strings  
Puppet Strings style guide

Publishing modulesUsing the Forge API

Contributing to Puppet modules


Puppet Development Kit (PDK)
Puppet VSCode extension

PowerShell DSC Resources
Converting DSC Resources
Distributing arbitrary DSC resources
Upgrading Puppet DSC modules 
Troubleshooting DSC Resources 


Ruby API for developing extensions


Getting started with Hiera

This page introduces the basic concepts and tasks to get
        you started with Hiera, including how to create a hiera.yaml
        config file and write data. It is the foundation for understanding the more advanced topics
        described in the rest of the Hiera documentation.

Related information
Hiera configuration layers
Merge behaviors


Create a hiera.yaml config file

The Hiera config file is
    called hiera.yaml. Each
    environment should have its own hiera.yaml file.

In the main directory of one of your environments, create
          a new file called hiera.yaml. Paste the following contents into it:
# <ENVIRONMENT>/hiera.yaml
---
version: 5

hierarchy:
  - name: "Per-node data"                   # Human-readable name.
    path: "nodes/%{trusted.certname}.yaml"  # File path, relative to datadir.
                                   # ^^^ IMPORTANT: include the file extension!

  - name: "Per-OS defaults"
    path: "os/%{facts.os.family}.yaml"

  - name: "Common data"
    path: "common.yaml"


Results
This file is in a format
        called YAML, which is used extensively throughout Hiera.
For more information on YAML, see YAML
          Cookbook.


Related informationConfig file syntax

The hierarchy 

The hiera.yaml file configures a hierarchy: an ordered list of data
        sources.
Hiera searches these data sources in
            the order they are written. Higher-priority sources override lower-priority ones. Most
            hierarchy levels use variables to locate a data source, so that different nodes get
            different data.
This is the core concept of Hiera: a
            defaults-with-overrides pattern for data lookup, using a node-specific list of data
            sources.


Related information
Interpolation
Hiera hierarchies


Write data: Create a test class 

A test class writes the data it receives to a temporary
        file — on the agent when applying the catalog.


Hiera is used with Puppet code, so the first step is to create a Puppet class for testing.



If you do not already use the roles and profiles method, create a module named
                        profile. Profiles are wrapper classes that use multiple
                    component modules to configure a layered technology stack. See The roles and profile method for more
                    information.


Use Puppet Development Kit ( PDK) to create a class called hiera_test.pp in
                    your profile module.


Add the following code you your hiera_test.pp file: 


# /etc/puppetlabs/code/environments/production/modules/profile/manifests/hiera_test.pp
class profile::hiera_test (
  Boolean             $ssl,
  Boolean             $backups_enabled,
  Optional[String[1]] $site_alias = undef,
) {
  file { '/tmp/hiera_test.txt':
    ensure  => file,
    content => @("END"),
               Data from profile::hiera_test
               -----
               profile::hiera_test::ssl: ${ssl}
               profile::hiera_test::backups_enabled: ${backups_enabled}
               profile::hiera_test::site_alias: ${site_alias}
               |END
    owner   => root,
    mode    => '0644',
  }
}The
                        test class uses class parameters to request configuration data. Puppet looks up class parameters in Hiera, using <CLASS NAME>::<PARAMETER
                            NAME> as the lookup key. 



Make a manifest that includes the class:


# site.pp
include profile::hiera_test




Compile the catalog and observe that this fails
                    because there are required values.


To provide values for the missing class parameters, set these keys in your Hiera data. Depending on where in your hierarchy
                    you want to set the parameters, you can add them to your common data, os data, or per-node data.










Parameter
Hiera key





$ssl


profile::hiera_test::ssl




$backups_enabled


profile::hiera_test::backups_enabled




$site_alias


profile::hiera_test::site_alias








Compile again and observe that the parameters are
                    now automatically looked up.




Related informationThe Puppet lookup function

Write data: Set values in common data

Set values in your common data — the level at the bottom of
      your hierarchy. 

This hierarchy level uses the YAML backend for data, which means the
            data goes into a YAML file. To know where to put that file, combine the following pieces
            of information: 

The current environment’s directory.


The data directory, which is a subdirectory of the
                     environment. By default, it's <ENVIRONMENT>/data. 


The file path specified by the hierarchy level.



In this case, /etc/puppetlabs/code/environments/production/ + data/ + common.yaml.


Open that YAML file in an editor, and set values for
               two of the class’s parameters.


# /etc/puppetlabs/code/environments/production/data/common.yaml
---
profile::hiera_test::ssl: false
profile::hiera_test::backups_enabled: true

The third parameter, $site_alias, has a default value defined in code, so
                  you can omit it from the data.




Write data: Set per-operating system data 

The second level of the hierarchy uses the os fact to locate its data file. This means it
        can use different data files depending on the operating system of the current
        node.
For this example,
                suppose that your developers use MacBook laptops, which have an OS family of Darwin. If a developer is running an
                app instance on their laptop, it should not send data to your production backup
                server, so set $backups_enabled to
                    false.
If you do not run Puppet on any Mac laptops, choose
                an OS family that is meaningful to your infrastructure.


Locate the data file, by replacing %{facts.os.family}
                    with the value you are targeting:
/etc/puppetlabs/code/environments/production/data/ + os/ + Darwin + .yaml


Add the following contents:
# /etc/puppetlabs/code/environments/production/data/os/Darwin.yaml
---
profile::hiera_test::backups_enabled: false


Compile to observe that the override takes effect.
                


Results
Related topics: the os fact.


Write data: Set per-node data 

The highest level of the example hierarchy uses the value
        of $trusted['certname'] to locate its data
        file, so you can set data by name for each individual node.
This example supposes
                you have a server named jenkins-prod-03.example.com, and configures it to use SSL and to serve
                this application at the hostname ci.example.com. To try this out, choose the name of a real server that
                you can run Puppet on.


To locate the data file, replace %{trusted.certname}with the
                    node name you’re targeting:
/etc/puppetlabs/code/environments/production/data/ + nodes/ + jenkins-prod-03.example.com + .yaml


Open that file in an editor and add the following
                    contents:
# /etc/puppetlabs/code/environments/production/data/nodes/jenkins-prod-03.example.com.yaml
---
profile::hiera_test::ssl: true
profile::hiera_test::site_alias: ci.example.com



Compile to observe that the override takes
                    effect.


ResultsRelated topics: $trusted[‘certname’].


Testing Hiera data on the command
        line 

As you set Hiera data or
        rearrange your hierarchy, it is important to double-check the data a node
        receives.
The puppet lookup command helps test data interactively. For
                example:puppet lookup profile::hiera_test::backups_enabled --environment production --node jenkins-prod-03.example.comThis
                returns the value true.
To use the puppet
                    lookup command effectively:

Run the command on a Puppet
                    Server node, or on another node that has access to a full copy of your Puppet code and configuration.
The node you are testing against should have contacted the
                    server at least one time as this makes the facts for that node available to the
                        lookup
                    command (otherwise you need to supply the facts yourself on the command
                    line).
Make sure the command uses the global confdir and codedir, so it has access to your live data. If
                    you’re not running puppet
                        lookup as root user, specify --codedir and --confdir on the command line.
If you use PuppetDB, you can
                    use any node’s facts in a lookup by specifying --node <NAME>. Hiera can automatically get that node’s real
                    facts and use them to resolve data.
If you do not use PuppetDB,
                    or if you want to test for a set of facts that don't exist, provide facts in a
                    YAML or JSON file and specify that file as part of the command with --facts <FILE>. To get a file
                    full of facts, rather than creating one from scratch, run facter -p --json > facts.json on a node
                    that is similar to the node you want to examine, copy the facts.json file to your Puppet Server node, and edit it as needed.

Puppet Development Kit comes with predefined fact sets
                            for a variety of platforms. You can use those if you want to test
                            against platforms you do not have, or if you want "typical facts" for a
                            kind of platform.


If you are not getting the values you expect, try re-running
                    the command with --explain. The
                        --explain flag makes Hiera output a full explanation of which data
                    sources it searched and what it found in them.

Related topics: The puppet lookup
                    command, confdir, codedir.

 




          Was this page helpful?
        
Yes
No







              Don’t fill this out if you’re human: 






Thank you for your feedback!

            Feel free to add a comment or suggestion.
            





Send
Please enter your feedback





              Don’t fill this out if you’re human: 







            We’re sorry to hear that! 
            Please tell us why so we can help.
          

            Enter your feedback and email. This form is sent to the Puppet docs team.
            We ask for your email as we might contact you regarding your feedback.
          

            If you need help with the product itself, visit Puppet Support
            or ask in Puppet Community on Slack.
          

            Feedback:
            






            Email Address:
            






            To learn about how Puppet uses your personal information,
            visit our privacy policy.
          


Send
Please enter your feedback and contact email

          If you leave us your email, we may contact you regarding your feedback.
          For more information on how Puppet uses your personal information, see
          our
          privacy policy.
        





            Don’t fill this out if you’re human: 








    See an issue? Please file a JIRA ticket in our
    [DOCUMENTATION]
      project.
  











Puppet by Perforce gives IT operations teams back their time and offers peace of mind with infrastructure automation that enables security and compliance.






Legal
Privacy Policy
Terms of Use
Security


©  Puppet, Inc., a Perforce company. All rights reserved.




Puppet and other identified trademarks are the property of Puppet, Inc., Perforce Software, Inc., or an affiliate. Such trademarks are claimed and/or registered in the U.S. and other countries and regions. All third-party trademarks are the property of their respective holders. References to third-party trademarks do not imply endorsement or sponsorship of any products or services by the trademark holder. Contact Puppet, Inc., for further details.

