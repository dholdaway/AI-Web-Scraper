Title: Defined resource types
URL: https://www.puppet.com/docs/puppet/7/lang_defined_types

Puppet.com
Forge
Education


                                    Try Puppet
                                


































        Docs
        






Products
Puppet Enterprise
Open Source Puppet
Bolt
Security Compliance Management
Continuous Delivery
Puppet Development Kit
Puppet DB
Puppet Plugin for VMware



        Support
        






Get
Technical Support Plans
Support Lifecycle Policy
New Puppet Enterprise Customer?



        Community
        






About Puppet
Company
Developer Experience
Community
Puppet Champions
Puppet Test Pilots
Community Calendar
Slack Channel







 









































PRODUCT AND VERSION


      Current product
      










      Current version
      








Puppet  7.34.0

Release notes

Puppet release notes
Puppet  7.34.0Security


Puppet known issues
Puppet Server release notes
Puppet Server known Issues
PuppetDB release notes (link)

Facter release notes
Facter 4.10.0
Facter 4.9.0
Facter 4.8.0
Facter 4.7.1
Facter 4.7.0
Facter 4.6.1
Facter 4.6.0
Facter 4.5.2


Facter known issues
What's new since Puppet 6?
Upgrading from Puppet 6 to Puppet 7

Experimental featuresMsgpack support

Archived documentation



Puppet overview
What is Puppet?
Why use Puppet desired state management?
Key concepts behind Puppet
The Puppet platform 
Puppet platform lifecycle 
Open source Puppet vs Puppet Enterprise (PE)
The Puppet ecosystem
Use cases
Glossary
Navigating the documentation



Set up Puppet

Install Puppet
System requirements
Installing Puppet  
Installing and configuring agents
Manually verify packages
Managing Platform versions



Configure Puppet settings
Puppet settings
Key configuration settings

Puppet's configuration files
puppet.conf: The main config file
environment.conf: Per-environment settings
fileserver.conf: Custom fileserver mount points
puppetdb.conf: PuppetDB server locations
autosign.conf: Basic certificate autosigning 
csr_attributes.yaml: Certificate extensions 
custom_trusted_oid_mapping.yaml: Short names for cert extension OIDs
device.conf: Network hardware access
routes.yaml: Advanced plugin routing


Adding file server mount points
Checking the values of settings
Editing settings on the command line
Configuration Reference



Upgrading
Upgrade Puppet Server

Upgrade agents
Upgrade agents using the puppet_agent module
Upgrade *nix agents
Upgrade Windows agents
Upgrade macOS agents


Upgrade PuppetDB



Environments
About environments
Creating environments
Environment isolation



Directories and files
Code and data directory (codedir)
Config directory (confdir)
Main manifest directory
The modulepath
SSL directory (ssldir)
Cache directory (vardir)


Report reference



Platform components

Puppet Server
About Puppet Server
Deprecated features
Server and agent compatibility
Installing Puppet Server

Configuring Puppet Server
Configuring Puppet Server

Puppet Server configuration files
auth.conf
ca.conf
global.conf
logback.xml
metrics.conf
product.conf
puppetserver.conf
web-routes.conf
webserver.conf


Migrating to the HOCON auth.conf format
Advanced logging configuration
Differing behavior in puppet.conf



Using and extending Puppet Server
Subcommands
Using Ruby gems
Intermediate CA
Infrastructure certificate revocation list (CRL)
External SSL termination

Server metrics
Monitoring Puppet Server metrics
HTTP Client Metrics


Tuning guide
Applying metrics to improve performance
Submitting usage telemetry
Scaling Puppet Server
Restarting Puppet Server"



Developer information
Developer debugging
Running from source
Tracing code events



Puppet Server HTTP API
Puppet Server HTTP API overview
PSON

Puppet v3 API
Catalog
Node
Facts
File Bucket File
File Content
File Metadata
Report



Puppet v4 APICatalog API


CA v1 API
Certificate
Certificate Request
Certificate Status
Certificate Revocation List
Expirations
Certificate Clean


Schemas (JSON)



API endpoints

Metrics API endpoints
v1 metrics
v2 (Jolokia) metrics



Status API endpoints
Services endpoint
Simple endpoint



Administrative API endpoints
Environment cache
JRuby pool



Server-specific Puppet API endpoints
Environment classes
Environment modules
Static file content





Certificate authority and SSL
Puppet Server CA commands
Intermediate CA
Autosigning certificate requests
CSR attributes and certificate extensions
Regenerating certificates in a Puppet deployment
External CA
External SSL termination





Facter  
Facter: CLI
Facter: Core Facts

Custom facts overviewEnvironment facts 

Writing custom facts
External facts
Configuring Facter with facter.conf


PuppetDB

Puppet services and tools
Puppet commands
Running Puppet commands on Windows  

primary Puppet serverAbout Puppet Server

Puppet agent on *nix systems
Puppet agent on Windows
Puppet apply
Puppet device



Puppet reports
Reporting
Report reference
Writing custom report processors
Report format



Life cycle of a Puppet run
Agent-server HTTPS communications
Catalog compilation
Static catalogs 





Using Puppet code
Classifying nodes
Managing environment content with a Puppetfile
Using content from Puppet Forge

Designing system configs (roles and profiles)
The roles and profiles method 
Roles and profiles example 
Designing advanced profiles 
Designing convenient roles 



Separating data (Hiera)
About Hiera  
Getting started with Hiera  
Configuring Hiera
Creating and editing data 
Looking up data with Hiera  
Writing new data backends 

Debugging Hiera
Unexpected values
Common errors


Upgrading to Hiera 5 



Use case examples
Manage NTP
Manage sudo 
Manage DNS
Manage firewall rules
Forge examples





Syntax and settings

The Puppet language
Puppet language overview
Puppet language syntax examples
The Puppet language style guide 
Files and paths on Windows  
Code comments 
Variables
Resources

Resource types
Resource Type Reference (Single-Page)
Built-in types
Optional resource types for Windows
Resource Type: exec
Using exec on Windows  
Resource Type: file
Using file on Windows
Resource Type: filebucket
Resource Type: group
Using user and group on Windows
Resource types overview
Resource Type: notify
Resource Type: package
Using package on Windows  
Resource Type: resources
Resource Type: schedule
Resource Type: service
Using service
Resource Type: stage
Resource Type: tidy
Resource Type: user


Relationships and ordering
Classes
Defined resource types
Bolt tasks
Expressions and operators
Conditional statements and expressions
Function calls
Built-in function reference
Node definitions

Facts and built-in variables
Accessing facts from Puppet code
Built-in variables


Reserved words and acceptable names

Custom resources

Develop types and providers with the Resource APIResource API reference


Low-level method for developing types and providers
Type development
Provider development
Creating resources





Custom functions
Custom functions overview 
Writing custom functions in the Puppet language

Writing custom functions in Ruby
Custom functions in Ruby overview
Ruby function signatures
Using special features in implementation methods
Iterative functions
Refactoring legacy 3.x functions



Deferring a function
Deferred functions overview
Using a template with Deferred values
Write a deferred function to store secrets
Integrations with secret stores





Values, data types, and aliases
Type aliases
Typecasting
Abstract data types
Arrays
Binary
Booleans
Data type syntax
Default
Error data type
Hashes
Numbers
Regular expressions
Resource and class references
Resource types
Sensitive
Strings
Time-related data types
Undef



Templates
Creating templates using Embedded Puppet
Creating templates using Embedded Ruby



Advanced constructs
Iteration and loops
Lambdas
Resource default statements
Resource collectors
Virtual resources
Exported resources
Tags
Run stages



Details of complex behaviors
Containment
Scope
Namespaces and autoloading


Securing sensitive data


Metaparameter reference
Configuration Reference
Built-in function reference

Puppet Man Pages

Core tools
Man Page: puppet agent
Man Page: puppet apply
Man Page: puppet module
Man Page: puppet resource
Man Page: puppet lookup



Occasionally useful
Man Page: puppet config
Man Page: puppet describe
Man Page: puppet device
Man Page: puppet doc
Man Page: puppet help
Man Page: puppet node
Man Page: puppet parser



Niche
Man Page: puppet catalog
Man Page: puppet facts
Man Page: puppet filebucket
Man Page: puppet report







Developing modules

Modules
Modules overview
Plug-ins in modules
Module cheat sheet
Installing and managing modules from the command line
Beginner's guide to writing modules
Module metadata
Documenting modules
Documenting modules with Puppet Strings  
Puppet Strings style guide

Publishing modulesUsing the Forge API

Contributing to Puppet modules


Puppet Development Kit (PDK)
Puppet VSCode extension

PowerShell DSC Resources
Converting DSC Resources
Distributing arbitrary DSC resources
Upgrading Puppet DSC modules 
Troubleshooting DSC Resources 


Ruby API for developing extensions


Defined resource types

Defined resource types,
    sometimes called defined types or defines, are blocks of Puppet
    code that can be evaluated multiple times with different parameters.
Create a
        defined resource type by writing a define
        statement in a manifest (.pp) file. You can
        declare a resource of a defined type in the same way you would declare a resource of a
        built-in type.
Store defined resource type manifests in the manifests/ directory of a module. Define only one defined type in a
        manifest, and give the manifest file the same name as the defined type. Puppet automatically loads any defined types that are present
        in a valid module. See module fundamentals to learn more about module structure and
        usage.
If a defined type is present and loadable, you can declare
        resources of that defined type anywhere in your manifests. Declaring a new resource of the
        defined type causes Puppet to re-evaluate the block of code
        in the definition, using different values for the parameters. 
Every instance of a defined type contains all of its unique resources. This means that any
        relationships formed between the instance and another resource are extended to every
        resource that makes up the instance. See the topics about containment and relationships for more
        information.


Tip:  Unlike many parts of Puppet code, define statements aren't expressions, so you
          can't use them where a value is expected.

Defining types
The general form of a define statement is:
The define keyword.
The name of the defined type.
An optional parameter list, which consists of:
An opening parenthesis.
A comma-separated list of parameters, such as: String $myparam = "default
                  value". Each parameter consists of:
An optional data type, which restricts the allowed values for the parameter.
                    If no data type is specified, values of any data type are permitted.
A variable name to represent the parameter, including the $
                    prefix, such as $parameter.
An optional equals = sign and default value, which must match
                    the data type, if one was specified. If no default value is specified, the
                    parameter is considered required and the user must specify a value.


An optional trailing comma after the last parameter.
A closing parenthesis.


An opening curly brace.
A block of arbitrary Puppet code, which generally
            contains at least one resource declaration
A closing curly brace


The definition does not cause the code in the block to be added to the catalog; it only
        makes it available. To add the code to the catalog, you must declare one or more resources
        of the defined type. 
 This example creates a new resource type called apache::vhost:
        # /etc/puppetlabs/puppet/modules/apache/manifests/vhost.pp
define apache::vhost (
  Integer $port,
  String[1] $docroot,
  String[1] $servername = $title,
  String $vhost_name = '*',
) {
  include apache # contains package['httpd'] and service['httpd']
  include apache::params # contains common config settings

  $vhost_dir = $apache::params::vhost_dir

  # the template used below can access all of the parameters and variable from above.
  file { "${vhost_dir}/${servername}.conf":
    ensure  => file,
    owner   => 'www',
    group   => 'www',
    mode    => '0644',
    content => template('apache/vhost-default.conf.erb'),
    require  => Package['httpd'],
    notify    => Service['httpd'],
  }
}


Declaring defined type resources
You can declare instances of a defined type—usually just called resources—the
        same way you declare any other resource: with a resource type, a title, and a set of
        attribute-value pairs. The parameters you added when defining the type, such as
          $port, become resource attributes, such as port, when
        you declare resources of the defined type.
Parameters that have a default value are considered optional parameters: if you don't
        specify them in the resource declaration, the default value is used. Parameters without
        defaults are required parameters, and you must specify a value for them when you declare the
        resource.
To declare a resource of the apache::vhost defined type from the example
        above: apache::vhost {'homepages':
 port    => 8081,
 docroot => '/var/www-testhost', 
}

If a defined type is present and loadable, you can declare resources of that defined type
        anywhere in your manifests. Declaring a new resource of the defined type causes Puppet to re-evaluate the block of code in the definition,
        using the new declaration's values for the parameters.
Just as with a normal resource type, you can declare resource defaults for a defined type.
        In this example, every apache::vhost resource defaults to port 80 unless
        specifically overridden:# /etc/puppetlabs/puppet/manifests/site.pp 
Apache::Vhost {
 port => 80,
}

You can include any metaparameter in the declaration of a defined type instance. If you do:

Every resource contained in the resource declaration also has that metaparameter.
              Metaparameters that can accept more than one value, such as the relationship
              metaparameters, merge the values from the container and any specific values from the
              individual resource.


The value of the metaparameter can be used as a variable in the definition, as though
              it were a normal parameter. For example, in an instance declared with require
                => Class['ntp'], the local value of $require would be
                Class['ntp'].




Naming
Defined type names can consist of one or more namespace segments, which
        indicate the defined type's location in a module. Each segment must adhere to the naming and reserved names guidelines. 
Each namespace segment must be capitalized when writing a resource reference, collector, or
        resource default. For example, a reference to the apache::vhost resource
        would be Apache::Vhost['homepages']. 
 Because you can declare multiple instances of a defined type in your manifests, every
        resource in the definition must be different in every instance. Duplicate resource instances
        result in compilation failures with a "duplicate resource declaration" error. To make
        resources different across instances, include the value of $title or
        another parameter in the resource's title and name. 
Because $title is unique per instance, this ensures the resources are
        unique as well. For example, this segment of a file declaration makes resources unique by
        adding the vhost_dir and servername attributes to the
        resource title:file { "${vhost_dir}/${servername}.conf": 


Parameters and attributes
When you create a defined type, you can precede each parameter in the define statement with
        an optional data type. If you include a data type, Puppet
        checks the resource parameter's value at runtime to make sure that it has the right data
        type; if the value is illegal, Puppet raises an error. If you
        don't specify a data type in the definition statement, the parameter accepts values of any
        data type.
You can use the parameters of a defined type as local variables inside the definition.
        Rather than the usual assignment statement, each instance of the defined type uses its
        parameter attributes to set the value of the variable. In this example declaration, the
        value of the port parameter, 8081, becomes the value assigned to the
          $port variable. Likewise, the path for the docroot
        parameter becomes the value for the $docroot
        variable.apache::vhost {'homepages': 
  port    => 8081,  
  docroot => '/var/www-testhost', 
}


Note:
The $title and $name variables are both set to the
          defined type's name automatically, so they cannot be used as parameters.



$title and $name

The $title and $name attributes are always available to a
        defined type and are not explicitly added to the definition. These attributes are both set
        to the defined type's name automatically:

$title is always set to the title of the instance. Because it is always
            unique for each instance, it is useful for making sure that contained resources are
            unique.

$name defaults to the value of $title. You can
            specify a different value when you declare an instance of the defined type, but this is
            rarely useful.


Because the values of $title and $name are already
        available inside the defined type's parameter list, you can use $title as
        all or part of the default value for another attribute. In this example,
          $title is used as the value of $servername to ensure the
        server name is always unique:define apache::vhost ( 
  Integer $port, 
  String[1] $docroot, 
  String $servername = $title, 
  String[1] $vhost_name = '*', 
) { # ...




Related information
Resources
Resource default statements
Containment
Namespaces and autoloading
Values, data types, and aliases

 




          Was this page helpful?
        
Yes
No







              Don’t fill this out if you’re human: 






Thank you for your feedback!

            Feel free to add a comment or suggestion.
            





Send
Please enter your feedback





              Don’t fill this out if you’re human: 







            We’re sorry to hear that! 
            Please tell us why so we can help.
          

            Enter your feedback and email. This form is sent to the Puppet docs team.
            We ask for your email as we might contact you regarding your feedback.
          

            If you need help with the product itself, visit Puppet Support
            or ask in Puppet Community on Slack.
          

            Feedback:
            






            Email Address:
            






            To learn about how Puppet uses your personal information,
            visit our privacy policy.
          


Send
Please enter your feedback and contact email

          If you leave us your email, we may contact you regarding your feedback.
          For more information on how Puppet uses your personal information, see
          our
          privacy policy.
        





            Don’t fill this out if you’re human: 








    See an issue? Please file a JIRA ticket in our
    [DOCUMENTATION]
      project.
  











Puppet by Perforce gives IT operations teams back their time and offers peace of mind with infrastructure automation that enables security and compliance.






Legal
Privacy Policy
Terms of Use
Security


©  Puppet, Inc., a Perforce company. All rights reserved.




Puppet and other identified trademarks are the property of Puppet, Inc., Perforce Software, Inc., or an affiliate. Such trademarks are claimed and/or registered in the U.S. and other countries and regions. All third-party trademarks are the property of their respective holders. References to third-party trademarks do not imply endorsement or sponsorship of any products or services by the trademark holder. Contact Puppet, Inc., for further details.

