Title: Lambdas
URL: https://www.puppet.com/docs/puppet/7/lang_lambdas

Puppet.com
Forge
Education


                                    Try Puppet
                                


































        Docs
        






Products
Puppet Enterprise
Open Source Puppet
Bolt
Security Compliance Management
Continuous Delivery
Puppet Development Kit
Puppet DB
Puppet Plugin for VMware



        Support
        






Get
Technical Support Plans
Support Lifecycle Policy
New Puppet Enterprise Customer?



        Community
        






About Puppet
Company
Developer Experience
Community
Puppet Champions
Puppet Test Pilots
Community Calendar
Slack Channel







 









































PRODUCT AND VERSION


      Current product
      










      Current version
      








Puppet  7.34.0

Release notes

Puppet release notes
Puppet  7.34.0Security


Puppet known issues
Puppet Server release notes
Puppet Server known Issues
PuppetDB release notes (link)

Facter release notes
Facter 4.10.0
Facter 4.9.0
Facter 4.8.0
Facter 4.7.1
Facter 4.7.0
Facter 4.6.1
Facter 4.6.0
Facter 4.5.2


Facter known issues
What's new since Puppet 6?
Upgrading from Puppet 6 to Puppet 7

Experimental featuresMsgpack support

Archived documentation



Puppet overview
What is Puppet?
Why use Puppet desired state management?
Key concepts behind Puppet
The Puppet platform 
Puppet platform lifecycle 
Open source Puppet vs Puppet Enterprise (PE)
The Puppet ecosystem
Use cases
Glossary
Navigating the documentation



Set up Puppet

Install Puppet
System requirements
Installing Puppet  
Installing and configuring agents
Manually verify packages
Managing Platform versions



Configure Puppet settings
Puppet settings
Key configuration settings

Puppet's configuration files
puppet.conf: The main config file
environment.conf: Per-environment settings
fileserver.conf: Custom fileserver mount points
puppetdb.conf: PuppetDB server locations
autosign.conf: Basic certificate autosigning 
csr_attributes.yaml: Certificate extensions 
custom_trusted_oid_mapping.yaml: Short names for cert extension OIDs
device.conf: Network hardware access
routes.yaml: Advanced plugin routing


Adding file server mount points
Checking the values of settings
Editing settings on the command line
Configuration Reference



Upgrading
Upgrade Puppet Server

Upgrade agents
Upgrade agents using the puppet_agent module
Upgrade *nix agents
Upgrade Windows agents
Upgrade macOS agents


Upgrade PuppetDB



Environments
About environments
Creating environments
Environment isolation



Directories and files
Code and data directory (codedir)
Config directory (confdir)
Main manifest directory
The modulepath
SSL directory (ssldir)
Cache directory (vardir)


Report reference



Platform components

Puppet Server
About Puppet Server
Deprecated features
Server and agent compatibility
Installing Puppet Server

Configuring Puppet Server
Configuring Puppet Server

Puppet Server configuration files
auth.conf
ca.conf
global.conf
logback.xml
metrics.conf
product.conf
puppetserver.conf
web-routes.conf
webserver.conf


Migrating to the HOCON auth.conf format
Advanced logging configuration
Differing behavior in puppet.conf



Using and extending Puppet Server
Subcommands
Using Ruby gems
Intermediate CA
Infrastructure certificate revocation list (CRL)
External SSL termination

Server metrics
Monitoring Puppet Server metrics
HTTP Client Metrics


Tuning guide
Applying metrics to improve performance
Submitting usage telemetry
Scaling Puppet Server
Restarting Puppet Server"



Developer information
Developer debugging
Running from source
Tracing code events



Puppet Server HTTP API
Puppet Server HTTP API overview
PSON

Puppet v3 API
Catalog
Node
Facts
File Bucket File
File Content
File Metadata
Report



Puppet v4 APICatalog API


CA v1 API
Certificate
Certificate Request
Certificate Status
Certificate Revocation List
Expirations
Certificate Clean


Schemas (JSON)



API endpoints

Metrics API endpoints
v1 metrics
v2 (Jolokia) metrics



Status API endpoints
Services endpoint
Simple endpoint



Administrative API endpoints
Environment cache
JRuby pool



Server-specific Puppet API endpoints
Environment classes
Environment modules
Static file content





Certificate authority and SSL
Puppet Server CA commands
Intermediate CA
Autosigning certificate requests
CSR attributes and certificate extensions
Regenerating certificates in a Puppet deployment
External CA
External SSL termination





Facter  
Facter: CLI
Facter: Core Facts

Custom facts overviewEnvironment facts 

Writing custom facts
External facts
Configuring Facter with facter.conf


PuppetDB

Puppet services and tools
Puppet commands
Running Puppet commands on Windows  

primary Puppet serverAbout Puppet Server

Puppet agent on *nix systems
Puppet agent on Windows
Puppet apply
Puppet device



Puppet reports
Reporting
Report reference
Writing custom report processors
Report format



Life cycle of a Puppet run
Agent-server HTTPS communications
Catalog compilation
Static catalogs 





Using Puppet code
Classifying nodes
Managing environment content with a Puppetfile
Using content from Puppet Forge

Designing system configs (roles and profiles)
The roles and profiles method 
Roles and profiles example 
Designing advanced profiles 
Designing convenient roles 



Separating data (Hiera)
About Hiera  
Getting started with Hiera  
Configuring Hiera
Creating and editing data 
Looking up data with Hiera  
Writing new data backends 

Debugging Hiera
Unexpected values
Common errors


Upgrading to Hiera 5 



Use case examples
Manage NTP
Manage sudo 
Manage DNS
Manage firewall rules
Forge examples





Syntax and settings

The Puppet language
Puppet language overview
Puppet language syntax examples
The Puppet language style guide 
Files and paths on Windows  
Code comments 
Variables
Resources

Resource types
Resource Type Reference (Single-Page)
Built-in types
Optional resource types for Windows
Resource Type: exec
Using exec on Windows  
Resource Type: file
Using file on Windows
Resource Type: filebucket
Resource Type: group
Using user and group on Windows
Resource types overview
Resource Type: notify
Resource Type: package
Using package on Windows  
Resource Type: resources
Resource Type: schedule
Resource Type: service
Using service
Resource Type: stage
Resource Type: tidy
Resource Type: user


Relationships and ordering
Classes
Defined resource types
Bolt tasks
Expressions and operators
Conditional statements and expressions
Function calls
Built-in function reference
Node definitions

Facts and built-in variables
Accessing facts from Puppet code
Built-in variables


Reserved words and acceptable names

Custom resources

Develop types and providers with the Resource APIResource API reference


Low-level method for developing types and providers
Type development
Provider development
Creating resources





Custom functions
Custom functions overview 
Writing custom functions in the Puppet language

Writing custom functions in Ruby
Custom functions in Ruby overview
Ruby function signatures
Using special features in implementation methods
Iterative functions
Refactoring legacy 3.x functions



Deferring a function
Deferred functions overview
Using a template with Deferred values
Write a deferred function to store secrets
Integrations with secret stores





Values, data types, and aliases
Type aliases
Typecasting
Abstract data types
Arrays
Binary
Booleans
Data type syntax
Default
Error data type
Hashes
Numbers
Regular expressions
Resource and class references
Resource types
Sensitive
Strings
Time-related data types
Undef



Templates
Creating templates using Embedded Puppet
Creating templates using Embedded Ruby



Advanced constructs
Iteration and loops
Lambdas
Resource default statements
Resource collectors
Virtual resources
Exported resources
Tags
Run stages



Details of complex behaviors
Containment
Scope
Namespaces and autoloading


Securing sensitive data


Metaparameter reference
Configuration Reference
Built-in function reference

Puppet Man Pages

Core tools
Man Page: puppet agent
Man Page: puppet apply
Man Page: puppet module
Man Page: puppet resource
Man Page: puppet lookup



Occasionally useful
Man Page: puppet config
Man Page: puppet describe
Man Page: puppet device
Man Page: puppet doc
Man Page: puppet help
Man Page: puppet node
Man Page: puppet parser



Niche
Man Page: puppet catalog
Man Page: puppet facts
Man Page: puppet filebucket
Man Page: puppet report







Developing modules

Modules
Modules overview
Plug-ins in modules
Module cheat sheet
Installing and managing modules from the command line
Beginner's guide to writing modules
Module metadata
Documenting modules
Documenting modules with Puppet Strings  
Puppet Strings style guide

Publishing modulesUsing the Forge API

Contributing to Puppet modules


Puppet Development Kit (PDK)
Puppet VSCode extension

PowerShell DSC Resources
Converting DSC Resources
Distributing arbitrary DSC resources
Upgrading Puppet DSC modules 
Troubleshooting DSC Resources 


Ruby API for developing extensions


Lambdas

Lambdas are blocks of Puppet
    code passed to functions. When a function receives a lambda, it provides values for the
    lambdaâ€™s parameters and evaluates its code. If you use other programming languages, think of
    lambdas as anonymous functions that are passed to other functions.
Location
Lambdas are used only in function calls. They cannot be assigned to variables, and are
        not valid anywhere else in the Puppet language. While any
        function accepts a lambda, only some functions do anything with them. For information on
        useful lambda-accepting functions, see Iteration and
          loops.

Syntax
Lambdas consist of a list of parameters surrounded by pipe (|) characters, followed by a block of arbitrary Puppet code in curly braces.
        They must be used as part of a function call.
$binaries = ['facter', 'hiera', 'mco', 'puppet', 'puppetserver']

# function call with lambda:
$binaries.each |String $binary| {
  file {"/usr/bin/${binary}":
    ensure => link,
    target => "/opt/puppetlabs/bin/${binary}",
  }
}The general form of a lambda is: 

A mandatory parameter list, which can be empty. This consists of: 

An opening pipe character (|). 


A comma-separated list of zero or more parameters (for
                      example, String $myparam = "default
                      value"). Each parameter consists of: 

An optional data type, which restricts the values it
                          allows (defaults to Any). 


A variable name to represent the
                          parameter, including the $ prefix. 


An optional equals (=) sign
                          and default value. 


A closing pipe character (|). 





Optionally, another comma and an extra arguments parameter (for
                      example, String *$others = ["default one",
                      "default two"]), which consists of: 

An optional data type, which restricts the values allowed
                          for extra arguments (defaults to Any). 


An asterisk character (*). 


A variable name to represent the
                          parameter, including the $ prefix. 


An optional equals (=) sign
                          and default value, which can be one value that matches the
                          specified data type, or an array of values that all match the data type.
                        





An optional trailing comma after the last parameter.


A closing pipe character (|). 





An opening curly brace.


A block of arbitrary Puppet code.


A closing curly brace.




Parameters and variables
When functions call the lambda it sets values for the list of parameters that a lambda
        contains. and each parameter can be used as a variable.
Functions pass lambda parameters by position, similar to passing arguments in a
        function call. Each function decides how many parameters, and in what order, it passes to a
        lambda. See the functionâ€™s documentation for details.


Important: The order of parameters is important and there are no
          restrictions on naming â€” unlike class or defined type parameters, where the names are the
          main interface for users.

Within the parameter list, the data type preceding a parameter is optional. To ensure the
        correct data is included, Puppet checks the parameter value
        at runtime, and raises an error when the value is illegal. When no data type is provided,
        values of any data type are accepted by the parameter.
When a parameter contains a default value, itâ€™s optional â€” the lambda uses the default
        value when the caller doesnâ€™t provide a value for that parameter. 


Important: Parameters are passed by position. Optional parameters must be
          poistioned after the required parameters, otherwise it causes an evaluation error. When
          you have multiple optional parameters, the later ones only receive values if all of the
          prior ones do.

The final parameter of a lambda can be a special extra arguments
        parameter, which collects an unlimited number of extra arguments into an array. This is
        useful when you donâ€™t know in advance how many arguments the caller provides. 
To specify that the last parameter collects extra arguments, write an asterisk (*) in front of its name in the parameter list (like *$others). An extra arguments parameter is always optional. You
        canâ€™t put an asterisk (*) in front of any parameter except
        the last one. The value of an extra arguments parameter is always an array, containing every
        argument in excess of the earlier parameters. If there are no extra arguments and no default
        value, it will be an empty array.
An extra arguments parameter can contain a default value, which has automatic array
        wrapping for convenience: 

When the provided default is a non-array value, the real default is a single-element
              array containing that value.


When the provided default is an array, the real default is that array.



An extra arguments parameter can also contain a data type. Puppet uses this data type to
        validate the elements of the array. When you specify a data type of String, the final data type of the extra arguments parameter will
          be Array[String].

Behavior
Similar to a defined type, a lambda delays evaluation of the Puppet code it contains and makes it available for later.
        Unlike defined types, lambdas are not directly invoked by a user. The user provides a lambda
        to some other piece of code (a function), and that code decides: 

Whether (and when) to call/evaluate the lambda.


How many times to call it.


What values its parameters must have.


What to do with any values it produces.



Some functions call a single lambda multiple times and provide different parameter values
        each time. For information on how a particular function uses its lambda, see its
        documentation. In this version of the Puppet language,
        calling a lambda is to pass it to a function that calls it.
You must use unique resource declarations in the body of a lambda, duplicate
        resources cause compilation failures. This means that when a function calls its lambda
        multiple times, any resource titles in the lambda must include a parameter value that
        changes with every call. 
In this example, we use the $binary parameter in
        the title of the lambdaâ€™s file resource:file {"/usr/bin/$binary":
  ensure => link,
  target => "/opt/puppetlabs/bin/$binary",
}When the each function is called, the
        array we pass has no repeated values to ensure unique file resources. However, if we are working with an array that came from
        less reliable external data, we could use the unique function from stdlib
 to protect against duplicates. This uniqueness requirement is similar to defined
          types, which are also blocks of Puppet code that are
        evaluated multiple times.
Each time a lambda is called it produces the value of the last expression in the code
        block. The function that calls the lambda has access to this value, but not every function
        does anything with it. Some functions return it, some transform it, some ignore it, and some
        use it to do something else entirely.
For example: 

The with function calls its lambda one time
              and returns the resulting value. 


The map function calls its lambda multiple
              times and returns an array of every resulting value. 


The each function throws away its lambda's values and
              returns a copy of its main argument. 



Every lambda creates its own local scope which is anonymous, and contains variables which
        can not be accessed by qualified names from any other scope. The parent scope of a
        lambda is the local scope in which that lambda is written. When a lambda is written inside a
        class definition, its code block accesses local variables from that class, as well as
        variables from that classâ€™s ancestor scopes, and from the top scope. Lambdas can contain
        other lambdas, which makes the outer lambda the parent scope of the inner one.
A lambda is a value with the Callable data type, and functions using the modern function
        API (Puppet::Functions) use that data type to validate any
        lambda values it receives. However, the Puppet language
        doesnâ€™t provide any way to store or interact with Callable values except as lambdas provided
        to a function.


 




          Was this page helpful?
        
Yes
No







              Donâ€™t fill this out if youâ€™re human: 






Thank you for your feedback!

            Feel free to add a comment or suggestion.
            





Send
Please enter your feedback





              Donâ€™t fill this out if youâ€™re human: 







            Weâ€™re sorry to hear that! 
            Please tell us why so we can help.
          

            Enter your feedback and email. This form is sent to the Puppet docs team.
            We ask for your email as we might contact you regarding your feedback.
          

            If you need help with the product itself, visit Puppet Support
            or ask in Puppet Community on Slack.
          

            Feedback:
            






            Email Address:
            






            To learn about how Puppet uses your personal information,
            visit our privacy policy.
          


Send
Please enter your feedback and contact email

          If you leave us your email, we may contact you regarding your feedback.
          For more information on how Puppet uses your personal information, see
          our
          privacy policy.
        





            Donâ€™t fill this out if youâ€™re human: 








    See an issue? Please file a JIRA ticket in our
    [DOCUMENTATION]
      project.
  











Puppet by Perforce gives IT operations teams back their time and offers peace of mind with infrastructure automation that enables security and compliance.






Legal
Privacy Policy
Terms of Use
Security


Â©  Puppet, Inc., a Perforce company. All rights reserved.




Puppet and other identified trademarks are the property of Puppet, Inc., Perforce Software, Inc., or an affiliate. Such trademarks are claimed and/or registered in the U.S. and other countries and regions. All third-party trademarks are the property of their respective holders. References to third-party trademarks do not imply endorsement or sponsorship of any products or services by the trademark holder. Contact Puppet, Inc., for further details.

