Title: Managing environment content with a Puppetfile
URL: https://www.puppet.com/docs/puppet/7/puppetfile_usage

Puppet.com
Forge
Education


                                    Try Puppet
                                


































        Docs
        






Products
Puppet Enterprise
Open Source Puppet
Bolt
Security Compliance Management
Continuous Delivery
Puppet Development Kit
Puppet DB
Puppet Plugin for VMware



        Support
        






Get
Technical Support Plans
Support Lifecycle Policy
New Puppet Enterprise Customer?



        Community
        






About Puppet
Company
Developer Experience
Community
Puppet Champions
Puppet Test Pilots
Community Calendar
Slack Channel







 









































PRODUCT AND VERSION


      Current product
      










      Current version
      








Puppet  7.34.0

Release notes

Puppet release notes
Puppet  7.34.0Security


Puppet known issues
Puppet Server release notes
Puppet Server known Issues
PuppetDB release notes (link)

Facter release notes
Facter 4.10.0
Facter 4.9.0
Facter 4.8.0
Facter 4.7.1
Facter 4.7.0
Facter 4.6.1
Facter 4.6.0
Facter 4.5.2


Facter known issues
What's new since Puppet 6?
Upgrading from Puppet 6 to Puppet 7

Experimental featuresMsgpack support

Archived documentation



Puppet overview
What is Puppet?
Why use Puppet desired state management?
Key concepts behind Puppet
The Puppet platform 
Puppet platform lifecycle 
Open source Puppet vs Puppet Enterprise (PE)
The Puppet ecosystem
Use cases
Glossary
Navigating the documentation



Set up Puppet

Install Puppet
System requirements
Installing Puppet  
Installing and configuring agents
Manually verify packages
Managing Platform versions



Configure Puppet settings
Puppet settings
Key configuration settings

Puppet's configuration files
puppet.conf: The main config file
environment.conf: Per-environment settings
fileserver.conf: Custom fileserver mount points
puppetdb.conf: PuppetDB server locations
autosign.conf: Basic certificate autosigning 
csr_attributes.yaml: Certificate extensions 
custom_trusted_oid_mapping.yaml: Short names for cert extension OIDs
device.conf: Network hardware access
routes.yaml: Advanced plugin routing


Adding file server mount points
Checking the values of settings
Editing settings on the command line
Configuration Reference



Upgrading
Upgrade Puppet Server

Upgrade agents
Upgrade agents using the puppet_agent module
Upgrade *nix agents
Upgrade Windows agents
Upgrade macOS agents


Upgrade PuppetDB



Environments
About environments
Creating environments
Environment isolation



Directories and files
Code and data directory (codedir)
Config directory (confdir)
Main manifest directory
The modulepath
SSL directory (ssldir)
Cache directory (vardir)


Report reference



Platform components

Puppet Server
About Puppet Server
Deprecated features
Server and agent compatibility
Installing Puppet Server

Configuring Puppet Server
Configuring Puppet Server

Puppet Server configuration files
auth.conf
ca.conf
global.conf
logback.xml
metrics.conf
product.conf
puppetserver.conf
web-routes.conf
webserver.conf


Migrating to the HOCON auth.conf format
Advanced logging configuration
Differing behavior in puppet.conf



Using and extending Puppet Server
Subcommands
Using Ruby gems
Intermediate CA
Infrastructure certificate revocation list (CRL)
External SSL termination

Server metrics
Monitoring Puppet Server metrics
HTTP Client Metrics


Tuning guide
Applying metrics to improve performance
Submitting usage telemetry
Scaling Puppet Server
Restarting Puppet Server"



Developer information
Developer debugging
Running from source
Tracing code events



Puppet Server HTTP API
Puppet Server HTTP API overview
PSON

Puppet v3 API
Catalog
Node
Facts
File Bucket File
File Content
File Metadata
Report



Puppet v4 APICatalog API


CA v1 API
Certificate
Certificate Request
Certificate Status
Certificate Revocation List
Expirations
Certificate Clean


Schemas (JSON)



API endpoints

Metrics API endpoints
v1 metrics
v2 (Jolokia) metrics



Status API endpoints
Services endpoint
Simple endpoint



Administrative API endpoints
Environment cache
JRuby pool



Server-specific Puppet API endpoints
Environment classes
Environment modules
Static file content





Certificate authority and SSL
Puppet Server CA commands
Intermediate CA
Autosigning certificate requests
CSR attributes and certificate extensions
Regenerating certificates in a Puppet deployment
External CA
External SSL termination





Facter  
Facter: CLI
Facter: Core Facts

Custom facts overviewEnvironment facts 

Writing custom facts
External facts
Configuring Facter with facter.conf


PuppetDB

Puppet services and tools
Puppet commands
Running Puppet commands on Windows  

primary Puppet serverAbout Puppet Server

Puppet agent on *nix systems
Puppet agent on Windows
Puppet apply
Puppet device



Puppet reports
Reporting
Report reference
Writing custom report processors
Report format



Life cycle of a Puppet run
Agent-server HTTPS communications
Catalog compilation
Static catalogs 





Using Puppet code
Classifying nodes
Managing environment content with a Puppetfile
Using content from Puppet Forge

Designing system configs (roles and profiles)
The roles and profiles method 
Roles and profiles example 
Designing advanced profiles 
Designing convenient roles 



Separating data (Hiera)
About Hiera  
Getting started with Hiera  
Configuring Hiera
Creating and editing data 
Looking up data with Hiera  
Writing new data backends 

Debugging Hiera
Unexpected values
Common errors


Upgrading to Hiera 5 



Use case examples
Manage NTP
Manage sudo 
Manage DNS
Manage firewall rules
Forge examples





Syntax and settings

The Puppet language
Puppet language overview
Puppet language syntax examples
The Puppet language style guide 
Files and paths on Windows  
Code comments 
Variables
Resources

Resource types
Resource Type Reference (Single-Page)
Built-in types
Optional resource types for Windows
Resource Type: exec
Using exec on Windows  
Resource Type: file
Using file on Windows
Resource Type: filebucket
Resource Type: group
Using user and group on Windows
Resource types overview
Resource Type: notify
Resource Type: package
Using package on Windows  
Resource Type: resources
Resource Type: schedule
Resource Type: service
Using service
Resource Type: stage
Resource Type: tidy
Resource Type: user


Relationships and ordering
Classes
Defined resource types
Bolt tasks
Expressions and operators
Conditional statements and expressions
Function calls
Built-in function reference
Node definitions

Facts and built-in variables
Accessing facts from Puppet code
Built-in variables


Reserved words and acceptable names

Custom resources

Develop types and providers with the Resource APIResource API reference


Low-level method for developing types and providers
Type development
Provider development
Creating resources





Custom functions
Custom functions overview 
Writing custom functions in the Puppet language

Writing custom functions in Ruby
Custom functions in Ruby overview
Ruby function signatures
Using special features in implementation methods
Iterative functions
Refactoring legacy 3.x functions



Deferring a function
Deferred functions overview
Using a template with Deferred values
Write a deferred function to store secrets
Integrations with secret stores





Values, data types, and aliases
Type aliases
Typecasting
Abstract data types
Arrays
Binary
Booleans
Data type syntax
Default
Error data type
Hashes
Numbers
Regular expressions
Resource and class references
Resource types
Sensitive
Strings
Time-related data types
Undef



Templates
Creating templates using Embedded Puppet
Creating templates using Embedded Ruby



Advanced constructs
Iteration and loops
Lambdas
Resource default statements
Resource collectors
Virtual resources
Exported resources
Tags
Run stages



Details of complex behaviors
Containment
Scope
Namespaces and autoloading


Securing sensitive data


Metaparameter reference
Configuration Reference
Built-in function reference

Puppet Man Pages

Core tools
Man Page: puppet agent
Man Page: puppet apply
Man Page: puppet module
Man Page: puppet resource
Man Page: puppet lookup



Occasionally useful
Man Page: puppet config
Man Page: puppet describe
Man Page: puppet device
Man Page: puppet doc
Man Page: puppet help
Man Page: puppet node
Man Page: puppet parser



Niche
Man Page: puppet catalog
Man Page: puppet facts
Man Page: puppet filebucket
Man Page: puppet report







Developing modules

Modules
Modules overview
Plug-ins in modules
Module cheat sheet
Installing and managing modules from the command line
Beginner's guide to writing modules
Module metadata
Documenting modules
Documenting modules with Puppet Strings  
Puppet Strings style guide

Publishing modulesUsing the Forge API

Contributing to Puppet modules


Puppet Development Kit (PDK)
Puppet VSCode extension

PowerShell DSC Resources
Converting DSC Resources
Distributing arbitrary DSC resources
Upgrading Puppet DSC modules 
Troubleshooting DSC Resources 


Ruby API for developing extensions


Managing environment content with a Puppetfile


A Puppetfile specifies detailed information about each
        environment's Puppet code and data.
The Puppetfile also specifies where to locate each
            environment's Puppet code and data, where to install it,
            and whether to update it. r10k uses a Puppetfile to install and manage your environments'
            content.


The Puppetfile


Your control repository's branches represent environments, and each environment might
        have different modules or data. To manage each environment's content, you need a Puppetfile. In the Puppetfile,
        you specify which modules and data you want in each environment.
A Puppetfile is a formatted text file that specifies the
            modules and data you want in your control repository (where each branch of the control
            repo represents an environment). The Puppetfile can
            specify desired module versions, how to load modules and data, and where to place
            modules and data in the environment. In your Puppetfile
            you can declare:
Modules from the Forge.
Modules from Git repositories.
Data and other non-module content (such as Hiera
                    data) from Git repositories.


You can declare as much or as little of this content as needed for each environment. In
            the Puppetfile, each module or repository is specified by
            a mod directive, along with the name of the content and
            other information code management needs to correctly install and maintain the declared
            modules and data.


CAUTION: Please avoid adding executable code to your Puppetfile. This
                practice is not supported and may not work in current or future versions of
                Puppet.



Managing modules with a Puppetfile


Almost all Puppet manifests are kept in
         modules, which are collections of Puppet code
      and data that have a specific directory structure. In open source Puppet, you only use the Puppetfile to install and manage modules.
To learn more about modules in general, refer to the Modules overview in the Puppet documentation.
By default, r10k installs module content in a modules directory in the same directory the Puppetfile is in. For example, with the default settings,
         declaring the puppetlabs-apache module in your Puppetfile installs the apache module into the ./modules/apache directory. However,
         you can Change the module installation directory.

Important: Code management purges any content in your control repo's module directory that is not listed in your Puppetfile. For this reason, if you use r10k, you must not use the puppet
            module command to install or manage modules. Instead, you must declare modules
         in each environment's Puppetfile. Code management uses the
            Puppetfile to install, update, and manage your modules.
         If you use puppet module install to install a module to the
         live code directory, code management deletes the module when it is not found in the Puppetfile.
Declaring your own modules
If you develop your own modules that you maintain in source control, you can declare
            them in your Puppetfile, just like you would declare any
            module from a Git repository. If your modules aren't
            maintained in source control, you'll need to move them to source control so you can
            declare then in your Puppetfile and allow code management
            to install and manage your module in your environments.

Related information
Declare Git repositories in the Puppetfile



Deploying module code
When you change your Puppetfile to install or update a
            module (or when you update a module that you wrote that you've declared in your Puppetfile), you must trigger r10k to deploy the new or updated code to your
            environments.



Create a Puppetfile


The Puppetfile manages an environment's content. When
      you create a Puppetfile, use the mod directive to declare an environment's content.
Before you beginYou must be managing environments with a control repository. These steps assume you
         have set up a control repository that has the production branch as the
         default branch.
These steps explain how to create an initial Puppetfile in your production environment (which is usually the
         default environment). This initial Puppetfile becomes a
         template for your other environments. When you add an evnironment (by creating a branch
         based on the default branch), the new environment inherits a copy of the default
         environment's Puppetfile, which you can then modify on the
         new branch to declare the new environment's content.


On your production branch, in the root directory,
               create a text file named Puppetfile.


Open the new Puppetfile in a text editor, such as
               VS Code.


Declare the production environment's content in the
                  Puppetfile.
Use a mod directive to specify each module or
               repository. Additionally, you need to define the name of the content and any other
               information code management needs to correctly install and maintain the declared
               modules and data. For information and examples of Puppetfile declarations, refer to:
Declare Forge modules in the Puppetfile
Declare Git repositories in the Puppetfile




Tip: Puppet has a VS Code extension that supports syntax highlighting for
                  the Puppet language.



Optional: 
If you want code management to install modules somewhere other than the default
               directory (./modules), use the moduledir directive to Change the module installation directory.


Save and commit your changes.


What to do nextIf you already have multiple branches (environments) in your control repo, you might
         need to copy the Puppetfile to the other branches, and then
         edit each copy according to each environment's module and data requirements. When you add
         an evnironment, the new branch automatically gets a copy of the Puppetfile that you can then edit accordingly for the new
            environment.Creating a Puppetfile is a requirement for
            r10k.


Declare Forge modules in the Puppetfile


When you declare a Forge module in your Puppetfile, you can specify a particular version
                to track and whether you want code management to automatically update the
                module.


Important:
The Puppetfile
does not automatically resolve dependencies for Forge modules. When you
                                        declare a module in your Puppetfile, you must also
                                        declare any required dependent modules.
Forge module symlinks are
                                                not supported. When you install modules with r10k, by
                                        declaring them in your Puppetfile, symlinks are
                                        not installed.

If you have Puppetfiles you used before
                                you started using code management, these files might contain a
                                        forge setting that provides
                                legacy compatibility with librarian-puppet. However, this setting is
                                non-operational for r10k. If
                                you need to configure how Forge
                                modules are downloaded, you must specify forge_settings in Hiera.



In your Puppetfile, use the
                                                mod directive to specify Forge modules you want to
                                        install. Specify the module's full name as a string. For
                                        example, this declaration is for the apache module:

mod 'puppetlabs/apache'

Tip: This basic declaration installs the current
                                                version of the module that is available during the
                                                next code deployment, but it doesn't update the
                                                module on future runs. If you want to keep the
                                                module updated automatically, you need to specify
                                                  :latest, as
                                                described in the next step.



Optional: 
Specify whether you want to maintain a specific version of the
                                        module or if you want r10k to automatically update the module when a
                                        new version is available.

To continuously keep the module current with the
                                                newest version, specify :latest after the module name. For
                                                example:mod 'puppetlabs/ntp', :latest

To install a specific version, and maintain that
                                                version, specify the desired version number, as a
                                                string, after the module name. For
                                                example:mod 'puppetlabs/stdlib', '0.10.0'

To install whichever version is current during the
                                                next code deployment, and stay with that version, do
                                                not specify any options after the module name. For
                                                example:mod 'puppetlabs/apache'




Save and commit your changes.


What to do nextEdit the Puppetfile any time you need to
                        install a module or update a module that is not automatically
                                updated.With r10k, you
                                        must not use the puppet module
                                command to install or manage modules. Because r10k uses the Puppetfile to install, update,
                                and manage your modules, if you use puppet
                                        module install to install a module to the live code
                                directory, r10k deletes the
                                module based on the Puppetfile
                                contents.


Declare Git repositories in the Puppetfile


You can declare your own modules, modules that aren't from the Forge, data, or other non-module content that you want to
        install from Git repositories.


To specify environment content from a Git
                    repository, use the mod directive and specify
                    the content name as a string. Then and use :git
                    to specify the repository location, and :branch
                    to reference a branch. For example:

mod 'apache',
    :git => 'https://github.com/puppetlabs/puppetlabs-apache'
    :branch => '<BRANCH_NAME>'



Optional: 
Specify additional options or alternative configurations, if needed:


For non-module content, you must Specify installation paths for repositories.
Important: Content is installed in the modules
                                directory and treated as a module, unless you use the
                                    :install_path option. You must use
                                    :install_path for non-module
                                content to keep your data separate from your modules.

If the content requires SSH authentication, read about how to Declare module or data content with SSH private key authentication.
By default, content from Git repositories
                            stays updated with the repository's main branch, but you can Keep repository content at a specific version and Declare content from a relative control repo branch.




Save and commit your changes.




Specify installation paths for repositories 

You can set individual installation paths for any Git
    repositories you declare in a Puppetfile.
The :install_path option allows you to separate non-module content in
      your directory structure or to set specific installation paths for individual modules. When
      you set this option for a specific repository, it overrides the moduledir
      setting (which is either the default modules directory or a
      custom path if you Change the module installation directory). 

In your Puppetfile, under the Git repository's mod
          directive, use the :install_path option to declare the
          location where you want to install the content. The path must a string and it must be
          relative to the Puppetfile's location. To install in the
          root directory, specify an empty value.
Content is installed into a subdirectory named after to the content's mod directive. For example, this declaration installs site data
          content from a Git repository into the
            ./hieradata directory:mod 'site_data', 
    :git => 'git@git.example.com:site_data.git',
    :install_path => 'hieradata'
The final file path for this content is ./hieradata/site_data.As another example, this declaration installs site
            data content from a different Git repository into a
              site_data directory at the
            root:mod 'site_data_2',
  :git => 'git@git.example.com:site_data_2.git',
  :install_path => ''
The final file path for this content is ./site_data.




Declare module or data content with SSH private key authentication 

To declare content protected by SSH private keys, declare the content as a Git repository, and then configure the private key setting in
      your code management tool.


Declare the Git repository in your Puppetfile, using the Git repo's SSH URL. For example:

mod 'myco/privatemod',
    :git => 'git@git.example.com:myco/privatemod.git'

Note: If modifying the Puppetfile triggers a code
                  deployment, expect the code deployment to fail. You  must complete the next step
                  to get a successful code deployment.



Configure the private key settings by modifying the following r10k parameters in Hiera:


To set a key for all Git operations, use the
                     private key setting under git-settings.
To set a private key for an individual remote repository, set the private key
                     in the repositories hash in git-settings for
                     each specific remote.




What to do nextAfter completing both steps, you might need to manually trigger a code
         deployment.


Keep repository content at a specific version 

By default, content from Git repositories stays updated
      with the repository's main branch, but you can configure the Puppetfile to maintain repository content at a specific
      version.

To specify a particular repository version you want to track, use one of the following
            options in the Git repository's declaration in your Puppetfile. Setting one of these options maintains the
            repository at the specified version and deploys any updates made to that particular version.

ref: Specifies the Git reference
                  to check out. This option can reference either a tag, a commit, or a branch.

tag: Specifies a certain tag associated with the repo. For
                  example:mod 'apache',
  :git => 'https://github.com/puppetlabs/puppetlabs-apache',
  :tag => '0.9.0'


commit: Specifies a certain commit in the repo. For
                  example:mod 'apache',
  :git    => 'https://github.com/puppetlabs/puppetlabs-apache',
  :commit => '8df51aa'


branch: Specifies a certain branch of the Git repo or Declare content from a relative control repo branch. For
                  example:mod 'apache',
  :git    => 'https://github.com/puppetlabs/puppetlabs-apache',
  :branch => 'proxy_match'



In addition to one of the above options, you can also Set a default branch for content deployment.



Declare content from a relative control repo branch

If you declare a Git repository to track a specific
    branch, you can also specify the :control_branch option, which allows you to
    deploy content from a control repo branch relative to the location of the Puppetfile.
Before you beginThe :control_branch option is a modification of the
        :branch option, which you can use to Keep repository content at a specific version.
Normally, :branch tracks a specifically-named repository branch, such as testing, or a specific feature
        branch. If you specify :branch => :control_branch, it
        locates and tracks a branch in the Git repository that has
        the same name as the control repo branch where the Puppetfile
        is located.
For example, if your Puppetfile is in the production branch, content from the Git repo's production branch is
        deployed. Similarly, if you copy this Puppetfile to your
          testing branch, the tracking from that branch follows the
          Git repo's testing
        branch.

Important: With :control_branch, when you create
        new branches, you don't have to edit the inherited Puppetfile
        as extensively, because the tracked branches remain relative. However, your Git repository branch names must match your control
        repo's branch names for the :control_branch option to work
        successfully. You might want to Set a default branch for content deployment as
        a backup in case no matching branch is found.
Here is an example of a declaration using :control_branch:mod 'hieradata',
  :git    => 'git@git.example.com:organization/hieradata.git',
  :branch => :control_branch



Set a default branch for content deployment

You can specify a default branch that code management can use if it can't deploy the
      specified ref, tag, commit, or
         branch.
Before you beginYou can't use :default_branch by itself. This option
         can only be used in conjunction with :ref, :tag, :commit, or :branch, which are used to Keep repository content at a specific version.
In the Puppetfile, in the content declaration, set the
            :default_branch option to the branch you want to deploy if your
         specified option fails. For example, this declaration tracks the :control_branch and uses the main branch as a
         backup if no matching branch is found.mod 'hieradata',
     :git    => 'git@git.example.com:organization/hieradata.git',
     :branch => :control_branch,
     :default_branch => 'main'

Tip: Specifying a :default_branch is recommended when you Declare content from a relative control repo branch, in case code management can't find
            a matching branch.
If r10k can't parse the
            default branch specification or no such named branch exists, it logs an error and does
            not deploy or update the content.


Change the module installation directory

If needed, you can change the directory where r10k installs modules declared in your Puppetfile.

By default, r10k installs module content in a modules directory in the same directory the Puppetfile is in, such as:
               ./modules/<MODULE_NAME>
To change the module installation path, at the top of your Puppetfile before any module declarations, add the
               moduledir directive, and specify the path to the desired module
            installation directory relative to the Puppetfile's
            location. For
            example:moduledir 'thirdparty'


Important: This directive applies to all content declared in the Puppetfile.If you need to change the installation paths
               for only some modules or data, declare those content sources as Git repositories, and use the install_path option to Specify installation paths for repositories.
               This option overrides the moduledir directive.



 




          Was this page helpful?
        
Yes
No







              Don’t fill this out if you’re human: 






Thank you for your feedback!

            Feel free to add a comment or suggestion.
            





Send
Please enter your feedback





              Don’t fill this out if you’re human: 







            We’re sorry to hear that! 
            Please tell us why so we can help.
          

            Enter your feedback and email. This form is sent to the Puppet docs team.
            We ask for your email as we might contact you regarding your feedback.
          

            If you need help with the product itself, visit Puppet Support
            or ask in Puppet Community on Slack.
          

            Feedback:
            






            Email Address:
            






            To learn about how Puppet uses your personal information,
            visit our privacy policy.
          


Send
Please enter your feedback and contact email

          If you leave us your email, we may contact you regarding your feedback.
          For more information on how Puppet uses your personal information, see
          our
          privacy policy.
        





            Don’t fill this out if you’re human: 








    See an issue? Please file a JIRA ticket in our
    [DOCUMENTATION]
      project.
  











Puppet by Perforce gives IT operations teams back their time and offers peace of mind with infrastructure automation that enables security and compliance.






Legal
Privacy Policy
Terms of Use
Security


©  Puppet, Inc., a Perforce company. All rights reserved.




Puppet and other identified trademarks are the property of Puppet, Inc., Perforce Software, Inc., or an affiliate. Such trademarks are claimed and/or registered in the U.S. and other countries and regions. All third-party trademarks are the property of their respective holders. References to third-party trademarks do not imply endorsement or sponsorship of any products or services by the trademark holder. Contact Puppet, Inc., for further details.

