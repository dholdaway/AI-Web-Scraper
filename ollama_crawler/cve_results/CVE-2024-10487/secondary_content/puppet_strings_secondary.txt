Title: Documenting modules with Puppet Strings
URL: https://www.puppet.com/docs/puppet/7/puppet_strings

Puppet.com
Forge
Education


                                    Try Puppet
                                


































        Docs
        






Products
Puppet Enterprise
Open Source Puppet
Bolt
Security Compliance Management
Continuous Delivery
Puppet Development Kit
Puppet DB
Puppet Plugin for VMware



        Support
        






Get
Technical Support Plans
Support Lifecycle Policy
New Puppet Enterprise Customer?



        Community
        






About Puppet
Company
Developer Experience
Community
Puppet Champions
Puppet Test Pilots
Community Calendar
Slack Channel







 









































PRODUCT AND VERSION


      Current product
      










      Current version
      








Puppet  7.34.0

Release notes

Puppet release notes
Puppet  7.34.0Security


Puppet known issues
Puppet Server release notes
Puppet Server known Issues
PuppetDB release notes (link)

Facter release notes
Facter 4.10.0
Facter 4.9.0
Facter 4.8.0
Facter 4.7.1
Facter 4.7.0
Facter 4.6.1
Facter 4.6.0
Facter 4.5.2


Facter known issues
What's new since Puppet 6?
Upgrading from Puppet 6 to Puppet 7

Experimental featuresMsgpack support

Archived documentation



Puppet overview
What is Puppet?
Why use Puppet desired state management?
Key concepts behind Puppet
The Puppet platform 
Puppet platform lifecycle 
Open source Puppet vs Puppet Enterprise (PE)
The Puppet ecosystem
Use cases
Glossary
Navigating the documentation



Set up Puppet

Install Puppet
System requirements
Installing Puppet  
Installing and configuring agents
Manually verify packages
Managing Platform versions



Configure Puppet settings
Puppet settings
Key configuration settings

Puppet's configuration files
puppet.conf: The main config file
environment.conf: Per-environment settings
fileserver.conf: Custom fileserver mount points
puppetdb.conf: PuppetDB server locations
autosign.conf: Basic certificate autosigning 
csr_attributes.yaml: Certificate extensions 
custom_trusted_oid_mapping.yaml: Short names for cert extension OIDs
device.conf: Network hardware access
routes.yaml: Advanced plugin routing


Adding file server mount points
Checking the values of settings
Editing settings on the command line
Configuration Reference



Upgrading
Upgrade Puppet Server

Upgrade agents
Upgrade agents using the puppet_agent module
Upgrade *nix agents
Upgrade Windows agents
Upgrade macOS agents


Upgrade PuppetDB



Environments
About environments
Creating environments
Environment isolation



Directories and files
Code and data directory (codedir)
Config directory (confdir)
Main manifest directory
The modulepath
SSL directory (ssldir)
Cache directory (vardir)


Report reference



Platform components

Puppet Server
About Puppet Server
Deprecated features
Server and agent compatibility
Installing Puppet Server

Configuring Puppet Server
Configuring Puppet Server

Puppet Server configuration files
auth.conf
ca.conf
global.conf
logback.xml
metrics.conf
product.conf
puppetserver.conf
web-routes.conf
webserver.conf


Migrating to the HOCON auth.conf format
Advanced logging configuration
Differing behavior in puppet.conf



Using and extending Puppet Server
Subcommands
Using Ruby gems
Intermediate CA
Infrastructure certificate revocation list (CRL)
External SSL termination

Server metrics
Monitoring Puppet Server metrics
HTTP Client Metrics


Tuning guide
Applying metrics to improve performance
Submitting usage telemetry
Scaling Puppet Server
Restarting Puppet Server"



Developer information
Developer debugging
Running from source
Tracing code events



Puppet Server HTTP API
Puppet Server HTTP API overview
PSON

Puppet v3 API
Catalog
Node
Facts
File Bucket File
File Content
File Metadata
Report



Puppet v4 APICatalog API


CA v1 API
Certificate
Certificate Request
Certificate Status
Certificate Revocation List
Expirations
Certificate Clean


Schemas (JSON)



API endpoints

Metrics API endpoints
v1 metrics
v2 (Jolokia) metrics



Status API endpoints
Services endpoint
Simple endpoint



Administrative API endpoints
Environment cache
JRuby pool



Server-specific Puppet API endpoints
Environment classes
Environment modules
Static file content





Certificate authority and SSL
Puppet Server CA commands
Intermediate CA
Autosigning certificate requests
CSR attributes and certificate extensions
Regenerating certificates in a Puppet deployment
External CA
External SSL termination





Facter  
Facter: CLI
Facter: Core Facts

Custom facts overviewEnvironment facts 

Writing custom facts
External facts
Configuring Facter with facter.conf


PuppetDB

Puppet services and tools
Puppet commands
Running Puppet commands on Windows  

primary Puppet serverAbout Puppet Server

Puppet agent on *nix systems
Puppet agent on Windows
Puppet apply
Puppet device



Puppet reports
Reporting
Report reference
Writing custom report processors
Report format



Life cycle of a Puppet run
Agent-server HTTPS communications
Catalog compilation
Static catalogs 





Using Puppet code
Classifying nodes
Managing environment content with a Puppetfile
Using content from Puppet Forge

Designing system configs (roles and profiles)
The roles and profiles method 
Roles and profiles example 
Designing advanced profiles 
Designing convenient roles 



Separating data (Hiera)
About Hiera  
Getting started with Hiera  
Configuring Hiera
Creating and editing data 
Looking up data with Hiera  
Writing new data backends 

Debugging Hiera
Unexpected values
Common errors


Upgrading to Hiera 5 



Use case examples
Manage NTP
Manage sudo 
Manage DNS
Manage firewall rules
Forge examples





Syntax and settings

The Puppet language
Puppet language overview
Puppet language syntax examples
The Puppet language style guide 
Files and paths on Windows  
Code comments 
Variables
Resources

Resource types
Resource Type Reference (Single-Page)
Built-in types
Optional resource types for Windows
Resource Type: exec
Using exec on Windows  
Resource Type: file
Using file on Windows
Resource Type: filebucket
Resource Type: group
Using user and group on Windows
Resource types overview
Resource Type: notify
Resource Type: package
Using package on Windows  
Resource Type: resources
Resource Type: schedule
Resource Type: service
Using service
Resource Type: stage
Resource Type: tidy
Resource Type: user


Relationships and ordering
Classes
Defined resource types
Bolt tasks
Expressions and operators
Conditional statements and expressions
Function calls
Built-in function reference
Node definitions

Facts and built-in variables
Accessing facts from Puppet code
Built-in variables


Reserved words and acceptable names

Custom resources

Develop types and providers with the Resource APIResource API reference


Low-level method for developing types and providers
Type development
Provider development
Creating resources





Custom functions
Custom functions overview 
Writing custom functions in the Puppet language

Writing custom functions in Ruby
Custom functions in Ruby overview
Ruby function signatures
Using special features in implementation methods
Iterative functions
Refactoring legacy 3.x functions



Deferring a function
Deferred functions overview
Using a template with Deferred values
Write a deferred function to store secrets
Integrations with secret stores





Values, data types, and aliases
Type aliases
Typecasting
Abstract data types
Arrays
Binary
Booleans
Data type syntax
Default
Error data type
Hashes
Numbers
Regular expressions
Resource and class references
Resource types
Sensitive
Strings
Time-related data types
Undef



Templates
Creating templates using Embedded Puppet
Creating templates using Embedded Ruby



Advanced constructs
Iteration and loops
Lambdas
Resource default statements
Resource collectors
Virtual resources
Exported resources
Tags
Run stages



Details of complex behaviors
Containment
Scope
Namespaces and autoloading


Securing sensitive data


Metaparameter reference
Configuration Reference
Built-in function reference

Puppet Man Pages

Core tools
Man Page: puppet agent
Man Page: puppet apply
Man Page: puppet module
Man Page: puppet resource
Man Page: puppet lookup



Occasionally useful
Man Page: puppet config
Man Page: puppet describe
Man Page: puppet device
Man Page: puppet doc
Man Page: puppet help
Man Page: puppet node
Man Page: puppet parser



Niche
Man Page: puppet catalog
Man Page: puppet facts
Man Page: puppet filebucket
Man Page: puppet report







Developing modules

Modules
Modules overview
Plug-ins in modules
Module cheat sheet
Installing and managing modules from the command line
Beginner's guide to writing modules
Module metadata
Documenting modules
Documenting modules with Puppet Strings  
Puppet Strings style guide

Publishing modulesUsing the Forge API

Contributing to Puppet modules


Puppet Development Kit (PDK)
Puppet VSCode extension

PowerShell DSC Resources
Converting DSC Resources
Distributing arbitrary DSC resources
Upgrading Puppet DSC modules 
Troubleshooting DSC Resources 


Ruby API for developing extensions


Documenting modules with Puppet Strings


Produce complete, user-friendly module documentation by
        using Puppet Strings. Strings
        uses tags and code comments, along with the source code, to generate documentation for a
        module's classes, defined types, functions, tasks, plans, and resource types and
        providers.
 If you are a module author, add descriptive tags and comments with
            the code for each element (class, defined type, function, or plan) in your module. Strings extracts information from the module's Puppet and Ruby code, such
            as data types and attribute defaults. Whenever you update code, update your
            documentation comments at the same time. Both module users and authors can generate
            module documentation with Strings. Even if the module
            contains no code comments, Strings generates minimal
            documentation based on the information it can extract from the code.

Strings outputs documentation in HTML, JSON, or Markdown
                formats.
HTML output, which you can read in any
                        web browser, includes the module README and reference documentation for all
                        classes, defined types, functions, tasks, task plans, and resource
                        types.
JSON output includes the reference
                        documentation only, and writes it to either STDOUT or to a file.
Markdown output includes the reference
                        documentation only, and writes the information to a REFERENCE.md
                    file.



Puppet Strings is based on the YARD Ruby documentation tool. To learn more about YARD, see
            the YARD documentation.


Related information
Documenting modules
Puppet Strings style guide


Install Puppet Strings


Before you can generate module documentation, you must
        install the Puppet Strings gem.
Before you begin

Puppet Strings requires:
Ruby 2.1.9 or newer.
Puppet 4.0 or newer.
The yard
Ruby gem.




If you don't have the yard gem installed yet, install it by
                    running gem install
                        yard


Install the puppet-strings gem by running gem install
                    puppet-strings




Generating documentation with strings

Generate documentation in HTML, JSON, or Markdown by
        running Puppet Strings.

Strings creates reference documentation
            based on the code and comments in all Puppet and Ruby source files in the following module
                subdirectories:
manifests/
functions/
lib/
types/
tasks/
plans/
By default, Strings outputs HTML of the reference
            information and the module README to the module's doc/ directory. You can open and read the generated HTML
            documentation in any browser. If you specify JSON or Markdown output, documentation
            includes the reference information only. Strings writes
            Markdown output to a REFERENCE.md file and sends JSON output to STDOUT , but you can specify a custom file
            destination for Markdown and JSON output.


Generate and view documentation in HTML

To generate HTML documentation for a Puppet module, run Strings
        from that module's directory.


Change directory into the module by running
                        cd
                        /modules/<MODULE_NAME>



Generate documentation with the puppet strings command:


To generate the documentation for the
                            entire module, run puppet strings



To generate the documentation for specific
                            files or directories in a module, run the puppet strings generate
                            subcommand, and specify the files or directories as a space-separated
                            list. 

For
                                example:

puppet strings generate first.pp second.pp

puppet strings generate 'modules/apache/lib/**/*.rb' 'modules/apache/manifests/**/*.pp' 'modules/apache/functions/**/*.pp'






Results

Strings outputs HTML to the doc/ directory in the module. To view the
                generated HTML documentation for a module, open the index.html file in the module's doc/ folder. To view
                HTML documentation for all of your local modules, run puppet strings server from any directory.
                This command serves documentation for all modules in the module path at http://localhost:8808.
                To learn more about the modulepath, see the modulepath
                documentation.


Generate and view documentation in Markdown

To generate reference documentation in Markdown, specify
        the markdown format when you
        run Puppet Strings. 
The reference
                documentation includes descriptions, usage details, and parameter information for
                classes, defined types, functions, tasks, plans, and resource types and providers.
                

Strings generates Markdown output as a REFERENCE.md file in the
                main module directory, but you can specify a different filename or location with
                command line options.


Change directory into the module: cd
                        /modules/<MODULE_NAME>



Run the command: puppet strings generate --format
                        markdown . To specify a different file, use the --out option and specify the
                    path and filename:
puppet strings generate --format markdown --out docs/INFO.md


Results
View the Markdown file by
                opening it in a text editor or Markdown viewer. 


Generate documentation in JSON

To generate reference documentation as JSON output to a
        file or to standard output, specify the json format when you run Strings.
Generate JSON output if
                you want to use the documentation in a custom application that reads JSON. By
                default, Strings prints JSON output to STDOUT. For details
                about Strings JSON output, see the Strings JSON schema. 


Change directory into the module: cd
                        /modules/<MODULE_NAME>



Run the command: puppet strings generate --format json
                    . To generate JSON documentation to a file instead, use the --out option and specify a
                    filename:
puppet strings generate --format json --out documentation.json




Publish module documentation to GitHub Pages

To make your module documentation available on GitHub Pages, generate and publish HTML documentation with a
            Strings Rake task.

The strings:gh_pages:update Rake task is available in the puppet-strings/tasks directory.
                This Rake task keeps the gh-pages branch up to date with your current code, performing the
                following actions:
Creates a doc directory in the
                            root of your project, if it doesn't already exist.
Creates a gh-pages branch of
                            the current repository, if it doesn't already exist.
Checks out the gh-pages branch of
                            the current repository.
Generates Strings HTML documentation.
Commits the documentation file and
                            pushes it to the gh-pages branch with the --force flag.
 To learn more about publishing on GitHub Pages,
                see the GitHub Pages
                    documentation.



If this is the first time you are running this
                    task, you must first update your Gemfile and Rakefile.


Add the following to your Gemfile to use
                            puppet-strings: ruby gem 'puppet-strings'


Add the following to your Rakefile to use
                            the puppet-strings tasks: ruby require
                                'puppet-strings/tasks'




To generate, push, and publish your module's Strings documentation, run strings:gh_pages:update


Results
The documentation is
                published after the task pushes the updated documentation to GitHub Pages. 



Puppet Strings command reference

 Modify the behavior of Puppet Strings by specifying command actions and
    options. 

puppet strings command
Generates module documentation based on code and code
        comments. By default, running puppet
          strings generates HTML documentation for a module into a ./doc/ directory within that module.
 To pass options or arguments, such as specifying Markdown or JSON
        output, use the generate
        action.
 Usage:
        puppet strings [--generate] [--server]









Action
Description




generate
Generates documentation with any specified parameters,
                including format and output location.


server
Serves documentation locally at http://localhost:8808 for all
                modules in the modulepath. For information about the modulepath, see the modulepath documentation.




puppet strings generate action
Generates documentation with any specified parameters,
        including format and output location.
Usage:
        puppet strings generate [--format <FORMAT>][--out <DESTINATION>] [<ARGUMENTS>]
        For example: 

puppet strings generate --format markdown --out docs/info.md
puppet strings generate manifest1.pp manifest2.pp











Option
Description
Values
Default





--format

Specifies a format for documentation.
Markdown, JSON
If not specified, outputs HTML documentation.



--out

Specifies an output location for
                  documentation.
A valid directory location and filename.
If not specified, outputs to default locations
                  depending on format:
HTML: ./doc/
Markdown: main module
                        directory)
JSON: STDOUT




Filenames or directory paths
Outputs documentation for only specified files or
                  directories.
Valid filenames or directory paths
If not specified, outputs documentation for the entire
                  module. 



--debug, -d

Logs debug information.
None.
If not specified, does not log debug
                  information.



--help

Displays help documentation for the command.
None.
If specified, returns help information.



--markup
                    <FORMAT>

The markup format to use for documentation

"markdown"
"textile"
"rdoc"
"ruby"
"text"
"html"
"none"

If no --format is specified, outputs HTML.



--verbose, -v

Logs verbosely.
None.
If not specified, logs basic
                  information. 




puppet strings server action
Serves documentation locally at http://localhost:8808 for all modules in
        the module path.
Usage:
puppet strings server [--markup <FORMAT>][[module_name]...][--modulepath <PATH>]
For example: 

puppet strings server --modulepath path/to/modules
puppet strings server concat











Option
Description
Values
Default





--markup
                    <FORMAT>

The markup format to use for documentation

"markdown"
"textile"
"rdoc"
"ruby"
"text"
"html"
"none"

If no --format is specified, outputs HTML.



--debug, -d

Logs debug information.
None.
If not specified, does not log debug
                  information.



--help

Displays help documentation for the command.
None.
If specified, returns help information.



Module name

Generates documentation for the named module
                  only.
A valid module name.
If not specified, generates documentation for all
                  modules in the modulepath. 



--modulepath

Puppet option for setting the modulepath.
A valid path.
Defaults to the module path specified in the puppet.conf
                  file.



--verbose, -v

Logs verbosely.
None.
If not specified, logs basic
                  information. 



Available Strings tags


@author
List the author or authors of a class, module, or
              method.# @author Foo Bar
class MyClass; end




@api

Describes the resource as belonging to the private or public
              API. To mark a module element, such as a class, as private, specify as private:
              # @api private


@example

Shows an example snippet of code for an object. The first line
              is an optional title, and any subsequent lines are automatically formatted as a code
              snippet. Use for specific examples of a given component. Use one example tag per
              example.

@param

Documents a parameter with a given name, type and optional
              description.

@!puppet.type.param

Documents dynamic type parameters. See the documenting resource
              types in the Strings style guide for detailed information.

@!puppet.type.property

Documents dynamic type properties. See the documenting resource
              types in the Strings style guide for detailed information.

@option

Used with a @param tag to defines what optional parameters the user can
              pass in an options hash to the method. For example:
                # @param [Hash] opts
  #      List of options
  # @option opts [String] :option1
  #      option 1 in the hash
  # @option opts [Array] :option2
  #      option 2 in the hash


@raise

Documents any exceptions that can be raised by the given
              component. For
              example: # @raise PuppetError this error is raised if x


@return

Describes the return value (and type or types) of a method. You
              can list multiple return tags for a method if the method has distinct return cases. In
              this case, begin each case with "if". For example:
              # An example 4.x function.
   Puppet::Functions.create_function(:example) do
     # @param first The first parameter.
     # @param second The second parameter.
     # @return [String] If second argument is less than 10, the name of one item.
     # @return [Array] If second argument is greater than 10, a list of item names.
     # @example Calling the function.
     #   example('hi', 10)
     dispatch :example do
       param 'String', :first
       param 'Integer', :second
     end
     # ...
   end


@see

Adds "see also" references. Accepts URLs or other code objects
              with an optional description at the end. The URL or object is automatically linked by
              YARD and does not need markup formatting. Appears in the generated documentation as a
              "See Also" section. Use one tag per reference, such as a website or related
              method.

@since

Lists the version in which the object was first added. Strings
              does not verify that the specified version exists. You are responsible for providing
              accurate information.

@summary

A description of the documented item, of 140 characters or
              fewer. 



 




          Was this page helpful?
        
Yes
No







              Don’t fill this out if you’re human: 






Thank you for your feedback!

            Feel free to add a comment or suggestion.
            





Send
Please enter your feedback





              Don’t fill this out if you’re human: 







            We’re sorry to hear that! 
            Please tell us why so we can help.
          

            Enter your feedback and email. This form is sent to the Puppet docs team.
            We ask for your email as we might contact you regarding your feedback.
          

            If you need help with the product itself, visit Puppet Support
            or ask in Puppet Community on Slack.
          

            Feedback:
            






            Email Address:
            






            To learn about how Puppet uses your personal information,
            visit our privacy policy.
          


Send
Please enter your feedback and contact email

          If you leave us your email, we may contact you regarding your feedback.
          For more information on how Puppet uses your personal information, see
          our
          privacy policy.
        





            Don’t fill this out if you’re human: 








    See an issue? Please file a JIRA ticket in our
    [DOCUMENTATION]
      project.
  











Puppet by Perforce gives IT operations teams back their time and offers peace of mind with infrastructure automation that enables security and compliance.






Legal
Privacy Policy
Terms of Use
Security


©  Puppet, Inc., a Perforce company. All rights reserved.




Puppet and other identified trademarks are the property of Puppet, Inc., Perforce Software, Inc., or an affiliate. Such trademarks are claimed and/or registered in the U.S. and other countries and regions. All third-party trademarks are the property of their respective holders. References to third-party trademarks do not imply endorsement or sponsorship of any products or services by the trademark holder. Contact Puppet, Inc., for further details.

