Title: CSR attributes and certificate extensions
URL: https://www.puppet.com/docs/puppet/7/ssl_attributes_extensions

Puppet.com
Forge
Education


                                    Try Puppet
                                


































        Docs
        






Products
Puppet Enterprise
Open Source Puppet
Bolt
Security Compliance Management
Continuous Delivery
Puppet Development Kit
Puppet DB
Puppet Plugin for VMware



        Support
        






Get
Technical Support Plans
Support Lifecycle Policy
New Puppet Enterprise Customer?



        Community
        






About Puppet
Company
Developer Experience
Community
Puppet Champions
Puppet Test Pilots
Community Calendar
Slack Channel







 









































PRODUCT AND VERSION


      Current product
      










      Current version
      








Puppet  7.34.0

Release notes

Puppet release notes
Puppet  7.34.0Security


Puppet known issues
Puppet Server release notes
Puppet Server known Issues
PuppetDB release notes (link)

Facter release notes
Facter 4.10.0
Facter 4.9.0
Facter 4.8.0
Facter 4.7.1
Facter 4.7.0
Facter 4.6.1
Facter 4.6.0
Facter 4.5.2


Facter known issues
What's new since Puppet 6?
Upgrading from Puppet 6 to Puppet 7

Experimental featuresMsgpack support

Archived documentation



Puppet overview
What is Puppet?
Why use Puppet desired state management?
Key concepts behind Puppet
The Puppet platform 
Puppet platform lifecycle 
Open source Puppet vs Puppet Enterprise (PE)
The Puppet ecosystem
Use cases
Glossary
Navigating the documentation



Set up Puppet

Install Puppet
System requirements
Installing Puppet  
Installing and configuring agents
Manually verify packages
Managing Platform versions



Configure Puppet settings
Puppet settings
Key configuration settings

Puppet's configuration files
puppet.conf: The main config file
environment.conf: Per-environment settings
fileserver.conf: Custom fileserver mount points
puppetdb.conf: PuppetDB server locations
autosign.conf: Basic certificate autosigning 
csr_attributes.yaml: Certificate extensions 
custom_trusted_oid_mapping.yaml: Short names for cert extension OIDs
device.conf: Network hardware access
routes.yaml: Advanced plugin routing


Adding file server mount points
Checking the values of settings
Editing settings on the command line
Configuration Reference



Upgrading
Upgrade Puppet Server

Upgrade agents
Upgrade agents using the puppet_agent module
Upgrade *nix agents
Upgrade Windows agents
Upgrade macOS agents


Upgrade PuppetDB



Environments
About environments
Creating environments
Environment isolation



Directories and files
Code and data directory (codedir)
Config directory (confdir)
Main manifest directory
The modulepath
SSL directory (ssldir)
Cache directory (vardir)


Report reference



Platform components

Puppet Server
About Puppet Server
Deprecated features
Server and agent compatibility
Installing Puppet Server

Configuring Puppet Server
Configuring Puppet Server

Puppet Server configuration files
auth.conf
ca.conf
global.conf
logback.xml
metrics.conf
product.conf
puppetserver.conf
web-routes.conf
webserver.conf


Migrating to the HOCON auth.conf format
Advanced logging configuration
Differing behavior in puppet.conf



Using and extending Puppet Server
Subcommands
Using Ruby gems
Intermediate CA
Infrastructure certificate revocation list (CRL)
External SSL termination

Server metrics
Monitoring Puppet Server metrics
HTTP Client Metrics


Tuning guide
Applying metrics to improve performance
Submitting usage telemetry
Scaling Puppet Server
Restarting Puppet Server"



Developer information
Developer debugging
Running from source
Tracing code events



Puppet Server HTTP API
Puppet Server HTTP API overview
PSON

Puppet v3 API
Catalog
Node
Facts
File Bucket File
File Content
File Metadata
Report



Puppet v4 APICatalog API


CA v1 API
Certificate
Certificate Request
Certificate Status
Certificate Revocation List
Expirations
Certificate Clean


Schemas (JSON)



API endpoints

Metrics API endpoints
v1 metrics
v2 (Jolokia) metrics



Status API endpoints
Services endpoint
Simple endpoint



Administrative API endpoints
Environment cache
JRuby pool



Server-specific Puppet API endpoints
Environment classes
Environment modules
Static file content





Certificate authority and SSL
Puppet Server CA commands
Intermediate CA
Autosigning certificate requests
CSR attributes and certificate extensions
Regenerating certificates in a Puppet deployment
External CA
External SSL termination





Facter  
Facter: CLI
Facter: Core Facts

Custom facts overviewEnvironment facts 

Writing custom facts
External facts
Configuring Facter with facter.conf


PuppetDB

Puppet services and tools
Puppet commands
Running Puppet commands on Windows  

primary Puppet serverAbout Puppet Server

Puppet agent on *nix systems
Puppet agent on Windows
Puppet apply
Puppet device



Puppet reports
Reporting
Report reference
Writing custom report processors
Report format



Life cycle of a Puppet run
Agent-server HTTPS communications
Catalog compilation
Static catalogs 





Using Puppet code
Classifying nodes
Managing environment content with a Puppetfile
Using content from Puppet Forge

Designing system configs (roles and profiles)
The roles and profiles method 
Roles and profiles example 
Designing advanced profiles 
Designing convenient roles 



Separating data (Hiera)
About Hiera  
Getting started with Hiera  
Configuring Hiera
Creating and editing data 
Looking up data with Hiera  
Writing new data backends 

Debugging Hiera
Unexpected values
Common errors


Upgrading to Hiera 5 



Use case examples
Manage NTP
Manage sudo 
Manage DNS
Manage firewall rules
Forge examples





Syntax and settings

The Puppet language
Puppet language overview
Puppet language syntax examples
The Puppet language style guide 
Files and paths on Windows  
Code comments 
Variables
Resources

Resource types
Resource Type Reference (Single-Page)
Built-in types
Optional resource types for Windows
Resource Type: exec
Using exec on Windows  
Resource Type: file
Using file on Windows
Resource Type: filebucket
Resource Type: group
Using user and group on Windows
Resource types overview
Resource Type: notify
Resource Type: package
Using package on Windows  
Resource Type: resources
Resource Type: schedule
Resource Type: service
Using service
Resource Type: stage
Resource Type: tidy
Resource Type: user


Relationships and ordering
Classes
Defined resource types
Bolt tasks
Expressions and operators
Conditional statements and expressions
Function calls
Built-in function reference
Node definitions

Facts and built-in variables
Accessing facts from Puppet code
Built-in variables


Reserved words and acceptable names

Custom resources

Develop types and providers with the Resource APIResource API reference


Low-level method for developing types and providers
Type development
Provider development
Creating resources





Custom functions
Custom functions overview 
Writing custom functions in the Puppet language

Writing custom functions in Ruby
Custom functions in Ruby overview
Ruby function signatures
Using special features in implementation methods
Iterative functions
Refactoring legacy 3.x functions



Deferring a function
Deferred functions overview
Using a template with Deferred values
Write a deferred function to store secrets
Integrations with secret stores





Values, data types, and aliases
Type aliases
Typecasting
Abstract data types
Arrays
Binary
Booleans
Data type syntax
Default
Error data type
Hashes
Numbers
Regular expressions
Resource and class references
Resource types
Sensitive
Strings
Time-related data types
Undef



Templates
Creating templates using Embedded Puppet
Creating templates using Embedded Ruby



Advanced constructs
Iteration and loops
Lambdas
Resource default statements
Resource collectors
Virtual resources
Exported resources
Tags
Run stages



Details of complex behaviors
Containment
Scope
Namespaces and autoloading


Securing sensitive data


Metaparameter reference
Configuration Reference
Built-in function reference

Puppet Man Pages

Core tools
Man Page: puppet agent
Man Page: puppet apply
Man Page: puppet module
Man Page: puppet resource
Man Page: puppet lookup



Occasionally useful
Man Page: puppet config
Man Page: puppet describe
Man Page: puppet device
Man Page: puppet doc
Man Page: puppet help
Man Page: puppet node
Man Page: puppet parser



Niche
Man Page: puppet catalog
Man Page: puppet facts
Man Page: puppet filebucket
Man Page: puppet report







Developing modules

Modules
Modules overview
Plug-ins in modules
Module cheat sheet
Installing and managing modules from the command line
Beginner's guide to writing modules
Module metadata
Documenting modules
Documenting modules with Puppet Strings  
Puppet Strings style guide

Publishing modulesUsing the Forge API

Contributing to Puppet modules


Puppet Development Kit (PDK)
Puppet VSCode extension

PowerShell DSC Resources
Converting DSC Resources
Distributing arbitrary DSC resources
Upgrading Puppet DSC modules 
Troubleshooting DSC Resources 


Ruby API for developing extensions


CSR attributes and certificate extensions

When Puppet agent nodes
        request their certificates, the certificate signing request (CSR) usually contains only
        their certname and the necessary cryptographic information. Agents can also embed additional
        data in their CSR, useful for policy-based autosigning and for adding new trusted
        facts.
Embedding additional data into CSRs is useful when:
Large numbers of nodes are regularly
                        created and destroyed as part of an elastic scaling system.
You are willing to build custom
                        tooling to make certificate autosigning more secure and useful.
It might also be useful in deployments where Puppet
            is used to deploy private keys or other sensitive information, and you want extra
            control over nodes that receive this data.
If your deployment doesn’t match one of these descriptions, you might
            not need this feature.


Timing: When data can be added to CSRs and
                        certificates


When Puppet agent starts the process of
                                    requesting a catalog, it checks whether it has a valid signed
                                    certificate. If it does not, it generates a key pair, crafts a
                                    CSR, and submits it to the certificate authority (CA) Puppet Server. For detailed information, see agent/server HTTPS traffic.
For practical purposes, a certificate is locked and
                                    immutable as soon as it is signed. For data to persist in the
                                    certificate, it has to be added to the CSR before the
                                    CA signs the certificate.
This means any desired extra data must be
                                                present before Puppet agent attempts to
                                    request its catalog for the first time.
Populate any extra data when provisioning the node. If
                                    you make an error, see the Troubleshooting section below for
                                    information about recovering from failed data
                                    embedding.


Data location and format

Extra data for the CSR is read from the csr_attributes.yaml file in Puppet's confdir. The location of this file can be changed with the
            csr_attributes
        configuration setting.
The csr_attributes.yaml file must contain a YAML hash with one or both of
            the following keys: 

custom_attributes


extension_requests



The value of each key must also be a hash, where: 
Each key is a valid object identifier (OID) — 
Puppet-specific OIDscan optionally
                        be referenced by short name instead of by numeric ID. 
Each value is an object that can be
                        cast to a string — numbers are allowed but arrays are not.


For information about how each hash is used and recommended OIDs for
            each hash, see the sections below.


Custom attributes (transient CSR data)

Custom attributes are pieces of data that
        are embedded only in the CSR. The CA can use them when deciding whether to sign the
        certificate, but they are discarded after that and aren’t transferred to the final
        certificate.
Default behavior
The puppetserver ca list command doesn’t
                display custom attributes for pending CSRs, and basic autosigning (autosign.conf) doesn’t check them before signing.

Configurable behavior
If you use policy-based
                    autosigning your policy executable receives the complete CSR in PEM
                format. The executable can extract and inspect the custom attributes, and use them
                to decide whether to sign the certificate.
The simplest method is to embed a pre-shared key of some kind in the custom
                attributes. A policy executable can compare it to a list of known keys and autosign
                certificates for any pre-authorized nodes.
A more complex use might be to embed an instance-specific ID and write a policy
                executable that can check it against a list of your recently requested instances on
                a public cloud, like EC2 or GCE.

Manually checking for custom attributes in CSRs
You can check for custom attributes by using OpenSSL to dump a CSR in pem format to text format, by running this
                command:openssl req -noout -text -in <name>.pem

In the output, look for the Attributes section which
                appears below the Subject Public Key Info
                block: Attributes:
    challengePassword        :342thbjkt82094y0uthhor289jnqthpc2290


Recommended OIDs for attributes
Custom attributes can use any public or site-specific OID, with the exception of
                the OIDs used for core X.509 functionality. This means you can’t re-use
                existing OIDs for things like subject alternative names.
One useful OID is the challengePassword attribute
                    — 1.2.840.113549.1.9.7. This is a
                rarely-used corner of X.509 that can easily be repurposed to hold a pre-shared key.
                The benefit of using this instead of an arbitrary OID is that it appears by name
                when using OpenSSL to dump the CSR to text; OIDs that openssl req can’t recognize are displayed as numerical
                strings.
You can also use the 
Puppet-specific OIDs. 



Extension requests (permanent certificate data)

Extension requests are pieces of data that are transferred as extensions to the final
        certificate, when the CA signs the CSR. They persist as trusted, immutable data, that cannot
        be altered after the certificate is signed.
They can also be used by the CA when deciding whether or not to sign
            the certificate.
Default behavior
When signing a certificate, Puppet’s CA tools transfer
                any extension requests into the final certificate.
You can access certificate extensions in manifests as $trusted["extensions"]["<EXTENSION OID>"].
Select OIDs in the ppRegCertExt and ppAuthCertExt ranges. See the Puppet-specific Registered IDs. By
                default, any other OIDs appear as plain dotted numbers, but you can use the 
custom_trusted_oid_mapping.yaml
 file to assign short names to any other OIDs you use at your site. If you
                do, those OIDs appear in $trusted as their short
                names, instead of their full numerical OID.
For more information about $trusted, see Facts and built-in variables.
The visibility of extensions is limited:

The puppetserver ca
                            list command does not display custom attributes
                            for any pending CSRs, and basic
                                autosigning (autosign.conf) doesn’t
                            check them before signing. Either use policy-based
                                autosigning or inspect CSRs manually with
                                the openssl command (see
                            below).




Puppet’s authorization system (auth.conf) does not use certificate extensions, but 
Puppet Server’s authorization system, which is
                based on trapperkeeper-authorization, can use
                extensions in the ppAuthCertExt OID range, and
                requires them for requests to write access rules.

Configurable behavior
If you use policy-based autosigning, your
                policy executable receives the complete CSR in pem
                format. The executable can extract and inspect the extension requests, and use them
                when deciding whether to sign the certificate.

Manually checking for extensions in CSRs and certificates
You can check for extension requests in a CSR by running the OpenSSL command to dump
                a CSR in pem format to text format:

openssl req -noout -text -in <name>.pem

In the output, look for a section called Requested
                    Extensions, which appears below the Subject
                    Public Key Info and Attributes
                blocks:

Requested Extensions:
    pp_uuid:
    .$ED803750-E3C7-44F5-BB08-41A04433FE2E
    1.3.6.1.4.1.34380.1.1.3:
    ..my_ami_image
    1.3.6.1.4.1.34380.1.1.4:
    .$342thbjkt82094y0uthhor289jnqthpc2290



Note: Every extension is preceded by any combination of two characters
                        (.$ and ..
                    in the example above) that contain ASN.1 encoding information. Because OpenSSL
                    is unaware of Puppet’s custom extensions OIDs,
                    it’s unable to properly display the values.

Any Puppet-specific OIDs (see below) appear as numeric
                strings when using OpenSSL.
You can check for extensions in a signed certificate by running:
/opt/puppetlabs/puppet/bin/openssl x509 -noout -text -in $(puppet config print signeddir)/<certname>.pem
In the output, look for the X509v3 extensions
                section. Any of the Puppet-specific registered OIDs appear as their
                descriptive names:
X509v3 extensions:
    Netscape Comment:
        Puppet Ruby/OpenSSL Internal Certificate
    X509v3 Subject Key Identifier:
        47:BC:D5:14:33:F2:ED:85:B9:52:FD:A2:EA:E4:CC:00:7F:7F:19:7E
    Puppet Node UUID:
        ED803750-E3C7-44F5-BB08-41A04433FE2E
    X509v3 Extended Key Usage: critical
        TLS Web Server Authentication, TLS Web Client Authentication
    X509v3 Basic Constraints: critical
        CA:FALSE
    Puppet Node Preshared Key:
        342thbjkt82094y0uthhor289jnqthpc2290
    X509v3 Key Usage: critical
        Digital Signature, Key Encipherment
    Puppet Node Image Name:
        my_ami_image

Recommended OIDs for extensions
Extension request OIDs must be under the ppRegCertExt
                    (1.3.6.1.4.1.34380.1.1), ppPrivCertExt (1.3.6.1.4.1.34380.1.2),
                or ppAuthCertExt (1.3.6.1.4.1.34380.1.3) OID arcs.
Puppet provides several registered OIDs (under ppRegCertExt) for the most common kinds of extension information, a
                private OID range (ppPrivCertExt) for site-specific
                extension information, and an OID range for safe authorization to Puppet Server (ppAuthCertExt).
There are several benefits to using the registered OIDs:

You can reference them in the csr_attributes.yaml file with their short names instead of
                            their numeric IDs.


You can access them in $trusted[extensions] with their short names instead of
                            their numeric IDs.


When using Puppet tools to print certificate info, they appear using
                            their descriptive names instead of their numeric IDs.



The private range is available for any information you want to embed into a
                certificate that isn’t widely used already. It is completely unregulated, and its
                contents are expected to be different in every Puppet
                deployment.
You can use the custom_trusted_oid_mapping.yaml file to set short
                names for any private extension OIDs you use. Note that this enables only the short
                names in the $trusted[extensions] hash.




Puppet-specific registered IDs


Granting administrative access to endpoints
Most of the endpoints require admin access. To grant admin access to the Puppet certificate authority API, on the primary Puppet server, run the following command with the
                    –ca-client  flag:
puppetserver ca generate
By running this command, you generate a certificate with the pp_cli_auth extension, which grants admin access to the Puppet certificate authority API.

ppRegCertExt
The ppRegCertExt OID range contains the following
                OIDs as reserved names to use as values when signing trusted certificates:










Numeric ID
Short name
Descriptive name





1.3.6.1.4.1.34380.1.1.26


pp_owner


Puppet node owner



1.3.6.1.4.1.34380.1.1.1
pp_uuid

Puppet node UUID


1.3.6.1.4.1.34380.1.1.2
pp_instance_id

Puppet node instance
                                    ID


1.3.6.1.4.1.34380.1.1.3
pp_image_name

Puppet node image name


1.3.6.1.4.1.34380.1.1.4
pp_preshared_key

Puppet node preshared
                                    key


1.3.6.1.4.1.34380.1.1.5
pp_cost_center

Puppet node cost center
                                    name


1.3.6.1.4.1.34380.1.1.6
pp_product

Puppet node product
                                    name


1.3.6.1.4.1.34380.1.1.7
pp_project

Puppet node project
                                    name


1.3.6.1.4.1.34380.1.1.8
pp_application

Puppet node application
                                    name


1.3.6.1.4.1.34380.1.1.9
pp_service

Puppet node service
                                    name


1.3.6.1.4.1.34380.1.1.10
pp_employee

Puppet node employee
                                    name


1.3.6.1.4.1.34380.1.1.11
pp_created_by

Puppet node created_by tag


1.3.6.1.4.1.34380.1.1.12
pp_environment

Puppet node environment
                                    name


1.3.6.1.4.1.34380.1.1.13
pp_role

Puppet node role name


1.3.6.1.4.1.34380.1.1.14
pp_software_version

Puppet node software
                                    version


1.3.6.1.4.1.34380.1.1.15
pp_department

Puppet node department
                                    name


1.3.6.1.4.1.34380.1.1.16
pp_cluster

Puppet node cluster
                                    name


1.3.6.1.4.1.34380.1.1.17
pp_provisioner

Puppet node provisioner
                                    name


1.3.6.1.4.1.34380.1.1.18
pp_region

Puppet node region
                                    name


1.3.6.1.4.1.34380.1.1.19
pp_datacenter

Puppet node datacenter
                                    name


1.3.6.1.4.1.34380.1.1.20
pp_zone

Puppet node zone name


1.3.6.1.4.1.34380.1.1.21
pp_network

Puppet node network
                                    name


1.3.6.1.4.1.34380.1.1.22
pp_securitypolicy

Puppet node security policy
                                    name


1.3.6.1.4.1.34380.1.1.23
pp_cloudplatform

Puppet node cloud platform
                                    name


1.3.6.1.4.1.34380.1.1.24
pp_apptier

Puppet node application
                                    tier


1.3.6.1.4.1.34380.1.1.25
pp_hostname

Puppet node hostname





ppAuthCertExt
The ppAuthCertExt OID range contains the following OIDs:








Numeric ID
Short name
Descriptive name




1.3.6.1.4.1.34380.1.3.1
pp_authorization
Certificate extension authorization


1.3.6.1.4.1.34380.1.3.13
pp_auth_role

Puppet node role name for
                                    authorization. For PE internal use only.







Cloud provider attributes and extensions population
        example

To populate the csr_attributes.yaml file when you provision a node, use
        an automated script such as cloud-init.
For example, when provisioning a new node from the AWS EC2 dashboard, enter the following script into the
                Configure Instance Details —>
                Advanced Details section:
#!/bin/sh
if [ ! -d /etc/puppetlabs/puppet ]; then
   mkdir /etc/puppetlabs/puppet
fi
cat > /etc/puppetlabs/puppet/csr_attributes.yaml << YAML
custom_attributes:
    1.2.840.113549.1.9.7: mySuperAwesomePassword
extension_requests:
    pp_instance_id: $(curl -s http://169.254.169.254/latest/meta-data/instance-id)
    pp_image_name:  $(curl -s http://169.254.169.254/latest/meta-data/ami-id)
YAML
This populates the attributes file with the AWS instance ID, image name, and a pre-shared key to use
            with policy-based autosigning.


Troubleshooting


Recovering from failed data embedding
When testing this feature for the first time, you might not embed the right
                information in a CSR, or certificate, and might want to start over for your test
                nodes. This is not really a problem after your provisioning system is changed to
                populate the data, but it can easily happen when doing things manually.
To start over, do the following.
On the test node: 

Turn off Puppet agent, if it’s running.
                        


If using Puppet version 6.0.3 or greater,
                            run puppet ssl clean. If not, delete the
                            following files:



$ssldir/certificate_requests/<name>.pem




 $ssldir/certs/<name>.pem 






On the CA primary Puppet server: 

Check whether a signed certificate exists. Use puppetserver ca list --all to see the
                            complete list. If it exists, revoke and delete it with puppetserver ca clean --certname
                                <name>. 



After you’ve done that, you can start over.


 




          Was this page helpful?
        
Yes
No







              Don’t fill this out if you’re human: 






Thank you for your feedback!

            Feel free to add a comment or suggestion.
            





Send
Please enter your feedback





              Don’t fill this out if you’re human: 







            We’re sorry to hear that! 
            Please tell us why so we can help.
          

            Enter your feedback and email. This form is sent to the Puppet docs team.
            We ask for your email as we might contact you regarding your feedback.
          

            If you need help with the product itself, visit Puppet Support
            or ask in Puppet Community on Slack.
          

            Feedback:
            






            Email Address:
            






            To learn about how Puppet uses your personal information,
            visit our privacy policy.
          


Send
Please enter your feedback and contact email

          If you leave us your email, we may contact you regarding your feedback.
          For more information on how Puppet uses your personal information, see
          our
          privacy policy.
        





            Don’t fill this out if you’re human: 








    See an issue? Please file a JIRA ticket in our
    [DOCUMENTATION]
      project.
  











Puppet by Perforce gives IT operations teams back their time and offers peace of mind with infrastructure automation that enables security and compliance.






Legal
Privacy Policy
Terms of Use
Security


©  Puppet, Inc., a Perforce company. All rights reserved.




Puppet and other identified trademarks are the property of Puppet, Inc., Perforce Software, Inc., or an affiliate. Such trademarks are claimed and/or registered in the U.S. and other countries and regions. All third-party trademarks are the property of their respective holders. References to third-party trademarks do not imply endorsement or sponsorship of any products or services by the trademark holder. Contact Puppet, Inc., for further details.

