Title: Ruby function signatures
URL: https://www.puppet.com/docs/puppet/7/functions_ruby_signatures

Puppet.com
Forge
Education


                                    Try Puppet
                                


































        Docs
        






Products
Puppet Enterprise
Open Source Puppet
Bolt
Security Compliance Management
Continuous Delivery
Puppet Development Kit
Puppet DB
Puppet Plugin for VMware



        Support
        






Get
Technical Support Plans
Support Lifecycle Policy
New Puppet Enterprise Customer?



        Community
        






About Puppet
Company
Developer Experience
Community
Puppet Champions
Puppet Test Pilots
Community Calendar
Slack Channel







 









































PRODUCT AND VERSION


      Current product
      










      Current version
      








Puppet  7.34.0

Release notes

Puppet release notes
Puppet  7.34.0Security


Puppet known issues
Puppet Server release notes
Puppet Server known Issues
PuppetDB release notes (link)

Facter release notes
Facter 4.10.0
Facter 4.9.0
Facter 4.8.0
Facter 4.7.1
Facter 4.7.0
Facter 4.6.1
Facter 4.6.0
Facter 4.5.2


Facter known issues
What's new since Puppet 6?
Upgrading from Puppet 6 to Puppet 7

Experimental featuresMsgpack support

Archived documentation



Puppet overview
What is Puppet?
Why use Puppet desired state management?
Key concepts behind Puppet
The Puppet platform 
Puppet platform lifecycle 
Open source Puppet vs Puppet Enterprise (PE)
The Puppet ecosystem
Use cases
Glossary
Navigating the documentation



Set up Puppet

Install Puppet
System requirements
Installing Puppet  
Installing and configuring agents
Manually verify packages
Managing Platform versions



Configure Puppet settings
Puppet settings
Key configuration settings

Puppet's configuration files
puppet.conf: The main config file
environment.conf: Per-environment settings
fileserver.conf: Custom fileserver mount points
puppetdb.conf: PuppetDB server locations
autosign.conf: Basic certificate autosigning 
csr_attributes.yaml: Certificate extensions 
custom_trusted_oid_mapping.yaml: Short names for cert extension OIDs
device.conf: Network hardware access
routes.yaml: Advanced plugin routing


Adding file server mount points
Checking the values of settings
Editing settings on the command line
Configuration Reference



Upgrading
Upgrade Puppet Server

Upgrade agents
Upgrade agents using the puppet_agent module
Upgrade *nix agents
Upgrade Windows agents
Upgrade macOS agents


Upgrade PuppetDB



Environments
About environments
Creating environments
Environment isolation



Directories and files
Code and data directory (codedir)
Config directory (confdir)
Main manifest directory
The modulepath
SSL directory (ssldir)
Cache directory (vardir)


Report reference



Platform components

Puppet Server
About Puppet Server
Deprecated features
Server and agent compatibility
Installing Puppet Server

Configuring Puppet Server
Configuring Puppet Server

Puppet Server configuration files
auth.conf
ca.conf
global.conf
logback.xml
metrics.conf
product.conf
puppetserver.conf
web-routes.conf
webserver.conf


Migrating to the HOCON auth.conf format
Advanced logging configuration
Differing behavior in puppet.conf



Using and extending Puppet Server
Subcommands
Using Ruby gems
Intermediate CA
Infrastructure certificate revocation list (CRL)
External SSL termination

Server metrics
Monitoring Puppet Server metrics
HTTP Client Metrics


Tuning guide
Applying metrics to improve performance
Submitting usage telemetry
Scaling Puppet Server
Restarting Puppet Server"



Developer information
Developer debugging
Running from source
Tracing code events



Puppet Server HTTP API
Puppet Server HTTP API overview
PSON

Puppet v3 API
Catalog
Node
Facts
File Bucket File
File Content
File Metadata
Report



Puppet v4 APICatalog API


CA v1 API
Certificate
Certificate Request
Certificate Status
Certificate Revocation List
Expirations
Certificate Clean


Schemas (JSON)



API endpoints

Metrics API endpoints
v1 metrics
v2 (Jolokia) metrics



Status API endpoints
Services endpoint
Simple endpoint



Administrative API endpoints
Environment cache
JRuby pool



Server-specific Puppet API endpoints
Environment classes
Environment modules
Static file content





Certificate authority and SSL
Puppet Server CA commands
Intermediate CA
Autosigning certificate requests
CSR attributes and certificate extensions
Regenerating certificates in a Puppet deployment
External CA
External SSL termination





Facter  
Facter: CLI
Facter: Core Facts

Custom facts overviewEnvironment facts 

Writing custom facts
External facts
Configuring Facter with facter.conf


PuppetDB

Puppet services and tools
Puppet commands
Running Puppet commands on Windows  

primary Puppet serverAbout Puppet Server

Puppet agent on *nix systems
Puppet agent on Windows
Puppet apply
Puppet device



Puppet reports
Reporting
Report reference
Writing custom report processors
Report format



Life cycle of a Puppet run
Agent-server HTTPS communications
Catalog compilation
Static catalogs 





Using Puppet code
Classifying nodes
Managing environment content with a Puppetfile
Using content from Puppet Forge

Designing system configs (roles and profiles)
The roles and profiles method 
Roles and profiles example 
Designing advanced profiles 
Designing convenient roles 



Separating data (Hiera)
About Hiera  
Getting started with Hiera  
Configuring Hiera
Creating and editing data 
Looking up data with Hiera  
Writing new data backends 

Debugging Hiera
Unexpected values
Common errors


Upgrading to Hiera 5 



Use case examples
Manage NTP
Manage sudo 
Manage DNS
Manage firewall rules
Forge examples





Syntax and settings

The Puppet language
Puppet language overview
Puppet language syntax examples
The Puppet language style guide 
Files and paths on Windows  
Code comments 
Variables
Resources

Resource types
Resource Type Reference (Single-Page)
Built-in types
Optional resource types for Windows
Resource Type: exec
Using exec on Windows  
Resource Type: file
Using file on Windows
Resource Type: filebucket
Resource Type: group
Using user and group on Windows
Resource types overview
Resource Type: notify
Resource Type: package
Using package on Windows  
Resource Type: resources
Resource Type: schedule
Resource Type: service
Using service
Resource Type: stage
Resource Type: tidy
Resource Type: user


Relationships and ordering
Classes
Defined resource types
Bolt tasks
Expressions and operators
Conditional statements and expressions
Function calls
Built-in function reference
Node definitions

Facts and built-in variables
Accessing facts from Puppet code
Built-in variables


Reserved words and acceptable names

Custom resources

Develop types and providers with the Resource APIResource API reference


Low-level method for developing types and providers
Type development
Provider development
Creating resources





Custom functions
Custom functions overview 
Writing custom functions in the Puppet language

Writing custom functions in Ruby
Custom functions in Ruby overview
Ruby function signatures
Using special features in implementation methods
Iterative functions
Refactoring legacy 3.x functions



Deferring a function
Deferred functions overview
Using a template with Deferred values
Write a deferred function to store secrets
Integrations with secret stores





Values, data types, and aliases
Type aliases
Typecasting
Abstract data types
Arrays
Binary
Booleans
Data type syntax
Default
Error data type
Hashes
Numbers
Regular expressions
Resource and class references
Resource types
Sensitive
Strings
Time-related data types
Undef



Templates
Creating templates using Embedded Puppet
Creating templates using Embedded Ruby



Advanced constructs
Iteration and loops
Lambdas
Resource default statements
Resource collectors
Virtual resources
Exported resources
Tags
Run stages



Details of complex behaviors
Containment
Scope
Namespaces and autoloading


Securing sensitive data


Metaparameter reference
Configuration Reference
Built-in function reference

Puppet Man Pages

Core tools
Man Page: puppet agent
Man Page: puppet apply
Man Page: puppet module
Man Page: puppet resource
Man Page: puppet lookup



Occasionally useful
Man Page: puppet config
Man Page: puppet describe
Man Page: puppet device
Man Page: puppet doc
Man Page: puppet help
Man Page: puppet node
Man Page: puppet parser



Niche
Man Page: puppet catalog
Man Page: puppet facts
Man Page: puppet filebucket
Man Page: puppet report







Developing modules

Modules
Modules overview
Plug-ins in modules
Module cheat sheet
Installing and managing modules from the command line
Beginner's guide to writing modules
Module metadata
Documenting modules
Documenting modules with Puppet Strings  
Puppet Strings style guide

Publishing modulesUsing the Forge API

Contributing to Puppet modules


Puppet Development Kit (PDK)
Puppet VSCode extension

PowerShell DSC Resources
Converting DSC Resources
Distributing arbitrary DSC resources
Upgrading Puppet DSC modules 
Troubleshooting DSC Resources 


Ruby API for developing extensions


Ruby function signatures

Functions can specify how many arguments they expect, and a
    data type for each argument. The rule set for a functionâ€™s arguments is called
      a signature.

Because Puppet functions support more
      advanced argument checking than Ruby does, the Ruby functions API uses a lightweight domain-specific language
      (DSL) to specify signatures.

Ruby functions can have multiple signatures. Using multiple
      signatures is an easy way to have a function behave differently when passed by different types
      or quantities of arguments. Instead of writing complex logic to decide what to do, you can
      write separate implementations and let Puppet select the
      correct signature. 
If a function has multiple signatures, Puppet uses its data type system to check each signature in order, comparing the allowed arguments
      to the arguments that were actually passed. As soon as Puppet
      finds a signature that can accept the provided arguments, it calls the associated
      implementation method, passing the arguments to that method. When the method finishes running
      and returns a value, Puppet uses that as the functionâ€™s return
      value. If none of the functionâ€™s signatures match the provided arguments, Puppet fails compilation and logs an error message describing the
      mismatch between the provided and expected arguments.
Conversion of Puppet and Ruby data types
When function arguments are passed to a Ruby method, theyâ€™re
        converted to Ruby objects. Similarly, when the Puppet manifest regains control, it converts the methodâ€™s
        return value into a Puppet data type.

Puppet converts data types between the Puppet language and Ruby as
        follows: 








Puppet


Ruby






Boolean


Boolean




Undef


NilClass (value nil) 



String


String




Number

subtype of Numeric




Array


Array




Hash


Hash




Default


Symbol (value :default) 



Regexp


Regexp




Resource reference


Puppet::Pops::Types::PResourceType, or
                    Puppet::Pops::Types::PHostClassType




Lambda
                  (code block) 

Puppet::Pops::Evaluator::Closure




Data
                    type (Type) 
A type class under Puppet::Pops::Types. For
                  example, Puppet::Pops::Types::PIntegerType





Tip: When writing iterative functions, use iterative types instead of Puppet types.


Writing signatures with dispatch

To write a signature, use the dispatch method.
The dispatch method takes: 


The name of an implementation method, provided as a Ruby
            symbol. The corresponding method must be defined somewhere in the create_function block, usually after all the signatures. 


A block of code which only contains calls to the parameter and return methods. 



# A signature that takes a single string argument
  dispatch :camelcase do
    param 'String', :input_string
    return_type 'String' # optional
  end


Using parameter methods
In the code block of a dispatch statement, you can specify
        arguments with special parameter methods. All of these methods take two arguments: 


The allowed data type for the argument, as a string. Types are specified using Puppetâ€™s data type syntax. 


A user-facing name for the argument, as a symbol. This name is only used in
            documentation and error messages; it doesnâ€™t have to match the argument names in the
            implementation method. 


The order in which you call these methods is important: the functionâ€™s first argument goes
        first, followed by the second, and so on. The following parameter methods are available:









Model name
Description





param or required_param


A mandatory argument. You can use any number of these.

Position: All mandatory arguments must come first.




optional_param


An argument that can be omitted. You can use any number of these. When there
                    are multiple optional arguments, users can only pass latter ones if they also
                    provide values for the prior ones. This also applies to repeated arguments. 

Position: Must come after any required arguments. 




repeated_param or optional_repeated_param


A repeatable argument, which can receive zero or more values. A signature can
                    only use one repeatable argument. 

Position: Must come after any non-repeating arguments. 




required_repeated_param


A repeatable argument, which must receive one or more values. A signature can
                    only use one repeatable argument. 

Position: Must come after any non-repeating arguments. 




block_param or required_block_param


A mandatory lambda (block of Puppet code). A
                    signature can only use one block. 

Position: Must come after all other arguments. 




optional_block_param


An optional lambda. A signature can only use one block. 

Position: Must come after all other arguments. 





When specifying a repeatable argument, note that: 


In your implementation method, the repeatable argument appears as an array, which
            contains all the provided values that werenâ€™t assigned to earlier, non-repeatable
            arguments. 


The specified data type is matched against each value for the repeatable argument, not
            the repeatable argument as a whole. For example, if you want to accept any number of
            numbers, specify repeated_param 'Numeric', :values_to_average,
              not repeated_param 'Array[Numeric]', :values_to_average. 


For lambdas, note that:


The data type for a block argument is Callable, or a
              Variant that only contains Callables. 


The Callable type can optionally specify the type and
            quantity of parameters that the lambda accepts. For example, Callable[String, String] matches any lambda that can be called with a pair
            of strings.



Matching arguments with implementation methods
The implementation method that corresponds to a signature must be able to accept any
        combination of arguments that the signature might allow. 
If the signature has optional arguments, the corresponding method arguments need default
        values. Otherwise, the function fails if the arguments are omitted. For
        example:dispatch :epp do
  required_param 'String', :template_file
  optional_param 'Hash', :parameters_hash
end

def epp(template_file, parameters_hash = {})
  # Note that parameters_hash defaults to an empty hash.
endIf the signature has a repeatable argument, the method must use a splat
        parameter (*args) as its final argument. For
        example:dispatch :average do
  required_repeated_param 'Numeric', :values_to_average
end

def average(*values)
  # Inside the method, the `values` variable is an array of numbers.
end


Using the return_type method
After specifying a signatureâ€™s arguments, you can use the return_type method to specify the data type of its return value. This method
        takes one argument: a Puppet data type, specified as a
        string. 

dispatch :camelcase do
  param 'String', :input_string
  return_type 'String'
endThe return type serves two purposes: documentation, and insurance. 



Puppet Strings can include information about the return
            value of a function. 


If something goes wrong and your function returns the wrong type (like nil when a string is expected), it fails early with an
            informative error instead of allowing compilation to continue with an incorrect value.
          



Specifying aliases using local_types

If you're using complicated abstract data types to validate arguments, and you're using
        these data types in multiple signatures, they can become difficult to work with and
        maintain. In these cases, you can specify short aliases for your complex data types and use
        the aliases in your signatures.
To specify aliases, use the local_types method: 


You must call local_types only one time, before any
            signatures. 


The local_types method takes a lambda, which only
            contains calls to the type method.


The type method takes a single string argument, in the
            form '<NAME> = <TYPE>'. 


Capitalize the name, camel case word (PartColor),
                similar to a Ruby class name or the existing Puppet data types. 


The type is a valid Puppet data type. 




Example:local_types do
  type 'PartColor = Enum[blue, red, green, mauve, teal, white, pine]'
  type 'Part = Enum[cubicle_wall, chair, wall, desk, carpet]'
  type 'PartToColorMap = Hash[Part, PartColor]'
end

dispatch :define_colors do
  param 'PartToColorMap', :part_color_map
end

def define_colors(part_color_map)
  # etc
end


Using automatic signatures
If your function only needs one signature, and youâ€™re willing to skip the APIâ€™s data type
        checking, you can use an automatic signature. Be aware that there are some drawbacks to
        using automatic signatures. 
Although functions with automatic signatures are simpler to write, they give worse error
        messages when called incorrectly. You'll get a useful error if you call the function with
        the wrong number of arguments, but if you give the wrong type of argument, youâ€™ll get
        something unhelpful. For example, if you pass the function above a number instead of a
        string, it reports Error: Evaluation Error: Error while evaluating a
          Function Call, undefined method 'split' for 5:Fixnum at /Users/nick/Desktop/test2.pp:7:8
          on node magpie.lan.

If it's possible that your function will be used by anyone other than yourself, support
        your users by writing a signature with dispatch.
To use an automatic signature:


Do not write a dispatch block.


Define one implementation method whose name matches the final namespace segment of the
            functionâ€™s name.



Puppet::Functions.create_function(:'stdlib::camelcase') do
  def camelcase(str)
    str.split('_').map{|e| e.capitalize}.join
  end
end

In this case, because the last segment of stdlib::camelcase
        is camelcase, we must define a method named camelcase.
Related topics: Ruby symbols, Abstract data types. 


 




          Was this page helpful?
        
Yes
No







              Donâ€™t fill this out if youâ€™re human: 






Thank you for your feedback!

            Feel free to add a comment or suggestion.
            





Send
Please enter your feedback





              Donâ€™t fill this out if youâ€™re human: 







            Weâ€™re sorry to hear that! 
            Please tell us why so we can help.
          

            Enter your feedback and email. This form is sent to the Puppet docs team.
            We ask for your email as we might contact you regarding your feedback.
          

            If you need help with the product itself, visit Puppet Support
            or ask in Puppet Community on Slack.
          

            Feedback:
            






            Email Address:
            






            To learn about how Puppet uses your personal information,
            visit our privacy policy.
          


Send
Please enter your feedback and contact email

          If you leave us your email, we may contact you regarding your feedback.
          For more information on how Puppet uses your personal information, see
          our
          privacy policy.
        





            Donâ€™t fill this out if youâ€™re human: 








    See an issue? Please file a JIRA ticket in our
    [DOCUMENTATION]
      project.
  











Puppet by Perforce gives IT operations teams back their time and offers peace of mind with infrastructure automation that enables security and compliance.






Legal
Privacy Policy
Terms of Use
Security


Â©  Puppet, Inc., a Perforce company. All rights reserved.




Puppet and other identified trademarks are the property of Puppet, Inc., Perforce Software, Inc., or an affiliate. Such trademarks are claimed and/or registered in the U.S. and other countries and regions. All third-party trademarks are the property of their respective holders. References to third-party trademarks do not imply endorsement or sponsorship of any products or services by the trademark holder. Contact Puppet, Inc., for further details.

