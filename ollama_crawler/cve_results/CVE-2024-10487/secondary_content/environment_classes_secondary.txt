Title: Environment classes
URL: https://www.puppet.com/docs/puppet/7/server/puppet-api/v3/environment_classes

Puppet.com
Forge
Education


                                    Try Puppet
                                


































        Docs
        






Products
Puppet Enterprise
Open Source Puppet
Bolt
Security Compliance Management
Continuous Delivery
Puppet Development Kit
Puppet DB
Puppet Plugin for VMware



        Support
        






Get
Technical Support Plans
Support Lifecycle Policy
New Puppet Enterprise Customer?



        Community
        






About Puppet
Company
Developer Experience
Community
Puppet Champions
Puppet Test Pilots
Community Calendar
Slack Channel







 









































PRODUCT AND VERSION


      Current product
      










      Current version
      








Puppet  7.34.0

Release notes

Puppet release notes
Puppet  7.34.0Security


Puppet known issues
Puppet Server release notes
Puppet Server known Issues
PuppetDB release notes (link)

Facter release notes
Facter 4.10.0
Facter 4.9.0
Facter 4.8.0
Facter 4.7.1
Facter 4.7.0
Facter 4.6.1
Facter 4.6.0
Facter 4.5.2


Facter known issues
What's new since Puppet 6?
Upgrading from Puppet 6 to Puppet 7

Experimental featuresMsgpack support

Archived documentation



Puppet overview
What is Puppet?
Why use Puppet desired state management?
Key concepts behind Puppet
The Puppet platform 
Puppet platform lifecycle 
Open source Puppet vs Puppet Enterprise (PE)
The Puppet ecosystem
Use cases
Glossary
Navigating the documentation



Set up Puppet

Install Puppet
System requirements
Installing Puppet  
Installing and configuring agents
Manually verify packages
Managing Platform versions



Configure Puppet settings
Puppet settings
Key configuration settings

Puppet's configuration files
puppet.conf: The main config file
environment.conf: Per-environment settings
fileserver.conf: Custom fileserver mount points
puppetdb.conf: PuppetDB server locations
autosign.conf: Basic certificate autosigning 
csr_attributes.yaml: Certificate extensions 
custom_trusted_oid_mapping.yaml: Short names for cert extension OIDs
device.conf: Network hardware access
routes.yaml: Advanced plugin routing


Adding file server mount points
Checking the values of settings
Editing settings on the command line
Configuration Reference



Upgrading
Upgrade Puppet Server

Upgrade agents
Upgrade agents using the puppet_agent module
Upgrade *nix agents
Upgrade Windows agents
Upgrade macOS agents


Upgrade PuppetDB



Environments
About environments
Creating environments
Environment isolation



Directories and files
Code and data directory (codedir)
Config directory (confdir)
Main manifest directory
The modulepath
SSL directory (ssldir)
Cache directory (vardir)


Report reference



Platform components

Puppet Server
About Puppet Server
Deprecated features
Server and agent compatibility
Installing Puppet Server

Configuring Puppet Server
Configuring Puppet Server

Puppet Server configuration files
auth.conf
ca.conf
global.conf
logback.xml
metrics.conf
product.conf
puppetserver.conf
web-routes.conf
webserver.conf


Migrating to the HOCON auth.conf format
Advanced logging configuration
Differing behavior in puppet.conf



Using and extending Puppet Server
Subcommands
Using Ruby gems
Intermediate CA
Infrastructure certificate revocation list (CRL)
External SSL termination

Server metrics
Monitoring Puppet Server metrics
HTTP Client Metrics


Tuning guide
Applying metrics to improve performance
Submitting usage telemetry
Scaling Puppet Server
Restarting Puppet Server"



Developer information
Developer debugging
Running from source
Tracing code events



Puppet Server HTTP API
Puppet Server HTTP API overview
PSON

Puppet v3 API
Catalog
Node
Facts
File Bucket File
File Content
File Metadata
Report



Puppet v4 APICatalog API


CA v1 API
Certificate
Certificate Request
Certificate Status
Certificate Revocation List
Expirations
Certificate Clean


Schemas (JSON)



API endpoints

Metrics API endpoints
v1 metrics
v2 (Jolokia) metrics



Status API endpoints
Services endpoint
Simple endpoint



Administrative API endpoints
Environment cache
JRuby pool



Server-specific Puppet API endpoints
Environment classes
Environment modules
Static file content





Certificate authority and SSL
Puppet Server CA commands
Intermediate CA
Autosigning certificate requests
CSR attributes and certificate extensions
Regenerating certificates in a Puppet deployment
External CA
External SSL termination





Facter  
Facter: CLI
Facter: Core Facts

Custom facts overviewEnvironment facts 

Writing custom facts
External facts
Configuring Facter with facter.conf


PuppetDB

Puppet services and tools
Puppet commands
Running Puppet commands on Windows  

primary Puppet serverAbout Puppet Server

Puppet agent on *nix systems
Puppet agent on Windows
Puppet apply
Puppet device



Puppet reports
Reporting
Report reference
Writing custom report processors
Report format



Life cycle of a Puppet run
Agent-server HTTPS communications
Catalog compilation
Static catalogs 





Using Puppet code
Classifying nodes
Managing environment content with a Puppetfile
Using content from Puppet Forge

Designing system configs (roles and profiles)
The roles and profiles method 
Roles and profiles example 
Designing advanced profiles 
Designing convenient roles 



Separating data (Hiera)
About Hiera  
Getting started with Hiera  
Configuring Hiera
Creating and editing data 
Looking up data with Hiera  
Writing new data backends 

Debugging Hiera
Unexpected values
Common errors


Upgrading to Hiera 5 



Use case examples
Manage NTP
Manage sudo 
Manage DNS
Manage firewall rules
Forge examples





Syntax and settings

The Puppet language
Puppet language overview
Puppet language syntax examples
The Puppet language style guide 
Files and paths on Windows  
Code comments 
Variables
Resources

Resource types
Resource Type Reference (Single-Page)
Built-in types
Optional resource types for Windows
Resource Type: exec
Using exec on Windows  
Resource Type: file
Using file on Windows
Resource Type: filebucket
Resource Type: group
Using user and group on Windows
Resource types overview
Resource Type: notify
Resource Type: package
Using package on Windows  
Resource Type: resources
Resource Type: schedule
Resource Type: service
Using service
Resource Type: stage
Resource Type: tidy
Resource Type: user


Relationships and ordering
Classes
Defined resource types
Bolt tasks
Expressions and operators
Conditional statements and expressions
Function calls
Built-in function reference
Node definitions

Facts and built-in variables
Accessing facts from Puppet code
Built-in variables


Reserved words and acceptable names

Custom resources

Develop types and providers with the Resource APIResource API reference


Low-level method for developing types and providers
Type development
Provider development
Creating resources





Custom functions
Custom functions overview 
Writing custom functions in the Puppet language

Writing custom functions in Ruby
Custom functions in Ruby overview
Ruby function signatures
Using special features in implementation methods
Iterative functions
Refactoring legacy 3.x functions



Deferring a function
Deferred functions overview
Using a template with Deferred values
Write a deferred function to store secrets
Integrations with secret stores





Values, data types, and aliases
Type aliases
Typecasting
Abstract data types
Arrays
Binary
Booleans
Data type syntax
Default
Error data type
Hashes
Numbers
Regular expressions
Resource and class references
Resource types
Sensitive
Strings
Time-related data types
Undef



Templates
Creating templates using Embedded Puppet
Creating templates using Embedded Ruby



Advanced constructs
Iteration and loops
Lambdas
Resource default statements
Resource collectors
Virtual resources
Exported resources
Tags
Run stages



Details of complex behaviors
Containment
Scope
Namespaces and autoloading


Securing sensitive data


Metaparameter reference
Configuration Reference
Built-in function reference

Puppet Man Pages

Core tools
Man Page: puppet agent
Man Page: puppet apply
Man Page: puppet module
Man Page: puppet resource
Man Page: puppet lookup



Occasionally useful
Man Page: puppet config
Man Page: puppet describe
Man Page: puppet device
Man Page: puppet doc
Man Page: puppet help
Man Page: puppet node
Man Page: puppet parser



Niche
Man Page: puppet catalog
Man Page: puppet facts
Man Page: puppet filebucket
Man Page: puppet report







Developing modules

Modules
Modules overview
Plug-ins in modules
Module cheat sheet
Installing and managing modules from the command line
Beginner's guide to writing modules
Module metadata
Documenting modules
Documenting modules with Puppet Strings  
Puppet Strings style guide

Publishing modulesUsing the Forge API

Contributing to Puppet modules


Puppet Development Kit (PDK)
Puppet VSCode extension

PowerShell DSC Resources
Converting DSC Resources
Distributing arbitrary DSC resources
Upgrading Puppet DSC modules 
Troubleshooting DSC Resources 


Ruby API for developing extensions

Environment classes
The environment classes API serves as a replacement for the Puppet resource type API
for classes, which was removed in Puppet 5.
Changes in the environment classes API
Compared to the resource type API, the environment classes API covers different things,
returns new or different information, and omits some information.
Covers classes only
The environment classes API covers only classes, whereas the resource type API covers
classes, node definitions, and defined types.Changes class information caching behavior
Queries to the resource type API use cached class information per the configuration of the
environment_timeout setting, as set in the corresponding environment's
environment.conf file. The environment classes API does not use the value of
environment_timeout with respect to the data that it caches. Instead, only when the
environment-class-cache-enabled setting in the jruby-puppet configuration section is
set to true, the environment classes API uses HTTP Etags to represent specific
versions of the class information. And it uses the Puppet Server environment cache API as an
explicit mechanism for marking an Etag as expired. See the
Headers and caching behavior section for more information
about caching and invalidation of entries.Uses typed values
The environment classes API includes a type, if defined for a class parameter. For
example, if the class parameter were defined as String $some_str, the type parameter
would hold a value of String.Provides default literal values
For values that can be presented in pure JSON, the environment classes API provides a
default_literal form of a class parameter's default value. For example, if an Integer
type class parameter were defined in the manifest as having a default value of 3, the
default_literal element for the parameter will contain a JSON Number type of 3.Lacks filters
The environment classes API does not provide a way to filter the list of classes returned
via use of a search string. The environment classes API returns information for all
classes found within an environment's manifest files.Includes filenames
Unlike the resource type API in Puppet 4, the environment classes API does include the
filename in which each class was found. The resource type API in Puppet 3 does include
the filename, but the resource type API under Puppet 4 does not.Lacks line numbers
The environment classes API does not include the line number at which a class is found in
the file.Lacks documentation strings (vs. Puppet 3)
Unlike the resource type API in Puppet 3, the environment classes API does not include
any doc strings for a class entry. Note that doc strings are also not returned for class
entries in the Puppet 4 resource type API.Returns file entries for manifests with no classes
The environment classes API returns a file entry for manifests that exist in the
environment but in which no classes were found. The resource type API omits entries for
files which do not contain any classes.Uses application/json Content-Type
The Content-Type in the response to an environment classes API query is
application/json, whereas the resource type API uses a Content-Type of text/pson.Includes successfully parsed classes, even if some return errors, and returns error messages

The environment classes API includes information for every class that can successfully
be parsed. For any errors which occur when parsing individual manifest files, the response
includes an entry for the corresponding manifest file, along with an error and detail
string about the failure.
In comparison, if an error is encountered when parsing a manifest, the resource type API omits
information from the manifest entirely. It includes class information from other manifests that it
successfully parsed, assuming none of the parsing
errors were found in one of the files associated with the environment's
manifest setting. If one or more classes is returned but errors were
encountered parsing other manifests, the response from the resource type API call doesn't
include any explicit indication that a parsing error was encountered.
GET /puppet/v3/environment_classes?environment=:environment

(Introduced in Puppet Server 2.3.0.)
Making a request with no query parameters is not supported and returns an HTTP 400 (Bad
Request) response.

Supported HTTP Methods
GETSupported Formats
JSONQuery Parameters

Provide one parameter to the GET request:
environment: Only the classes and parameter information pertaining to the specified
environment will be returned for the call.
Responses

GET request with results
GET /puppet/v3/environment_classes?environment=env

HTTP/1.1 200 OK
Etag: b02ede6ecc432b134217a1cc681c406288ef9224
Content-Type: application/json

{
  "files": [
    {
      "path": "/etc/puppetlabs/code/environments/env/manifests/site.pp",
      "classes": []
    },
    {
      "path": "/etc/puppetlabs/code/environments/env/modules/mymodule/manifests/init.pp",
      "classes": [
        {
          "name": "mymodule",
          "params": [
            {
              "default_literal": "this is a string",
              "default_source": "\"this is a string\"",
              "name": "a_string",
              "type": "String"
            },
            {
              "default_literal": 3,
              "default_source": "3",
              "name": "an_integer",
              "type": "Integer"
            }
          ]
        }
      ]
    },
    {
      "error": "Syntax error at '=>' at /etc/puppetlabs/code/environments/env/modules/mymodule/manifests/other.pp:20:19",
      "path": "/etc/puppetlabs/code/environments/env/modules/mymodule/manifests/other.pp"
    }
  ],
  "name": "env"
}GET request with Etag roundtripped from a previous GET request

If you send the Etag value that was returned from the previous request to the server
in a follow-up request, and the underlying environment cache has not been invalidated, the
server will return an HTTP 304 (Not Modified) response. See the
Headers and Caching Behavior section for more
information about caching and invalidation of entries.
GET /puppet/v3/environment_classes?environment=env
If-None-Match: b02ede6ecc432b134217a1cc681c406288ef9224

HTTP/1.1 304 Not Modified
Etag: b02ede6ecc432b134217a1cc681c406288ef9224
If the environment cache has been updated from what was used to calculate the original
Etag, the server will return a response with the full set of environment class
information:
GET /puppet/v3/environment_classes?environment=env
If-None-Match: b02ede6ecc432b134217a1cc681c406288ef9224

HTTP/1.1 200 OK
Etag: 2f4f83096265b9741c5304b3055f866df0336762
Content-Type: application/json

{
  "files": [
    {
      "path": "/etc/puppetlabs/code/environments/env/manifests/site.pp",
      "classes": []
    },
    {
      "path": "/etc/puppetlabs/code/environments/env/modules/mymodule/manifests/init.pp",
      "classes": [
        {
          "name": "mymodule",
          "params": [
            {
              "default_literal": "this is a string",
              "default_source": "\"this is a string\"",
              "name": "a_string",
              "type": "String"
            },
            {
              "default_literal": 3,
              "default_source": "3",
              "name": "an_integer",
              "type": "Integer"
            },
            {
              "default_literal": {
                "one": "foo",
                "two": "hello"
              },
              "default_source": "{ \"one\" => \"foo\", \"two\" => \"hello\" }",
              "name": "a_hash",
              "type": "Hash"
            }
          ]
        }
      ]
    }
  ],
  "name": "env"
}
Environment does not exist

If you send a request with an environment parameter that doesn't correspond to the name of a
directory environment on the server, the server returns an HTTP 404 (Not Found) error:
GET /puppet/v3/environment_classes?environment=doesnotexist

HTTP/1.1 404 Not Found

Could not find environment 'doesnotexist'
No environment given
GET /puppet/v3/environment_classes

HTTP/1.1 400 Bad Request

You must specify an environment parameter.Environment parameter specified with no value
GET /puppet/v3/environment_classes?environment=

HTTP/1.1 400 Bad Request

The environment must be purely alphanumeric, not ''Environment includes non-alphanumeric characters

If the environment parameter in your request includes any characters that are
not A-Z, a-z, 0-9, or _ (underscore), the server returns an HTTP 400 (Bad Request) error:
GET /puppet/v3/environment_classes?environment=bog|us

HTTP/1.1 400 Bad Request

The environment must be purely alphanumeric, not 'bog|us'
Schema
An environment classes response body conforms to the
environment classes schema.Headers and Caching Behavior

If the environment-class-cache-enabled setting in the jruby-puppet configuration
section is set to true, the environment classes API caches the response data. This
can provide a significant performance benefit by reducing the amount of data that
needs to be provided in a response when the underlying Puppet code on disk remains
unchanged from one request to the next. Use of the cache does, however, require that cache
entries are invalidated after Puppet code has been updated.
To avoid invalidated cache entries, you can omit the environment-class-cache-enabled
setting from a node's configuration or set it to false. In this case, the server
discovers and parses manifests for every incoming request. This can significantly increase
bandwidth overhead for repeated requests, particularly when there are few
changes to the underlying Puppet code. However, this approach ensures that the
latest available data is returned to every request.

Behaviors when the environment class cache is enabled

When the environment-class-cache-enabled setting is set to true, the response to a
query to the environment_classes endpoint includes an HTTP Etag header. The value
for the Etag header is a hash that represents the state of the latest class information
available for the requested environment. For example:
ETag: 31d64b8038258202b4f5eb508d7dab79c46327bb
A client can (but is not required to) provide the Etag value back to the server in a
subsequent environment_classes request. The client would provide the tag value as the
value for an If-None-Match HTTP header:
If-None-Match: 31d64b8038258202b4f5eb508d7dab79c46327bb
If the latest state of code available on the server matches that of the value in the
If-None-Match header, the server returns an HTTP 304 (Not Modified) response with no
response body. If the server has newer code available than what is captured by the
If-None-Match header value, or if no If-None-Match header is provided in the request,
the server parses manifests again. Assuming the resulting payload is different than a
previous request's, the server provides a different Etag value and new class information
in the response payload.
If the client sends an Accept-Encoding: gzip HTTP header for the request and the server
provides a gzip-encoded response body, the server might append the characters --gzip to
the end of the Etag. For example, the HTTP response headers could include:
Content-Encoding: gzip
ETag: e84bbce5482243b3eb3a190e5c90e535cf4f20de--gzip
The server accepts both forms of an Etag (with or without the trailing --gzip
characters) as the same value when validating it in a request's If-None-Match header
against its cache.
It is best, however, for clients to use the Etag without parsing its content. A client
expecting an HTTP 304 (Not Modified) response if the cache has not been updated since the
prior request should provide the exact value returned in the Etag header from one
request, to the server in an If-None-Match header in a subsequent request for the
environment's class information.
Clearing class information cache entries

After updating an environment's manifests, you must clear the server's class information
cache entries, so the server can parse the latest manifests and reflect class changes to
the class information in queries to the environment classes endpoint. To clear cache
entries on the server, do one of the following:


Call the environment-cache API endpoint.
For best performance, call this endpoint with a query parameter that specifies the
environment whose cache should be flushed.


Restart Puppet Server.
Each environment's cache is held in memory for the Puppet Server process and is
effectively flushed whenever Puppet Server is restarted, whether with a
HUP signal, service reload, or a full JVM restart.


Authorization

All requests made to the environment classes API are authorized using the
Trapperkeeper-based auth.conf.
For more information about the Puppet Server authorization process and configuration
settings, see the auth.conf documentation.
 




          Was this page helpful?
        
Yes
No







              Don’t fill this out if you’re human: 






Thank you for your feedback!

            Feel free to add a comment or suggestion.
            





Send
Please enter your feedback





              Don’t fill this out if you’re human: 







            We’re sorry to hear that! 
            Please tell us why so we can help.
          

            Enter your feedback and email. This form is sent to the Puppet docs team.
            We ask for your email as we might contact you regarding your feedback.
          

            If you need help with the product itself, visit Puppet Support
            or ask in Puppet Community on Slack.
          

            Feedback:
            






            Email Address:
            






            To learn about how Puppet uses your personal information,
            visit our privacy policy.
          


Send
Please enter your feedback and contact email

          If you leave us your email, we may contact you regarding your feedback.
          For more information on how Puppet uses your personal information, see
          our
          privacy policy.
        





            Don’t fill this out if you’re human: 








    See an issue? Please file a JIRA ticket in our
    [DOCUMENTATION]
      project.
  











Puppet by Perforce gives IT operations teams back their time and offers peace of mind with infrastructure automation that enables security and compliance.






Legal
Privacy Policy
Terms of Use
Security


©  Puppet, Inc., a Perforce company. All rights reserved.




Puppet and other identified trademarks are the property of Puppet, Inc., Perforce Software, Inc., or an affiliate. Such trademarks are claimed and/or registered in the U.S. and other countries and regions. All third-party trademarks are the property of their respective holders. References to third-party trademarks do not imply endorsement or sponsorship of any products or services by the trademark holder. Contact Puppet, Inc., for further details.

