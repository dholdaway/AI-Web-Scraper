Title: Provider development
URL: https://www.puppet.com/docs/puppet/7/provider_development

Puppet.com
Forge
Education


                                    Try Puppet
                                


































        Docs
        






Products
Puppet Enterprise
Open Source Puppet
Bolt
Security Compliance Management
Continuous Delivery
Puppet Development Kit
Puppet DB
Puppet Plugin for VMware



        Support
        






Get
Technical Support Plans
Support Lifecycle Policy
New Puppet Enterprise Customer?



        Community
        






About Puppet
Company
Developer Experience
Community
Puppet Champions
Puppet Test Pilots
Community Calendar
Slack Channel







 









































PRODUCT AND VERSION


      Current product
      










      Current version
      








Puppet  7.34.0

Release notes

Puppet release notes
Puppet  7.34.0Security


Puppet known issues
Puppet Server release notes
Puppet Server known Issues
PuppetDB release notes (link)

Facter release notes
Facter 4.10.0
Facter 4.9.0
Facter 4.8.0
Facter 4.7.1
Facter 4.7.0
Facter 4.6.1
Facter 4.6.0
Facter 4.5.2


Facter known issues
What's new since Puppet 6?
Upgrading from Puppet 6 to Puppet 7

Experimental featuresMsgpack support

Archived documentation



Puppet overview
What is Puppet?
Why use Puppet desired state management?
Key concepts behind Puppet
The Puppet platform 
Puppet platform lifecycle 
Open source Puppet vs Puppet Enterprise (PE)
The Puppet ecosystem
Use cases
Glossary
Navigating the documentation



Set up Puppet

Install Puppet
System requirements
Installing Puppet  
Installing and configuring agents
Manually verify packages
Managing Platform versions



Configure Puppet settings
Puppet settings
Key configuration settings

Puppet's configuration files
puppet.conf: The main config file
environment.conf: Per-environment settings
fileserver.conf: Custom fileserver mount points
puppetdb.conf: PuppetDB server locations
autosign.conf: Basic certificate autosigning 
csr_attributes.yaml: Certificate extensions 
custom_trusted_oid_mapping.yaml: Short names for cert extension OIDs
device.conf: Network hardware access
routes.yaml: Advanced plugin routing


Adding file server mount points
Checking the values of settings
Editing settings on the command line
Configuration Reference



Upgrading
Upgrade Puppet Server

Upgrade agents
Upgrade agents using the puppet_agent module
Upgrade *nix agents
Upgrade Windows agents
Upgrade macOS agents


Upgrade PuppetDB



Environments
About environments
Creating environments
Environment isolation



Directories and files
Code and data directory (codedir)
Config directory (confdir)
Main manifest directory
The modulepath
SSL directory (ssldir)
Cache directory (vardir)


Report reference



Platform components

Puppet Server
About Puppet Server
Deprecated features
Server and agent compatibility
Installing Puppet Server

Configuring Puppet Server
Configuring Puppet Server

Puppet Server configuration files
auth.conf
ca.conf
global.conf
logback.xml
metrics.conf
product.conf
puppetserver.conf
web-routes.conf
webserver.conf


Migrating to the HOCON auth.conf format
Advanced logging configuration
Differing behavior in puppet.conf



Using and extending Puppet Server
Subcommands
Using Ruby gems
Intermediate CA
Infrastructure certificate revocation list (CRL)
External SSL termination

Server metrics
Monitoring Puppet Server metrics
HTTP Client Metrics


Tuning guide
Applying metrics to improve performance
Submitting usage telemetry
Scaling Puppet Server
Restarting Puppet Server"



Developer information
Developer debugging
Running from source
Tracing code events



Puppet Server HTTP API
Puppet Server HTTP API overview
PSON

Puppet v3 API
Catalog
Node
Facts
File Bucket File
File Content
File Metadata
Report



Puppet v4 APICatalog API


CA v1 API
Certificate
Certificate Request
Certificate Status
Certificate Revocation List
Expirations
Certificate Clean


Schemas (JSON)



API endpoints

Metrics API endpoints
v1 metrics
v2 (Jolokia) metrics



Status API endpoints
Services endpoint
Simple endpoint



Administrative API endpoints
Environment cache
JRuby pool



Server-specific Puppet API endpoints
Environment classes
Environment modules
Static file content





Certificate authority and SSL
Puppet Server CA commands
Intermediate CA
Autosigning certificate requests
CSR attributes and certificate extensions
Regenerating certificates in a Puppet deployment
External CA
External SSL termination





Facter  
Facter: CLI
Facter: Core Facts

Custom facts overviewEnvironment facts 

Writing custom facts
External facts
Configuring Facter with facter.conf


PuppetDB

Puppet services and tools
Puppet commands
Running Puppet commands on Windows  

primary Puppet serverAbout Puppet Server

Puppet agent on *nix systems
Puppet agent on Windows
Puppet apply
Puppet device



Puppet reports
Reporting
Report reference
Writing custom report processors
Report format



Life cycle of a Puppet run
Agent-server HTTPS communications
Catalog compilation
Static catalogs 





Using Puppet code
Classifying nodes
Managing environment content with a Puppetfile
Using content from Puppet Forge

Designing system configs (roles and profiles)
The roles and profiles method 
Roles and profiles example 
Designing advanced profiles 
Designing convenient roles 



Separating data (Hiera)
About Hiera  
Getting started with Hiera  
Configuring Hiera
Creating and editing data 
Looking up data with Hiera  
Writing new data backends 

Debugging Hiera
Unexpected values
Common errors


Upgrading to Hiera 5 



Use case examples
Manage NTP
Manage sudo 
Manage DNS
Manage firewall rules
Forge examples





Syntax and settings

The Puppet language
Puppet language overview
Puppet language syntax examples
The Puppet language style guide 
Files and paths on Windows  
Code comments 
Variables
Resources

Resource types
Resource Type Reference (Single-Page)
Built-in types
Optional resource types for Windows
Resource Type: exec
Using exec on Windows  
Resource Type: file
Using file on Windows
Resource Type: filebucket
Resource Type: group
Using user and group on Windows
Resource types overview
Resource Type: notify
Resource Type: package
Using package on Windows  
Resource Type: resources
Resource Type: schedule
Resource Type: service
Using service
Resource Type: stage
Resource Type: tidy
Resource Type: user


Relationships and ordering
Classes
Defined resource types
Bolt tasks
Expressions and operators
Conditional statements and expressions
Function calls
Built-in function reference
Node definitions

Facts and built-in variables
Accessing facts from Puppet code
Built-in variables


Reserved words and acceptable names

Custom resources

Develop types and providers with the Resource APIResource API reference


Low-level method for developing types and providers
Type development
Provider development
Creating resources





Custom functions
Custom functions overview 
Writing custom functions in the Puppet language

Writing custom functions in Ruby
Custom functions in Ruby overview
Ruby function signatures
Using special features in implementation methods
Iterative functions
Refactoring legacy 3.x functions



Deferring a function
Deferred functions overview
Using a template with Deferred values
Write a deferred function to store secrets
Integrations with secret stores





Values, data types, and aliases
Type aliases
Typecasting
Abstract data types
Arrays
Binary
Booleans
Data type syntax
Default
Error data type
Hashes
Numbers
Regular expressions
Resource and class references
Resource types
Sensitive
Strings
Time-related data types
Undef



Templates
Creating templates using Embedded Puppet
Creating templates using Embedded Ruby



Advanced constructs
Iteration and loops
Lambdas
Resource default statements
Resource collectors
Virtual resources
Exported resources
Tags
Run stages



Details of complex behaviors
Containment
Scope
Namespaces and autoloading


Securing sensitive data


Metaparameter reference
Configuration Reference
Built-in function reference

Puppet Man Pages

Core tools
Man Page: puppet agent
Man Page: puppet apply
Man Page: puppet module
Man Page: puppet resource
Man Page: puppet lookup



Occasionally useful
Man Page: puppet config
Man Page: puppet describe
Man Page: puppet device
Man Page: puppet doc
Man Page: puppet help
Man Page: puppet node
Man Page: puppet parser



Niche
Man Page: puppet catalog
Man Page: puppet facts
Man Page: puppet filebucket
Man Page: puppet report







Developing modules

Modules
Modules overview
Plug-ins in modules
Module cheat sheet
Installing and managing modules from the command line
Beginner's guide to writing modules
Module metadata
Documenting modules
Documenting modules with Puppet Strings  
Puppet Strings style guide

Publishing modulesUsing the Forge API

Contributing to Puppet modules


Puppet Development Kit (PDK)
Puppet VSCode extension

PowerShell DSC Resources
Converting DSC Resources
Distributing arbitrary DSC resources
Upgrading Puppet DSC modules 
Troubleshooting DSC Resources 


Ruby API for developing extensions


Provider development

Providers are back-ends that support specific
        implementations of a given resource type, particularly for different platforms. Not all
        resource types have or need providers, but any resource type concerned about portability
        will likely need them.
For instance, there are more than 20
                package providers, including providers for package formats like dpkg and rpm along
                with high-level package managers like apt and yum. A providerâ€™s main job is to wrap
                client-side tools, usually by just calling out to those tools with the right
                information.
The examples on this page use the apt and dpkg
                package providers, and the examples used are current as of 0.23.0.

Note: Unless you are maintaining existing type and provider code, or the
                Resource API limitations affect you, use the Resource API to create custom resource
                types, instead of this method.


Declaring providers

Providers are always associated with a single resource type,
    so they are created by calling the provide method on that resource type.
The provide method takes three arguments plus a
        block: 
The first argument must be the name of the provider, as
              a :symbol. 
The optional :parent argument should be the name of a parent class. 
The optional :source argument should be a symbol. 
The block takes no arguments, and implements the behavior of the
            provider.


There are several kinds of parent classes you can use: 
Base provider
A provider can inherit from a base provider, which is never used
              alone and only exists for other providers to inherit from. Use the full name of the
              class. For example, all package providers have a common parent
              class:Puppet::Type.type(:package).provide(:dpkg, :parent => Puppet::Provider::Package) do
  desc "..."
  ...
endNote
              the call to the desc method; this sets the documentation for this provider, and
              should include everything necessary for someone to use this provider. 
Another provider of the same resource type
Providers can also specify another provider as their parent. If
              itâ€™s a provider for the same resource type, you can use the name of that provider as a
              symbol.Puppet::Type.type(:package).provide(:apt, :parent => :dpkg, :source => :dpkg) do
    ...
endNote
              that weâ€™re also specifying that this provider uses the dpkg source; this tells Puppet to deduplicate packages from dpkg and apt, so the
              same package does not show up in an instance list from each provider type. Puppet defaults to creating a new source for each
              provider type, so you have to specify when a provider subclass shares a source with
              its parent class. 
A provider of any resource type
Providers can also specify a provider of any resource type as
              their parent. Use the Puppet::Type.type(<NAME>).provider(<NAME>) methods to
              locate the
              provider.# my_module/lib/puppet/provider/glance_api_config/ini_setting.rb
Puppet::Type.type(:glance_api_config).provide(
  :ini_setting,
  # set ini_setting as the parent provider
  :parent => Puppet::Type.type(:ini_setting).provider(:ruby)
) do
  # implement section as the first part of the namevar
  def section
    resource[:name].split('/', 2).first
  end
  def setting
    # implement setting as the second part of the namevar
    resource[:name].split('/', 2).last
  end
  # hard code the file path (this allows purging)
  def self.file_path
    '/etc/glance/glance-api.conf'
  end
end





Suitability

The first question to ask about a new provider is where it
        will be functional, which Puppet calls suitable. Unsuitable providers cannot be used to do any work. The
        suitability test is late-binding, meaning that you can have a resource in your configuration
        that makes a provider suitable. 
If you start puppetd or puppet in debug mode, youâ€™ll see
                the results of failed provider suitability tests for the resource types youâ€™re
                using.
Puppet providers include some helpful class-level
                methods you can use to both document and declare how to determine whether a given
                provider is suitable. The primary method is commands, which does two things for you:
                it declares that this provider requires the named binary, and it sets up class and
                instance methods with the name provided that call the specified binary. The binary
                can be fully qualified, in which case that specific path is required, or it can be
                unqualified, in which case Puppet finds the binary in
                the shell path and uses that. If the binary cannot be found, then the provider is
                considered unsuitable. For example, here is the header for the dpkg provider (as of
                0.23.0):commands :dpkg => "/usr/bin/dpkg"
commands :dpkg_deb => "/usr/bin/dpkg-deb"
commands :dpkgquery => "/usr/bin/dpkg-query"

In addition to looking for binaries, Puppet can compare Facter facts, test for the existence of a file, check
                for a feature such as a library, or test whether a given value is true or false. For
                file existence, truth, or false, call the confine
                class method with exists, true, or false as the name of the test
                and your test as the
                value:confine :exists => "/etc/debian_release"
confine :true => /^10\.[0-4]/.match(product_version)
confine :false => (Puppet[:ldapuser] == "")To test Facter values, use the name of the
                fact:confine :operatingsystem => [:debian, :centos]
confine :puppetversion => "0.23.0"Case doesnâ€™t matter in the tests,
                nor does it matter whether the values are strings or symbols. It also doesnâ€™t matter
                whether you specify an array or a single value â€” Puppet does an OR on the list of values.
To test a feature, as defined in lib/puppet/feature/*.rb, supply
                the name of the feature. This is preferable to using a confine :true statement that calls Puppet.features because the expression is evaluated only one time. Puppet enables the provider if the feature becomes
                available during a run (for example, if a package is installed during the
                run).confine :feature => :posix
confine :feature => :rrdYou can create custom features. They live in
                    lib/puppet/feature/*.rb and an example can be
                found here. These features can be shipped in a similar manner
                as types and providers are shipped within modules and are pluginsynced.
Using custom features you can delay resource evaluation until the
                provider becomes suitable. This is a way of informing Puppet that your provider depends on a file being
                created by Puppet, or a certain fact being set to
                some value, or it not being set at all.


Default providers

Providers are generally meant to be hidden from the users, allowing them to focus on
        resource specification rather than implementation details, so Puppet does what it can to choose an appropriate default
        provider for each resource type.
This is generally done by a single
                provider declaring that it is the default for a given set of facts, using the
                defaultfor class method. For instance, this is the apt providerâ€™s
                declaration:defaultfor :operatingsystem => :debianThe
                same fact-matching functionality as confinement is used. 
Alternatively, you can supply a regular expression (regex) value to match against a
                fact value. This is useful, for example, for providers that should only be default
                for a specific range of operating system
                versions:defaultfor :operatingsystemmajrelease => /^[5-7]$/



How providers interact with resources

Providers do nothing on their own; all of their action is
        triggered through an associated resource (or, in special cases, from the transaction).
        Because of this, resource types are essentially free to define their own provider interface
        if necessary, and providers were initially developed without a clear resource-provider API
        (mostly because it wasnâ€™t clear whether such an API was necessary or what it would look
        like). At this point, however, there is a default interface between the resource type and
        the provider.
This interface consists entirely of
                getter and setter methods. When the resource is retrieving its current state, it
                iterates across all of its properties and calls the getter method on the provider
                for that property. For instance, when a user resource is having its state retrieved and its
                    uid and shell properties are
                being managed, then the resource calls uid and shell on the provider to figure out what the current
                state of each of those properties is. This method call is in the retrieve method in Puppet::Property.
When a resource is being modified, it calls the equivalent setter
                method for each property on the provider. Again using our user example, if the
                    uid was in sync
                but the shell was
                not, then the resource would call shell=(value) with the new shell value.
The transaction is responsible for storing these returned values and
                deciding which value to send, and it does its work through a PropertyChange instance. It calls
                    sync on each of
                the properties, which in turn call the setter by default.
You can override that interface as necessary for your resource type. 
All providers must define an instances class method that returns a list
                of provider instances, one for each existing instance of that provider. For example,
                the dpkg provider should return a provider instance for every package in the dpkg
                database.


Provider methods

By default, you have to define all of your getter and
        setter methods. For simple cases, this is sufficient â€” you just implement the code that does
        the work for that property. For the more complicated aspects of provider implementation, Puppet has prefetching, resource methods, and
        flushing. 
Prefetching
First, Puppet transactions prefetch provider
                information by calling prefetch on each used
                provider type. This calls the instances method in
                turn, which returns a list of provider instances with the current resource state
                already retrieved and stored in a @property_hash
                instance variable. The prefetch method then tries to find any matching resources,
                and assigns the retrieved providers to found resources. This way you can get
                information on all of the resources youâ€™re managing in just a few method calls,
                instead of having to call all of the getter methods for every property being
                managed. Note that it also means that providers are often getting replaced, so you
                cannot maintain state in a provider.

Resource methods
For providers that directly modify the system when a setter method is called, thereâ€™s
                no substitute for defining them manually. But for resources that get flushed to disk
                in one step, such as the ParsedFile providers, there
                is a mk_resource_methods class method that creates a
                getter and setter for each property on the resource. These methods retrieve and set
                the appropriate value in the @property_hash
                variable.

Flushing
Many providers model files or parts of files, so it makes sense to save up all of the
                writes and do them in one run. Providers that need this functionality can define a
                flush instance method to do this. The transaction calls this method after all values
                are synced (which means that the provider should have them all in its @property_hash variable) but before refresh is called on
                the resource (if appropriate).


 




          Was this page helpful?
        
Yes
No







              Donâ€™t fill this out if youâ€™re human: 






Thank you for your feedback!

            Feel free to add a comment or suggestion.
            





Send
Please enter your feedback





              Donâ€™t fill this out if youâ€™re human: 







            Weâ€™re sorry to hear that! 
            Please tell us why so we can help.
          

            Enter your feedback and email. This form is sent to the Puppet docs team.
            We ask for your email as we might contact you regarding your feedback.
          

            If you need help with the product itself, visit Puppet Support
            or ask in Puppet Community on Slack.
          

            Feedback:
            






            Email Address:
            






            To learn about how Puppet uses your personal information,
            visit our privacy policy.
          


Send
Please enter your feedback and contact email

          If you leave us your email, we may contact you regarding your feedback.
          For more information on how Puppet uses your personal information, see
          our
          privacy policy.
        





            Donâ€™t fill this out if youâ€™re human: 








    See an issue? Please file a JIRA ticket in our
    [DOCUMENTATION]
      project.
  











Puppet by Perforce gives IT operations teams back their time and offers peace of mind with infrastructure automation that enables security and compliance.






Legal
Privacy Policy
Terms of Use
Security


Â©  Puppet, Inc., a Perforce company. All rights reserved.




Puppet and other identified trademarks are the property of Puppet, Inc., Perforce Software, Inc., or an affiliate. Such trademarks are claimed and/or registered in the U.S. and other countries and regions. All third-party trademarks are the property of their respective holders. References to third-party trademarks do not imply endorsement or sponsorship of any products or services by the trademark holder. Contact Puppet, Inc., for further details.

