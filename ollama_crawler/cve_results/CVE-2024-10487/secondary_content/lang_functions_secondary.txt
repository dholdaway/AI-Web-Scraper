Title: Function calls
URL: https://www.puppet.com/docs/puppet/7/lang_functions

Puppet.com
Forge
Education


                                    Try Puppet
                                


































        Docs
        






Products
Puppet Enterprise
Open Source Puppet
Bolt
Security Compliance Management
Continuous Delivery
Puppet Development Kit
Puppet DB
Puppet Plugin for VMware



        Support
        






Get
Technical Support Plans
Support Lifecycle Policy
New Puppet Enterprise Customer?



        Community
        






About Puppet
Company
Developer Experience
Community
Puppet Champions
Puppet Test Pilots
Community Calendar
Slack Channel







 









































PRODUCT AND VERSION


      Current product
      










      Current version
      








Puppet  7.34.0

Release notes

Puppet release notes
Puppet  7.34.0Security


Puppet known issues
Puppet Server release notes
Puppet Server known Issues
PuppetDB release notes (link)

Facter release notes
Facter 4.10.0
Facter 4.9.0
Facter 4.8.0
Facter 4.7.1
Facter 4.7.0
Facter 4.6.1
Facter 4.6.0
Facter 4.5.2


Facter known issues
What's new since Puppet 6?
Upgrading from Puppet 6 to Puppet 7

Experimental featuresMsgpack support

Archived documentation



Puppet overview
What is Puppet?
Why use Puppet desired state management?
Key concepts behind Puppet
The Puppet platform 
Puppet platform lifecycle 
Open source Puppet vs Puppet Enterprise (PE)
The Puppet ecosystem
Use cases
Glossary
Navigating the documentation



Set up Puppet

Install Puppet
System requirements
Installing Puppet  
Installing and configuring agents
Manually verify packages
Managing Platform versions



Configure Puppet settings
Puppet settings
Key configuration settings

Puppet's configuration files
puppet.conf: The main config file
environment.conf: Per-environment settings
fileserver.conf: Custom fileserver mount points
puppetdb.conf: PuppetDB server locations
autosign.conf: Basic certificate autosigning 
csr_attributes.yaml: Certificate extensions 
custom_trusted_oid_mapping.yaml: Short names for cert extension OIDs
device.conf: Network hardware access
routes.yaml: Advanced plugin routing


Adding file server mount points
Checking the values of settings
Editing settings on the command line
Configuration Reference



Upgrading
Upgrade Puppet Server

Upgrade agents
Upgrade agents using the puppet_agent module
Upgrade *nix agents
Upgrade Windows agents
Upgrade macOS agents


Upgrade PuppetDB



Environments
About environments
Creating environments
Environment isolation



Directories and files
Code and data directory (codedir)
Config directory (confdir)
Main manifest directory
The modulepath
SSL directory (ssldir)
Cache directory (vardir)


Report reference



Platform components

Puppet Server
About Puppet Server
Deprecated features
Server and agent compatibility
Installing Puppet Server

Configuring Puppet Server
Configuring Puppet Server

Puppet Server configuration files
auth.conf
ca.conf
global.conf
logback.xml
metrics.conf
product.conf
puppetserver.conf
web-routes.conf
webserver.conf


Migrating to the HOCON auth.conf format
Advanced logging configuration
Differing behavior in puppet.conf



Using and extending Puppet Server
Subcommands
Using Ruby gems
Intermediate CA
Infrastructure certificate revocation list (CRL)
External SSL termination

Server metrics
Monitoring Puppet Server metrics
HTTP Client Metrics


Tuning guide
Applying metrics to improve performance
Submitting usage telemetry
Scaling Puppet Server
Restarting Puppet Server"



Developer information
Developer debugging
Running from source
Tracing code events



Puppet Server HTTP API
Puppet Server HTTP API overview
PSON

Puppet v3 API
Catalog
Node
Facts
File Bucket File
File Content
File Metadata
Report



Puppet v4 APICatalog API


CA v1 API
Certificate
Certificate Request
Certificate Status
Certificate Revocation List
Expirations
Certificate Clean


Schemas (JSON)



API endpoints

Metrics API endpoints
v1 metrics
v2 (Jolokia) metrics



Status API endpoints
Services endpoint
Simple endpoint



Administrative API endpoints
Environment cache
JRuby pool



Server-specific Puppet API endpoints
Environment classes
Environment modules
Static file content





Certificate authority and SSL
Puppet Server CA commands
Intermediate CA
Autosigning certificate requests
CSR attributes and certificate extensions
Regenerating certificates in a Puppet deployment
External CA
External SSL termination





Facter  
Facter: CLI
Facter: Core Facts

Custom facts overviewEnvironment facts 

Writing custom facts
External facts
Configuring Facter with facter.conf


PuppetDB

Puppet services and tools
Puppet commands
Running Puppet commands on Windows  

primary Puppet serverAbout Puppet Server

Puppet agent on *nix systems
Puppet agent on Windows
Puppet apply
Puppet device



Puppet reports
Reporting
Report reference
Writing custom report processors
Report format



Life cycle of a Puppet run
Agent-server HTTPS communications
Catalog compilation
Static catalogs 





Using Puppet code
Classifying nodes
Managing environment content with a Puppetfile
Using content from Puppet Forge

Designing system configs (roles and profiles)
The roles and profiles method 
Roles and profiles example 
Designing advanced profiles 
Designing convenient roles 



Separating data (Hiera)
About Hiera  
Getting started with Hiera  
Configuring Hiera
Creating and editing data 
Looking up data with Hiera  
Writing new data backends 

Debugging Hiera
Unexpected values
Common errors


Upgrading to Hiera 5 



Use case examples
Manage NTP
Manage sudo 
Manage DNS
Manage firewall rules
Forge examples





Syntax and settings

The Puppet language
Puppet language overview
Puppet language syntax examples
The Puppet language style guide 
Files and paths on Windows  
Code comments 
Variables
Resources

Resource types
Resource Type Reference (Single-Page)
Built-in types
Optional resource types for Windows
Resource Type: exec
Using exec on Windows  
Resource Type: file
Using file on Windows
Resource Type: filebucket
Resource Type: group
Using user and group on Windows
Resource types overview
Resource Type: notify
Resource Type: package
Using package on Windows  
Resource Type: resources
Resource Type: schedule
Resource Type: service
Using service
Resource Type: stage
Resource Type: tidy
Resource Type: user


Relationships and ordering
Classes
Defined resource types
Bolt tasks
Expressions and operators
Conditional statements and expressions
Function calls
Built-in function reference
Node definitions

Facts and built-in variables
Accessing facts from Puppet code
Built-in variables


Reserved words and acceptable names

Custom resources

Develop types and providers with the Resource APIResource API reference


Low-level method for developing types and providers
Type development
Provider development
Creating resources





Custom functions
Custom functions overview 
Writing custom functions in the Puppet language

Writing custom functions in Ruby
Custom functions in Ruby overview
Ruby function signatures
Using special features in implementation methods
Iterative functions
Refactoring legacy 3.x functions



Deferring a function
Deferred functions overview
Using a template with Deferred values
Write a deferred function to store secrets
Integrations with secret stores





Values, data types, and aliases
Type aliases
Typecasting
Abstract data types
Arrays
Binary
Booleans
Data type syntax
Default
Error data type
Hashes
Numbers
Regular expressions
Resource and class references
Resource types
Sensitive
Strings
Time-related data types
Undef



Templates
Creating templates using Embedded Puppet
Creating templates using Embedded Ruby



Advanced constructs
Iteration and loops
Lambdas
Resource default statements
Resource collectors
Virtual resources
Exported resources
Tags
Run stages



Details of complex behaviors
Containment
Scope
Namespaces and autoloading


Securing sensitive data


Metaparameter reference
Configuration Reference
Built-in function reference

Puppet Man Pages

Core tools
Man Page: puppet agent
Man Page: puppet apply
Man Page: puppet module
Man Page: puppet resource
Man Page: puppet lookup



Occasionally useful
Man Page: puppet config
Man Page: puppet describe
Man Page: puppet device
Man Page: puppet doc
Man Page: puppet help
Man Page: puppet node
Man Page: puppet parser



Niche
Man Page: puppet catalog
Man Page: puppet facts
Man Page: puppet filebucket
Man Page: puppet report







Developing modules

Modules
Modules overview
Plug-ins in modules
Module cheat sheet
Installing and managing modules from the command line
Beginner's guide to writing modules
Module metadata
Documenting modules
Documenting modules with Puppet Strings  
Puppet Strings style guide

Publishing modulesUsing the Forge API

Contributing to Puppet modules


Puppet Development Kit (PDK)
Puppet VSCode extension

PowerShell DSC Resources
Converting DSC Resources
Distributing arbitrary DSC resources
Upgrading Puppet DSC modules 
Troubleshooting DSC Resources 


Ruby API for developing extensions


Function calls

Functions are plug-ins, written in Ruby, that you can call during catalog compilation. A call to
        any function is an expression that resolves to a value. Most functions accept one or more
        values as arguments, and return a resulting value.

The Ruby code in the function can
                do any number of things to produce the final value, including:
Evaluate templates.
Do mathematical calculations.
Look up values from an external source.
Cause side effects that modify the catalog.
Evaluate a provided block of Puppet code, possibly using the function's
                        arguments to modify that code or control how it runs.

Puppet includes several built-in functions. More
                functions are available in modules, such as puppetlabs-stdlib, on the Forge. You can also write custom functions
                and put them in your own modules. 
An entire function call—including the name, arguments, and
                lambda—constitutes an expression. It resolves to a single value, and can be used
                anywhere a value of that type is accepted. A function call might also have an
                effect, such as adding a class to the catalog. You can also use function calls on
                their own, which causes their effects to occur while their value is ignored. 
All functions run during catalog compilation, which means they can
                access code and data only from the primary Puppet server. To
                make changes to an agent node, you must use a resource; to collect data from an
                agent node, you must use a custom fact.
 Each function defines how many arguments it takes, what data types it expects those
                arguments to be, what values it returns, and any effects it has. For details about
                any functions built into Puppet, see the function reference. For details about a function
                included in a module, see that module's documentation.

Statement functions
Statement functions are a group of built-in functions that are
                used only for their effects, rather than for any values. Puppet recognizes only its built-in statements; it
                doesn't allow adding new statement functions as plugins. The major difference
                between statement functions and other functions is that you can omit parentheses
                when calling a statement function with at least one argument, such as include apache.
Statement functions return a value like any other function, but
                they always return a value of undef. The built-in statement functions are:
Catalog statements

include: Includes the specified classes in a catalog.

require: Includes the specified classes in the catalog and
                            adds them as a dependency of the current class or defined resource

contain: Includes the specified classes in the catalog and
                            contains them in the current class.

tag: Adds the specified tag or tags to the containing class or
                            defined resource.
Logging statements

debug: Logs message at the debug level.

info: Logs message at the info level.

notice: Logs message at the notice level.

warning: Logs message at the warning level

err: Logs message at the error level.
Failure statements

fail: Logs the error message and terminates
                            compilation.





Related informationCustom functions overview

Functions syntax

Like any expression, a function call can be used anywhere
    the value it returns would be allowed. Function calls can also stand on their own, to cause
    their side effects, but ignore their returned value. 
There are two ways to call functions in
        the Puppet language: prefix calls as in template("ntp/ntp.conf.erb"), and chained calls as in "ntp/ntp.conf.erb".template. There's also a modified form of prefix call that
        can only be used with certain functions. 
 The two function call
        styles have exactly the same capabilities, so you can choose whichever one is more readable.
        In general:
For functions that take many arguments,
              prefix calls are easier to read.
For functions that take one normal argument
              and a lambda, chained calls are easier to read.
For a series of functions where each takes
              the last one's result as its argument, chained calls are easier to read, especially if
              at least one of those functions accepts a lambda.


Most functions have short, one-word names. The modern function API
        also allows qualified function names like mymodule::myfunction. Functions must always be called with their full names; you
        can't shorten a qualified function name. 
Prefix function calls
You call a function in the prefix style by writing its name and providing a list of
        arguments in parentheses. The general form of a prefix function call is:function_name(argument, argument, ...) |$parameter, $parameter, ...| { code block }


The full name of the function, as an unquoted word.


An opening parenthesis (. Parentheses are optional when you're
              calling a built-in statement function with at least one argument, as in
                include apache. They're mandatory in all other cases.


Zero or more arguments, separated by commas. Arguments can be any
              expression that resolves to a value. See each function's docs for the number of its
              arguments and their data types. Use the splat array operator * to
              convert an array into a comma-separated list of arguments.


A closing parenthesis ) if an opening parenthesis was used.


Optionally, a lambda (code block), if the function accepts one.



 In the following example, template, include, and
          each are all functions. The template function is used
        for its return value, include adds a class to the catalog, and
          each runs a block of code several times with different values.
        file {"/etc/ntp.conf":
  ensure  => file,
  content => template("ntp/ntp.conf.erb"), # function call; resolves to a string
}

include apache # function call; modifies catalog

$binaries = [
  "facter",
  "hiera",
  "mco",
  "puppet",
  "puppetserver",
]

# function call with lambda; runs block of code several times
each($binaries) |$binary| {
  file {"/usr/bin/$binary":
    ensure => link,
    target => "/opt/puppetlabs/bin/$binary",
  }
}



Chained function calls
Alternatively, you call a function in the chained style by writing its first argument, a
        period, and the name of the function. The general form of a chained function call is:argument.function_name(argument, ...) |$parameter, $parameter, ...| { code block }


The first argument of the function, which can be any expression that resolves to a
              value.


A period .


The full name of the function, as an unquoted word.


Optionally, parentheses containing a comma-separated list of additional arguments,
              starting with the second argument (because you already passed in the first argument).
              Use the splat array operator * to convert an array to a
              comma-separated list of arguments.


Optionally, a lambda (code block), if the function accepts one.



In the following example, template, include, and
          each are all functions. The template function is used
        for its return value, include adds a class to the catalog, and
          each runs a block of code several times with different
        values.puppet
file {"/etc/ntp.conf":
  ensure  => file,
  content => "ntp/ntp.conf.erb".template, # function call; resolves to a string
}

apache.include # function call; modifies catalog

$binaries = [
  "facter",
  "hiera",
  "mco",
  "puppet",
  "puppetserver",
]

# function call with lambda; runs block of code several times
$binaries.each |$binary| {
  file {"/usr/bin/$binary":
    ensure => link,
    target => "/opt/puppetlabs/bin/$binary",
  }
}




Related information
Lambdas
Expressions and operators
Values, data types, and aliases
Array operators

 




          Was this page helpful?
        
Yes
No







              Don’t fill this out if you’re human: 






Thank you for your feedback!

            Feel free to add a comment or suggestion.
            





Send
Please enter your feedback





              Don’t fill this out if you’re human: 







            We’re sorry to hear that! 
            Please tell us why so we can help.
          

            Enter your feedback and email. This form is sent to the Puppet docs team.
            We ask for your email as we might contact you regarding your feedback.
          

            If you need help with the product itself, visit Puppet Support
            or ask in Puppet Community on Slack.
          

            Feedback:
            






            Email Address:
            






            To learn about how Puppet uses your personal information,
            visit our privacy policy.
          


Send
Please enter your feedback and contact email

          If you leave us your email, we may contact you regarding your feedback.
          For more information on how Puppet uses your personal information, see
          our
          privacy policy.
        





            Don’t fill this out if you’re human: 








    See an issue? Please file a JIRA ticket in our
    [DOCUMENTATION]
      project.
  











Puppet by Perforce gives IT operations teams back their time and offers peace of mind with infrastructure automation that enables security and compliance.






Legal
Privacy Policy
Terms of Use
Security


©  Puppet, Inc., a Perforce company. All rights reserved.




Puppet and other identified trademarks are the property of Puppet, Inc., Perforce Software, Inc., or an affiliate. Such trademarks are claimed and/or registered in the U.S. and other countries and regions. All third-party trademarks are the property of their respective holders. References to third-party trademarks do not imply endorsement or sponsorship of any products or services by the trademark holder. Contact Puppet, Inc., for further details.

