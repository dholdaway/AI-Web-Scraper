Title: Classifying nodes
URL: https://www.puppet.com/docs/puppet/7/nodes_external

Puppet.com
Forge
Education


                                    Try Puppet
                                


































        Docs
        






Products
Puppet Enterprise
Open Source Puppet
Bolt
Security Compliance Management
Continuous Delivery
Puppet Development Kit
Puppet DB
Puppet Plugin for VMware



        Support
        






Get
Technical Support Plans
Support Lifecycle Policy
New Puppet Enterprise Customer?



        Community
        






About Puppet
Company
Developer Experience
Community
Puppet Champions
Puppet Test Pilots
Community Calendar
Slack Channel







 









































PRODUCT AND VERSION


      Current product
      










      Current version
      








Puppet  7.34.0

Release notes

Puppet release notes
Puppet  7.34.0Security


Puppet known issues
Puppet Server release notes
Puppet Server known Issues
PuppetDB release notes (link)

Facter release notes
Facter 4.10.0
Facter 4.9.0
Facter 4.8.0
Facter 4.7.1
Facter 4.7.0
Facter 4.6.1
Facter 4.6.0
Facter 4.5.2


Facter known issues
What's new since Puppet 6?
Upgrading from Puppet 6 to Puppet 7

Experimental featuresMsgpack support

Archived documentation



Puppet overview
What is Puppet?
Why use Puppet desired state management?
Key concepts behind Puppet
The Puppet platform 
Puppet platform lifecycle 
Open source Puppet vs Puppet Enterprise (PE)
The Puppet ecosystem
Use cases
Glossary
Navigating the documentation



Set up Puppet

Install Puppet
System requirements
Installing Puppet  
Installing and configuring agents
Manually verify packages
Managing Platform versions



Configure Puppet settings
Puppet settings
Key configuration settings

Puppet's configuration files
puppet.conf: The main config file
environment.conf: Per-environment settings
fileserver.conf: Custom fileserver mount points
puppetdb.conf: PuppetDB server locations
autosign.conf: Basic certificate autosigning 
csr_attributes.yaml: Certificate extensions 
custom_trusted_oid_mapping.yaml: Short names for cert extension OIDs
device.conf: Network hardware access
routes.yaml: Advanced plugin routing


Adding file server mount points
Checking the values of settings
Editing settings on the command line
Configuration Reference



Upgrading
Upgrade Puppet Server

Upgrade agents
Upgrade agents using the puppet_agent module
Upgrade *nix agents
Upgrade Windows agents
Upgrade macOS agents


Upgrade PuppetDB



Environments
About environments
Creating environments
Environment isolation



Directories and files
Code and data directory (codedir)
Config directory (confdir)
Main manifest directory
The modulepath
SSL directory (ssldir)
Cache directory (vardir)


Report reference



Platform components

Puppet Server
About Puppet Server
Deprecated features
Server and agent compatibility
Installing Puppet Server

Configuring Puppet Server
Configuring Puppet Server

Puppet Server configuration files
auth.conf
ca.conf
global.conf
logback.xml
metrics.conf
product.conf
puppetserver.conf
web-routes.conf
webserver.conf


Migrating to the HOCON auth.conf format
Advanced logging configuration
Differing behavior in puppet.conf



Using and extending Puppet Server
Subcommands
Using Ruby gems
Intermediate CA
Infrastructure certificate revocation list (CRL)
External SSL termination

Server metrics
Monitoring Puppet Server metrics
HTTP Client Metrics


Tuning guide
Applying metrics to improve performance
Submitting usage telemetry
Scaling Puppet Server
Restarting Puppet Server"



Developer information
Developer debugging
Running from source
Tracing code events



Puppet Server HTTP API
Puppet Server HTTP API overview
PSON

Puppet v3 API
Catalog
Node
Facts
File Bucket File
File Content
File Metadata
Report



Puppet v4 APICatalog API


CA v1 API
Certificate
Certificate Request
Certificate Status
Certificate Revocation List
Expirations
Certificate Clean


Schemas (JSON)



API endpoints

Metrics API endpoints
v1 metrics
v2 (Jolokia) metrics



Status API endpoints
Services endpoint
Simple endpoint



Administrative API endpoints
Environment cache
JRuby pool



Server-specific Puppet API endpoints
Environment classes
Environment modules
Static file content





Certificate authority and SSL
Puppet Server CA commands
Intermediate CA
Autosigning certificate requests
CSR attributes and certificate extensions
Regenerating certificates in a Puppet deployment
External CA
External SSL termination





Facter  
Facter: CLI
Facter: Core Facts

Custom facts overviewEnvironment facts 

Writing custom facts
External facts
Configuring Facter with facter.conf


PuppetDB

Puppet services and tools
Puppet commands
Running Puppet commands on Windows  

primary Puppet serverAbout Puppet Server

Puppet agent on *nix systems
Puppet agent on Windows
Puppet apply
Puppet device



Puppet reports
Reporting
Report reference
Writing custom report processors
Report format



Life cycle of a Puppet run
Agent-server HTTPS communications
Catalog compilation
Static catalogs 





Using Puppet code
Classifying nodes
Managing environment content with a Puppetfile
Using content from Puppet Forge

Designing system configs (roles and profiles)
The roles and profiles method 
Roles and profiles example 
Designing advanced profiles 
Designing convenient roles 



Separating data (Hiera)
About Hiera  
Getting started with Hiera  
Configuring Hiera
Creating and editing data 
Looking up data with Hiera  
Writing new data backends 

Debugging Hiera
Unexpected values
Common errors


Upgrading to Hiera 5 



Use case examples
Manage NTP
Manage sudo 
Manage DNS
Manage firewall rules
Forge examples





Syntax and settings

The Puppet language
Puppet language overview
Puppet language syntax examples
The Puppet language style guide 
Files and paths on Windows  
Code comments 
Variables
Resources

Resource types
Resource Type Reference (Single-Page)
Built-in types
Optional resource types for Windows
Resource Type: exec
Using exec on Windows  
Resource Type: file
Using file on Windows
Resource Type: filebucket
Resource Type: group
Using user and group on Windows
Resource types overview
Resource Type: notify
Resource Type: package
Using package on Windows  
Resource Type: resources
Resource Type: schedule
Resource Type: service
Using service
Resource Type: stage
Resource Type: tidy
Resource Type: user


Relationships and ordering
Classes
Defined resource types
Bolt tasks
Expressions and operators
Conditional statements and expressions
Function calls
Built-in function reference
Node definitions

Facts and built-in variables
Accessing facts from Puppet code
Built-in variables


Reserved words and acceptable names

Custom resources

Develop types and providers with the Resource APIResource API reference


Low-level method for developing types and providers
Type development
Provider development
Creating resources





Custom functions
Custom functions overview 
Writing custom functions in the Puppet language

Writing custom functions in Ruby
Custom functions in Ruby overview
Ruby function signatures
Using special features in implementation methods
Iterative functions
Refactoring legacy 3.x functions



Deferring a function
Deferred functions overview
Using a template with Deferred values
Write a deferred function to store secrets
Integrations with secret stores





Values, data types, and aliases
Type aliases
Typecasting
Abstract data types
Arrays
Binary
Booleans
Data type syntax
Default
Error data type
Hashes
Numbers
Regular expressions
Resource and class references
Resource types
Sensitive
Strings
Time-related data types
Undef



Templates
Creating templates using Embedded Puppet
Creating templates using Embedded Ruby



Advanced constructs
Iteration and loops
Lambdas
Resource default statements
Resource collectors
Virtual resources
Exported resources
Tags
Run stages



Details of complex behaviors
Containment
Scope
Namespaces and autoloading


Securing sensitive data


Metaparameter reference
Configuration Reference
Built-in function reference

Puppet Man Pages

Core tools
Man Page: puppet agent
Man Page: puppet apply
Man Page: puppet module
Man Page: puppet resource
Man Page: puppet lookup



Occasionally useful
Man Page: puppet config
Man Page: puppet describe
Man Page: puppet device
Man Page: puppet doc
Man Page: puppet help
Man Page: puppet node
Man Page: puppet parser



Niche
Man Page: puppet catalog
Man Page: puppet facts
Man Page: puppet filebucket
Man Page: puppet report







Developing modules

Modules
Modules overview
Plug-ins in modules
Module cheat sheet
Installing and managing modules from the command line
Beginner's guide to writing modules
Module metadata
Documenting modules
Documenting modules with Puppet Strings  
Puppet Strings style guide

Publishing modulesUsing the Forge API

Contributing to Puppet modules


Puppet Development Kit (PDK)
Puppet VSCode extension

PowerShell DSC Resources
Converting DSC Resources
Distributing arbitrary DSC resources
Upgrading Puppet DSC modules 
Troubleshooting DSC Resources 


Ruby API for developing extensions


Classifying nodes

You can classify nodes using an external node classifier (ENC), which is a script or
        application that tells Puppet which classes a node must have.
        It can replace or work in concert with the node definitions in the main site manifest
            (site.pp).
The external_nodes script receives the name of the node
            to classify as its first argument, which is usually the node's fully qualified domain
            name. For more information, see the configuration reference.
Depending on the external data sources you use in your infrastructure, building an
            external node classifier can be a valuable way to extend Puppet.

Note: You can use an ENC instead of or in combination with node definitions.
External node classifiers
An external node classifier is an executable that Puppet Server or puppet apply can call; it
                doesn’t have to be written in Ruby. Its only argument is the name of the node to be
                classified, and it returns a YAML document describing the node.
Inside the ENC, you can reference any data source you want, including PuppetDB. From Puppet’s perspective, the
                ENC submits a node name and gets back a hash of information. 
External node classifiers can co-exist with standard node definitions in
                    site.pp; the classes declared in each source are merged
                together.

Merging classes from multiple sources
Every node always gets a node object from the configured node terminus. The node
                object might be empty, or it might contain classes, parameters, and an environment.
                The node terminus
                    setting, node_terminus, takes effect where the catalog
                is compiled, on Puppet Server when using an agent-server
                configuration, and on the node itself when using puppet apply. The
                default node terminus is plain, which returns an empty node object,
                leaving node configuration to the main manifest.
                The exec terminus calls an ENC script to determine what
                goes in the node object. Every node might also get a  node definition from
                    the main manifest. 
When compiling a node's catalog, Puppet includes all
                of the following: 

Classes specified in the node object it received from the node
                            terminus.


Classes or resources that are in the site manifest but outside any node
                            definitions.


Classes or resources in the most specific node definition in
                                site.pp that matches the current node (if
                                site.pp contains any node definitions). The
                            following notes apply:


If site.pp contains at least one node
                                    definition, it must have a node definition that matches the
                                    current node; compilation fails if a match can’t be found. 


If the node name resembles a dot-separated fully qualified domain
                                    name, Puppet makes multiple
                                    attempts to match a node definition, removing the right-most
                                    part of the name each time. Thus, Puppet would first try
                                        agent1.example.com, then
                                        agent1.example, then
                                        agent1. This behavior isn’t mimicked when
                                    calling an ENC, which is invoked only once with the agent’s full
                                    node name.


If no matching node definition can be found with the node’s name,
                                        Puppet tries one last time
                                    with a node name of default; most users include
                                    a node default {} statement in their
                                        site.pp file. This behavior isn’t mimicked
                                    when calling an ENC.








Comparing ENCs and node definitions

If you're trying to decide whether to use an ENC or main
        manifest node definitions (or both), consider the following:

The YAML returned by an ENC isn’t an
                        exact equivalent of a node definition in site.pp — it can’t declare individual resources,
                        declare relationships, or do conditional logic. An ENC can only declare
                        classes, assign top-scope variables, and set an environment. So, an ENC is
                        most effective if you’ve done a good job of separating your configurations
                        out into classes and modules. 
ENCs can set an environment for a
                        node, overriding whatever environment the node requested. 
Unlike regular node definitions, where
                        a node can match a less specific definition if an exactly matching
                        definition isn’t found (depending on Puppet’s strict_hostname_checking setting), an ENC is
                        called only once, with the node’s full name.



Connect an ENC

Configure two settings to have Puppet Server connect to an external node classifier. 
In the primary server's puppet.conf file:


 Set the node_terminus setting to exec. 


Set the external_nodes setting to the path to the ENC executable.


ResultsFor
            example:[server]
  node_terminus = exec
  external_nodes = /usr/local/bin/puppet_node_classifier


ENC output format

An ENC must return either nothing or a YAML hash to
        standard out. The hash must contain at least one of classes or parameters, or it
        can contain both. It can also optionally contain an environment key.

ENCs exit with an exit code of 0 when functioning normally, and
                can exit with a non-zero exit code if you want Puppet
                to behave as though the requested node was not found.
If an
                ENC returns nothing or exits with a non-zero exit code, the catalog compilation
                fails with a “could not find node” error, and the node is unable to retrieve
                configurations.
For information about the YAML format, see
                    yaml.org. 

Classes
If present, the value of classes must be either an array of class names or a hash whose keys
                are class names. That is, the following are
                equivalent:classes:
  - common
  - puppet
  - dns
  - ntp

classes:
  common:
  puppet:
  dns:
  ntp:

If you're specifying parameterized classes, use the hash key
                syntax, not the array syntax. The value for a parameterized class is a hash of the
                class’s parameters and values. Each value can be a string, number, array, or hash.
                Put string values in quotation marks, because YAML parsers sometimes treat certain
                unquoted strings (such as on) as
                Booleans. Non-parameterized classes can have empty
                values.classes:
    common:
    puppet:
    ntp:
        ntpserver: 0.pool.ntp.org
    aptsetup:
        additional_apt_repos:
            - deb localrepo.example.com/ubuntu lucid production
            - deb localrepo.example.com/ubuntu lucid vendor


Parameters
If present, the value of the parameters key must be a hash of valid variable names and associated
                values; these are exposed to the compiler as top-scope variables. Each value can be
                a string, number, array, or
                hash.parameters:
    ntp_servers:
        - 0.pool.ntp.org
        - ntp.example.com
    mail_server: mail.example.com
    iburst: true


Environment
If present, the value of environment must be a string representing the desired environment for this node. This is the only environment used by the node
                in its requests for catalogs and
                files.environment: production


Complete example

---
classes:
    common:
    puppet:
    ntp:
        ntpserver: 0.pool.ntp.org
    aptsetup:
        additional_apt_repos:
            - deb localrepo.example.com/ubuntu lucid production
            - deb localrepo.example.com/ubuntu lucid vendor
parameters:
    ntp_servers:
        - 0.pool.ntp.org
        - ntp.example.com
    mail_server: mail.example.com
    iburst: true
environment: production



 




          Was this page helpful?
        
Yes
No







              Don’t fill this out if you’re human: 






Thank you for your feedback!

            Feel free to add a comment or suggestion.
            





Send
Please enter your feedback





              Don’t fill this out if you’re human: 







            We’re sorry to hear that! 
            Please tell us why so we can help.
          

            Enter your feedback and email. This form is sent to the Puppet docs team.
            We ask for your email as we might contact you regarding your feedback.
          

            If you need help with the product itself, visit Puppet Support
            or ask in Puppet Community on Slack.
          

            Feedback:
            






            Email Address:
            






            To learn about how Puppet uses your personal information,
            visit our privacy policy.
          


Send
Please enter your feedback and contact email

          If you leave us your email, we may contact you regarding your feedback.
          For more information on how Puppet uses your personal information, see
          our
          privacy policy.
        





            Don’t fill this out if you’re human: 








    See an issue? Please file a JIRA ticket in our
    [DOCUMENTATION]
      project.
  











Puppet by Perforce gives IT operations teams back their time and offers peace of mind with infrastructure automation that enables security and compliance.






Legal
Privacy Policy
Terms of Use
Security


©  Puppet, Inc., a Perforce company. All rights reserved.




Puppet and other identified trademarks are the property of Puppet, Inc., Perforce Software, Inc., or an affiliate. Such trademarks are claimed and/or registered in the U.S. and other countries and regions. All third-party trademarks are the property of their respective holders. References to third-party trademarks do not imply endorsement or sponsorship of any products or services by the trademark holder. Contact Puppet, Inc., for further details.

