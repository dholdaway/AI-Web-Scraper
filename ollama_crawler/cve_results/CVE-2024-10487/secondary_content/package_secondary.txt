Title: Resource Type: package
URL: https://www.puppet.com/docs/puppet/7/types/package

Puppet.com
Forge
Education


                                    Try Puppet
                                


































        Docs
        






Products
Puppet Enterprise
Open Source Puppet
Bolt
Security Compliance Management
Continuous Delivery
Puppet Development Kit
Puppet DB
Puppet Plugin for VMware



        Support
        






Get
Technical Support Plans
Support Lifecycle Policy
New Puppet Enterprise Customer?



        Community
        






About Puppet
Company
Developer Experience
Community
Puppet Champions
Puppet Test Pilots
Community Calendar
Slack Channel







 









































PRODUCT AND VERSION


      Current product
      










      Current version
      








Puppet  7.34.0

Release notes

Puppet release notes
Puppet  7.34.0Security


Puppet known issues
Puppet Server release notes
Puppet Server known Issues
PuppetDB release notes (link)

Facter release notes
Facter 4.10.0
Facter 4.9.0
Facter 4.8.0
Facter 4.7.1
Facter 4.7.0
Facter 4.6.1
Facter 4.6.0
Facter 4.5.2


Facter known issues
What's new since Puppet 6?
Upgrading from Puppet 6 to Puppet 7

Experimental featuresMsgpack support

Archived documentation



Puppet overview
What is Puppet?
Why use Puppet desired state management?
Key concepts behind Puppet
The Puppet platform 
Puppet platform lifecycle 
Open source Puppet vs Puppet Enterprise (PE)
The Puppet ecosystem
Use cases
Glossary
Navigating the documentation



Set up Puppet

Install Puppet
System requirements
Installing Puppet  
Installing and configuring agents
Manually verify packages
Managing Platform versions



Configure Puppet settings
Puppet settings
Key configuration settings

Puppet's configuration files
puppet.conf: The main config file
environment.conf: Per-environment settings
fileserver.conf: Custom fileserver mount points
puppetdb.conf: PuppetDB server locations
autosign.conf: Basic certificate autosigning 
csr_attributes.yaml: Certificate extensions 
custom_trusted_oid_mapping.yaml: Short names for cert extension OIDs
device.conf: Network hardware access
routes.yaml: Advanced plugin routing


Adding file server mount points
Checking the values of settings
Editing settings on the command line
Configuration Reference



Upgrading
Upgrade Puppet Server

Upgrade agents
Upgrade agents using the puppet_agent module
Upgrade *nix agents
Upgrade Windows agents
Upgrade macOS agents


Upgrade PuppetDB



Environments
About environments
Creating environments
Environment isolation



Directories and files
Code and data directory (codedir)
Config directory (confdir)
Main manifest directory
The modulepath
SSL directory (ssldir)
Cache directory (vardir)


Report reference



Platform components

Puppet Server
About Puppet Server
Deprecated features
Server and agent compatibility
Installing Puppet Server

Configuring Puppet Server
Configuring Puppet Server

Puppet Server configuration files
auth.conf
ca.conf
global.conf
logback.xml
metrics.conf
product.conf
puppetserver.conf
web-routes.conf
webserver.conf


Migrating to the HOCON auth.conf format
Advanced logging configuration
Differing behavior in puppet.conf



Using and extending Puppet Server
Subcommands
Using Ruby gems
Intermediate CA
Infrastructure certificate revocation list (CRL)
External SSL termination

Server metrics
Monitoring Puppet Server metrics
HTTP Client Metrics


Tuning guide
Applying metrics to improve performance
Submitting usage telemetry
Scaling Puppet Server
Restarting Puppet Server"



Developer information
Developer debugging
Running from source
Tracing code events



Puppet Server HTTP API
Puppet Server HTTP API overview
PSON

Puppet v3 API
Catalog
Node
Facts
File Bucket File
File Content
File Metadata
Report



Puppet v4 APICatalog API


CA v1 API
Certificate
Certificate Request
Certificate Status
Certificate Revocation List
Expirations
Certificate Clean


Schemas (JSON)



API endpoints

Metrics API endpoints
v1 metrics
v2 (Jolokia) metrics



Status API endpoints
Services endpoint
Simple endpoint



Administrative API endpoints
Environment cache
JRuby pool



Server-specific Puppet API endpoints
Environment classes
Environment modules
Static file content





Certificate authority and SSL
Puppet Server CA commands
Intermediate CA
Autosigning certificate requests
CSR attributes and certificate extensions
Regenerating certificates in a Puppet deployment
External CA
External SSL termination





Facter  
Facter: CLI
Facter: Core Facts

Custom facts overviewEnvironment facts 

Writing custom facts
External facts
Configuring Facter with facter.conf


PuppetDB

Puppet services and tools
Puppet commands
Running Puppet commands on Windows  

primary Puppet serverAbout Puppet Server

Puppet agent on *nix systems
Puppet agent on Windows
Puppet apply
Puppet device



Puppet reports
Reporting
Report reference
Writing custom report processors
Report format



Life cycle of a Puppet run
Agent-server HTTPS communications
Catalog compilation
Static catalogs 





Using Puppet code
Classifying nodes
Managing environment content with a Puppetfile
Using content from Puppet Forge

Designing system configs (roles and profiles)
The roles and profiles method 
Roles and profiles example 
Designing advanced profiles 
Designing convenient roles 



Separating data (Hiera)
About Hiera  
Getting started with Hiera  
Configuring Hiera
Creating and editing data 
Looking up data with Hiera  
Writing new data backends 

Debugging Hiera
Unexpected values
Common errors


Upgrading to Hiera 5 



Use case examples
Manage NTP
Manage sudo 
Manage DNS
Manage firewall rules
Forge examples





Syntax and settings

The Puppet language
Puppet language overview
Puppet language syntax examples
The Puppet language style guide 
Files and paths on Windows  
Code comments 
Variables
Resources

Resource types
Resource Type Reference (Single-Page)
Built-in types
Optional resource types for Windows
Resource Type: exec
Using exec on Windows  
Resource Type: file
Using file on Windows
Resource Type: filebucket
Resource Type: group
Using user and group on Windows
Resource types overview
Resource Type: notify
Resource Type: package
Using package on Windows  
Resource Type: resources
Resource Type: schedule
Resource Type: service
Using service
Resource Type: stage
Resource Type: tidy
Resource Type: user


Relationships and ordering
Classes
Defined resource types
Bolt tasks
Expressions and operators
Conditional statements and expressions
Function calls
Built-in function reference
Node definitions

Facts and built-in variables
Accessing facts from Puppet code
Built-in variables


Reserved words and acceptable names

Custom resources

Develop types and providers with the Resource APIResource API reference


Low-level method for developing types and providers
Type development
Provider development
Creating resources





Custom functions
Custom functions overview 
Writing custom functions in the Puppet language

Writing custom functions in Ruby
Custom functions in Ruby overview
Ruby function signatures
Using special features in implementation methods
Iterative functions
Refactoring legacy 3.x functions



Deferring a function
Deferred functions overview
Using a template with Deferred values
Write a deferred function to store secrets
Integrations with secret stores





Values, data types, and aliases
Type aliases
Typecasting
Abstract data types
Arrays
Binary
Booleans
Data type syntax
Default
Error data type
Hashes
Numbers
Regular expressions
Resource and class references
Resource types
Sensitive
Strings
Time-related data types
Undef



Templates
Creating templates using Embedded Puppet
Creating templates using Embedded Ruby



Advanced constructs
Iteration and loops
Lambdas
Resource default statements
Resource collectors
Virtual resources
Exported resources
Tags
Run stages



Details of complex behaviors
Containment
Scope
Namespaces and autoloading


Securing sensitive data


Metaparameter reference
Configuration Reference
Built-in function reference

Puppet Man Pages

Core tools
Man Page: puppet agent
Man Page: puppet apply
Man Page: puppet module
Man Page: puppet resource
Man Page: puppet lookup



Occasionally useful
Man Page: puppet config
Man Page: puppet describe
Man Page: puppet device
Man Page: puppet doc
Man Page: puppet help
Man Page: puppet node
Man Page: puppet parser



Niche
Man Page: puppet catalog
Man Page: puppet facts
Man Page: puppet filebucket
Man Page: puppet report







Developing modules

Modules
Modules overview
Plug-ins in modules
Module cheat sheet
Installing and managing modules from the command line
Beginner's guide to writing modules
Module metadata
Documenting modules
Documenting modules with Puppet Strings  
Puppet Strings style guide

Publishing modulesUsing the Forge API

Contributing to Puppet modules


Puppet Development Kit (PDK)
Puppet VSCode extension

PowerShell DSC Resources
Converting DSC Resources
Distributing arbitrary DSC resources
Upgrading Puppet DSC modules 
Troubleshooting DSC Resources 


Ruby API for developing extensions

Resource Type: package
NOTE: This page was generated from the Puppet source code on 2022-02-07 10:05:45 -0800
package

Attributes
Providers
Provider Features

Description 

Manage packages.  There is a basic dichotomy in package
support right now:  Some package types (such as yum and apt) can
retrieve their own package files, while others (such as rpm and sun)
cannot.  For those package formats that cannot retrieve their own files,
you can use the source parameter to point to the correct file.
Puppet will automatically guess the packaging format that you are
using based on the platform you are on, but you can override it
using the provider parameter; each provider defines what it
requires in order to function, and you must meet those requirements
to use a given provider.
You can declare multiple package resources with the same name as long
as they have unique titles, and specify different providers and commands.
Note that you must use the title to make a reference to a package
resource; Package[<NAME>] is not a synonym for Package[<TITLE>] like
it is for many other resource types.
Autorequires: If Puppet is managing the files specified as a
package's adminfile, responsefile, or source, the package
resource will autorequire those files.
Attributes 
package { 'resource title':
  name                 => # (namevar) The package name.  This is the name that the...
  command              => # (namevar) The targeted command to use when managing a...
  ensure               => # What state the package should be in. On...
  adminfile            => # A file containing package defaults for...
  allow_virtual        => # Specifies if virtual package names are allowed...
  allowcdrom           => # Tells apt to allow cdrom sources in the...
  category             => # A read-only parameter set by the...
  configfiles          => # Whether to keep or replace modified config files 
  description          => # A read-only parameter set by the...
  enable_only          => # Tells `dnf module` to only enable a specific...
  flavor               => # OpenBSD and DNF modules support 'flavors', which 
  install_only         => # It should be set for packages that should only...
  install_options      => # An array of additional options to pass when...
  instance             => # A read-only parameter set by the...
  mark                 => # Set to hold to tell Debian apt/Solaris pkg to...
  package_settings     => # Settings that can change the contents or...
  platform             => # A read-only parameter set by the...
  provider             => # The specific backend to use for this `package...
  reinstall_on_refresh => # Whether this resource should respond to refresh...
  responsefile         => # A file containing any necessary answers to...
  root                 => # A read-only parameter set by the...
  source               => # Where to find the package file. This is mostly...
  status               => # A read-only parameter set by the...
  uninstall_options    => # An array of additional options to pass when...
  vendor               => # A read-only parameter set by the...
  # ...plus any applicable metaparameters.
}
name 

(Namevar: If omitted, this attribute's value defaults to the resource's title.)
The package name.  This is the name that the packaging
system uses internally, which is sometimes (especially on Solaris)
a name that is basically useless to humans.  If a package goes by
several names, you can use a single title and then set the name
conditionally:
# In the 'openssl' class
$ssl = $operatingsystem ? {
  solaris => SMCossl,
  default => openssl
}

package { 'openssl':
  ensure => installed,
  name   => $ssl,
}

...

$ssh = $operatingsystem ? {
  solaris => SMCossh,
  default => openssh
}

package { 'openssh':
  ensure  => installed,
  name    => $ssh,
  require => Package['openssl'],
}
(↑ Back to package attributes)
command 

(Namevar: If omitted, this attribute's value defaults to the resource's title.)
The targeted command to use when managing a package:
package { 'mysql':
provider => gem,
}
package { 'mysql-opt':
name     => 'mysql',
provider => gem,
command  => '/opt/ruby/bin/gem',
}
Each provider defines a package management command; and uses the first
instance of the command found in the PATH.
Providers supporting the targetable feature allow you to specify the
absolute path of the package management command; useful when multiple
instances of the command are installed, or the command is not in the PATH.
Default: default
Requires features targetable.
(↑ Back to package attributes)
ensure 

(Property: This attribute represents concrete state on the target system.)
What state the package should be in. On packaging systems that can
retrieve new packages on their own, you can choose which package to
retrieve by specifying a version number or latest as the ensure
value. On packaging systems that manage configuration files separately
from "normal" system files, you can uninstall config files by
specifying purged as the ensure value. This defaults to installed.
Version numbers must match the full version to install, including
release if the provider uses a release moniker. For
example, to install the bash package from the rpm
bash-4.1.2-29.el6.x86_64.rpm, use the string '4.1.2-29.el6'.
On supported providers, version ranges can also be ensured. For example,
inequalities: <2.0.0, or intersections: >1.0.0 <2.0.0.
Default: installed
Allowed values:

present
absent
purged
disabled
installed
latest
/./

(↑ Back to package attributes)
adminfile 

A file containing package defaults for installing packages.
This attribute is only used on Solaris. Its value should be a path to a
local file stored on the target system. Solaris's package tools expect
either an absolute file path or a relative path to a file in
/var/sadm/install/admin.
The value of adminfile will be passed directly to the pkgadd or
pkgrm command with the -a <ADMINFILE> option.
(↑ Back to package attributes)
allow_virtual 

Specifies if virtual package names are allowed for install and uninstall.
Allowed values:

true
false
yes
no

Requires features virtual_packages.
(↑ Back to package attributes)
allowcdrom 

Tells apt to allow cdrom sources in the sources.list file.
Normally apt will bail if you try this.
Allowed values:

true
false

(↑ Back to package attributes)
category 

A read-only parameter set by the package.
(↑ Back to package attributes)
configfiles 

Whether to keep or replace modified config files when installing or
upgrading a package. This only affects the apt and dpkg providers.
Default: keep
Allowed values:

keep
replace

(↑ Back to package attributes)
description 

A read-only parameter set by the package.
(↑ Back to package attributes)
enable_only 

Tells dnf module to only enable a specific module, instead
of installing its default profile.
Modules with no default profile will be enabled automatically
without the use of this parameter.
Conflicts with the flavor property, which selects a profile
to install.
Default: false
Allowed values:

true
false
yes
no

(↑ Back to package attributes)
flavor 

(Property: This attribute represents concrete state on the target system.)
OpenBSD and DNF modules support 'flavors', which are
further specifications for which type of package you want.
Requires features supports_flavors.
(↑ Back to package attributes)
install_only 

It should be set for packages that should only ever be installed,
never updated. Kernels in particular fall into this category.
Default: false
Allowed values:

true
false
yes
no

Requires features install_only.
(↑ Back to package attributes)
install_options 

An array of additional options to pass when installing a package. These
options are package-specific, and should be documented by the software
vendor.  One commonly implemented option is INSTALLDIR:
package { 'mysql':
  ensure          => installed,
  source          => 'N:/packages/mysql-5.5.16-winx64.msi',
  install_options => [ '/S', { 'INSTALLDIR' => 'C:\\mysql-5.5' } ],
}
Each option in the array can either be a string or a hash, where each
key and value pair are interpreted in a provider specific way.  Each
option will automatically be quoted when passed to the install command.
With Windows packages, note that file paths in an install option must
use backslashes. (Since install options are passed directly to the
installation command, forward slashes won't be automatically converted
like they are in file resources.) Note also that backslashes in
double-quoted strings must be escaped and backslashes in single-quoted
strings can be escaped.
Requires features install_options.
(↑ Back to package attributes)
instance 

A read-only parameter set by the package.
(↑ Back to package attributes)
mark 

(Property: This attribute represents concrete state on the target system.)
Set to hold to tell Debian apt/Solaris pkg to hold the package version
#{mark_doc}
Default is "none". Mark can be specified with or without ensure,
if ensure is missing will default to "present".
Mark cannot be specified together with "purged", or "absent"
values for ensure.
Allowed values:

hold
none

Requires features holdable.
(↑ Back to package attributes)
package_settings 

(Property: This attribute represents concrete state on the target system.)
Settings that can change the contents or configuration of a package.
The formatting and effects of package_settings are provider-specific; any
provider that implements them must explain how to use them in its
documentation. (Our general expectation is that if a package is
installed but its settings are out of sync, the provider should
re-install that package with the desired settings.)
An example of how package_settings could be used is FreeBSD's port build
options --- a future version of the provider could accept a hash of options,
and would reinstall the port if the installed version lacked the correct
settings.
package { 'www/apache22':
  package_settings => { 'SUEXEC' => false }
}
Again, check the documentation of your platform's package provider to see
the actual usage.
Requires features package_settings.
(↑ Back to package attributes)
platform 

A read-only parameter set by the package.
(↑ Back to package attributes)
provider 

The specific backend to use for this package resource. You will seldom need to specify this --- Puppet will usually discover the appropriate provider for your platform.
Available providers are:

aix
appdmg
apple
apt
aptitude
aptrpm
blastwave
dnf
dnfmodule
dpkg
fink
freebsd
gem
hpux
macports
nim
openbsd
opkg
pacman
pip2
pip3
pip
pkg
pkgdmg
pkgin
pkgng
pkgutil
portage
ports
portupgrade
puppet_gem
puppetserver_gem
rpm
rug
sun
sunfreeware
tdnf
up2date
urpmi
windows
yum
zypper

(↑ Back to package attributes)
reinstall_on_refresh 

Whether this resource should respond to refresh events (via subscribe,
notify, or the ~> arrow) by reinstalling the package. Only works for
providers that support the reinstallable feature.
This is useful for source-based distributions, where you may want to
recompile a package if the build options change.
If you use this, be careful of notifying classes when you want to restart
services. If the class also contains a refreshable package, doing so could
cause unnecessary re-installs.
Default: false
Allowed values:

true
false

(↑ Back to package attributes)
responsefile 

A file containing any necessary answers to questions asked by
the package.  This is currently used on Solaris and Debian.  The
value will be validated according to system rules, but it should
generally be a fully qualified path.
(↑ Back to package attributes)
root 

A read-only parameter set by the package.
(↑ Back to package attributes)
source 

Where to find the package file. This is mostly used by providers that don't
automatically download packages from a central repository. (For example:
the yum provider ignores this attribute, apt provider uses it if present
and the rpm and dpkg providers require it.)
Different providers accept different values for source. Most providers
accept paths to local files stored on the target system. Some providers
may also accept URLs or network drive paths. Puppet will not
automatically retrieve source files for you, and usually just passes the
value of source to the package installation command.
You can use a file resource if you need to manually copy package files
to the target system.
(↑ Back to package attributes)
status 

A read-only parameter set by the package.
(↑ Back to package attributes)
uninstall_options 

An array of additional options to pass when uninstalling a package. These
options are package-specific, and should be documented by the software
vendor.  For example:
package { 'VMware Tools':
  ensure            => absent,
  uninstall_options => [ { 'REMOVE' => 'Sync,VSS' } ],
}
Each option in the array can either be a string or a hash, where each
key and value pair are interpreted in a provider specific way.  Each
option will automatically be quoted when passed to the uninstall
command.
On Windows, this is the only place in Puppet where backslash
separators should be used.  Note that backslashes in double-quoted
strings must be double-escaped and backslashes in single-quoted
strings may be double-escaped.
Requires features uninstall_options.
(↑ Back to package attributes)
vendor 

A read-only parameter set by the package.
(↑ Back to package attributes)
Providers 

aix 

Installation from an AIX software directory, using the AIX installp
command.  The source parameter is required for this provider, and should
be set to the absolute path (on the puppet agent machine) of a directory
containing one or more BFF package files.
The installp command will generate a table of contents file (named .toc)
in this directory, and the name parameter (or resource title) that you
specify for your package resource must match a package name that exists
in the .toc file.
Note that package downgrades are not supported; if your resource specifies
a specific version number and there is already a newer version of the package
installed on the machine, the resource will fail with an error message.

Required binaries: /usr/bin/lslpp, /usr/sbin/installp
Confined to: operatingsystem == [ :aix ]
Default for: ["operatingsystem", "aix"] == 
Supported features: versionable

appdmg 

Package management which copies application bundles to a target.

Required binaries: /usr/bin/hdiutil, /usr/bin/curl, /usr/bin/ditto
Confined to: operatingsystem == darwin, feature == cfpropertylist

apple 

Package management based on OS X's built-in packaging system.  This is
essentially the simplest and least functional package system in existence --
it only supports installation; no deletion or upgrades.  The provider will
automatically add the .pkg extension, so leave that off when specifying
the package name.

Required binaries: /usr/sbin/installer
Confined to: operatingsystem == darwin

apt 

Package management via apt-get.
This provider supports the install_options attribute, which allows command-line flags to be passed to apt-get.
These options should be specified as an array where each element is either a
string or a hash.

Required binaries: /usr/bin/apt-get, /usr/bin/apt-cache, /usr/bin/apt-mark, /usr/bin/debconf-set-selections
Default for: ["osfamily", "debian"] == 
Supported features: versionable, install_options, virtual_packages

aptitude 

Package management via aptitude.

Required binaries: /usr/bin/aptitude, /usr/bin/apt-cache
Supported features: versionable

aptrpm 

Package management via apt-get ported to rpm.

Required binaries: apt-get, apt-cache, rpm
Supported features: versionable

blastwave 

Package management using Blastwave.org's pkg-get command on Solaris.

Required binaries: pkgget
Confined to: osfamily == solaris

dnf 

Support via dnf.
Using this provider's uninstallable feature will not remove dependent packages. To
remove dependent packages with this provider use the purgeable feature, but note this
feature is destructive and should be used with the utmost care.
This provider supports the install_options attribute, which allows command-line flags to be passed to dnf.
These options should be specified as an array where each element is either
a string or a hash.

Required binaries: dnf, rpm
Default for: ["operatingsystem", "fedora"] == , ["osfamily", "redhat"] == 
Supported features: install_options, versionable, virtual_packages, install_only

dnfmodule 

Required binaries: /usr/bin/dnf
Supported features: installable, uninstallable, versionable, supports_flavors, disableable
dpkg 

Package management via dpkg.  Because this only uses dpkg
and not apt, you must specify the source of any packages you want
to manage.

Required binaries: /usr/bin/dpkg, /usr/bin/dpkg-deb, /usr/bin/dpkg-query
Supported features: holdable, virtual_packages

fink 

Package management via fink.

Required binaries: /sw/bin/fink, /sw/bin/apt-get, /sw/bin/apt-cache, /sw/bin/dpkg-query
Supported features: versionable

freebsd 

The specific form of package management on FreeBSD.  This is an
extremely quirky packaging system, in that it freely mixes between
ports and packages.  Apparently all of the tools are written in Ruby,
so there are plans to rewrite this support to directly use those
libraries.

Required binaries: /usr/sbin/pkg_info, /usr/sbin/pkg_add, /usr/sbin/pkg_delete
Confined to: operatingsystem == freebsd

gem 

Ruby Gem support. If a URL is passed via source, then that URL is
appended to the list of remote gem repositories; to ensure that only the
specified source is used, also pass --clear-sources via install_options.
If source is present but is not a valid URL, it will be interpreted as the
path to a local gem file. If source is not present, the gem will be
installed from the default gem repositories. Note that to modify this for Windows, it has to be a valid URL.
This provider supports the install_options and uninstall_options attributes,
which allow command-line flags to be passed to the gem command.
These options should be specified as an array where each element is either a
string or a hash.
Supported features: versionable, install_options, uninstall_options, targetable, version_ranges
hpux 

HP-UX's packaging system.

Required binaries: /usr/sbin/swinstall, /usr/sbin/swlist, /usr/sbin/swremove
Confined to: operatingsystem == hp-ux
Default for: ["operatingsystem", "hp-ux"] == 

macports 

Package management using MacPorts on OS X.
Supports MacPorts versions and revisions, but not variants.
Variant preferences may be specified using
the MacPorts variants.conf file.
When specifying a version in the Puppet DSL, only specify the version, not the revision.
Revisions are only used internally for ensuring the latest version/revision of a port.

Confined to: operatingsystem == darwin
Supported features: installable, uninstallable, upgradeable, versionable

nim 

Installation from an AIX NIM LPP source.  The source parameter is required
for this provider, and should specify the name of a NIM lpp_source resource
that is visible to the puppet agent machine.  This provider supports the
management of both BFF/installp and RPM packages.
Note that package downgrades are not supported; if your resource specifies
a specific version number and there is already a newer version of the package
installed on the machine, the resource will fail with an error message.

Required binaries: /usr/sbin/nimclient, /usr/bin/lslpp, rpm
Confined to: exists == /etc/niminfo
Supported features: versionable

openbsd 

OpenBSD's form of pkg_add support.
This provider supports the install_options and uninstall_options
attributes, which allow command-line flags to be passed to pkg_add and pkg_delete.
These options should be specified as an array where each element is either a
string or a hash.

Required binaries: pkg_info, pkg_add, pkg_delete
Confined to: operatingsystem == openbsd
Default for: ["operatingsystem", "openbsd"] == 
Supported features: versionable, install_options, uninstall_options, upgradeable, supports_flavors

opkg 

Opkg packaging support. Common on OpenWrt and OpenEmbedded platforms

Required binaries: opkg
Confined to: operatingsystem == openwrt
Default for: ["operatingsystem", "openwrt"] == 

pacman 

Support for the Package Manager Utility (pacman) used in Archlinux.
This provider supports the install_options attribute, which allows command-line flags to be passed to pacman.
These options should be specified as an array where each element is either a string or a hash.

Required binaries: /usr/bin/pacman
Confined to: operatingsystem == [:archlinux, :manjarolinux]
Default for: ["operatingsystem", "[:archlinux, :manjarolinux]"] == 
Supported features: install_options, uninstall_options, upgradeable, virtual_packages

pip 

Python packages via pip.
This provider supports the install_options attribute, which allows command-line flags to be passed to pip.
These options should be specified as an array where each element is either a string or a hash.
Supported features: installable, uninstallable, upgradeable, versionable, version_ranges, install_options, targetable
pip2 

Python packages via pip2.
This provider supports the install_options attribute, which allows command-line flags to be passed to pip2.
These options should be specified as an array where each element is either a string or a hash.
Supported features: installable, uninstallable, upgradeable, versionable, install_options, targetable
pip3 

Python packages via pip3.
This provider supports the install_options attribute, which allows command-line flags to be passed to pip3.
These options should be specified as an array where each element is either a string or a hash.
Supported features: installable, uninstallable, upgradeable, versionable, install_options, targetable
pkg 

OpenSolaris image packaging system. See pkg(5) for more information.
This provider supports the install_options attribute, which allows
command-line flags to be passed to pkg. These options should be specified as an
array where each element is either a string or a hash.

Required binaries: /usr/bin/pkg
Confined to: osfamily == solaris
Default for: ["osfamily", "solaris"] == ["kernelrelease", "['5.11', '5.12']"]
Supported features: versionable, upgradable, holdable, install_options

pkgdmg 

Package management based on Apple's Installer.app and DiskUtility.app.
This provider works by checking the contents of a DMG image for Apple pkg or
mpkg files. Any number of pkg or mpkg files may exist in the root directory
of the DMG file system, and Puppet will install all of them. Subdirectories
are not checked for packages.
This provider can also accept plain .pkg (but not .mpkg) files in addition
to .dmg files.
Notes:

The source attribute is mandatory. It must be either a local disk path
or an HTTP, HTTPS, or FTP URL to the package.
The name of the resource must be the filename (without path) of the DMG file.
When installing the packages from a DMG, this provider writes a file to
disk at /var/db/.puppet_pkgdmg_installed_NAME. If that file is present,
Puppet assumes all packages from that DMG are already installed.
This provider is not versionable and uses DMG filenames to determine
whether a package has been installed. Thus, to install new a version of a
package, you must create a new DMG with a different filename.
Required binaries: /usr/sbin/installer, /usr/bin/hdiutil, /usr/bin/curl
Confined to: operatingsystem == darwin, feature == cfpropertylist
Default for: ["operatingsystem", "darwin"] == 

pkgin 

Package management using pkgin, a binary package manager for pkgsrc.

Required binaries: pkgin
Default for: ["operatingsystem", "[ :smartos, :netbsd ]"] == 
Supported features: installable, uninstallable, upgradeable, versionable

pkgng 

A PkgNG provider for FreeBSD and DragonFly.

Required binaries: /usr/local/sbin/pkg
Confined to: operatingsystem == [:freebsd, :dragonfly]
Default for: ["operatingsystem", "[:freebsd, :dragonfly]"] == 
Supported features: versionable, upgradeable, install_options

pkgutil 

Package management using Peter Bonivart's pkgutil command on Solaris.
Confined to: osfamily == solaris
portage 

Provides packaging support for Gentoo's portage system.
This provider supports the install_options and uninstall_options attributes, which allows command-line
flags to be passed to emerge. These options should be specified as an array where each element is either a string or a hash.

Confined to: osfamily == gentoo
Default for: ["osfamily", "gentoo"] == 
Supported features: install_options, purgeable, reinstallable, uninstall_options, versionable, virtual_packages

ports 

Support for FreeBSD's ports.  Note that this, too, mixes packages and ports.
Required binaries: /usr/local/sbin/portupgrade, /usr/local/sbin/portversion, /usr/local/sbin/pkg_deinstall, /usr/sbin/pkg_info
portupgrade 

Support for FreeBSD's ports using the portupgrade ports management software.
Use the port's full origin as the resource name. eg (ports-mgmt/portupgrade)
for the portupgrade port.
Required binaries: /usr/local/sbin/portupgrade, /usr/local/sbin/portinstall, /usr/local/sbin/portversion, /usr/local/sbin/pkg_deinstall, /usr/sbin/pkg_info
puppet_gem 

Puppet Ruby Gem support. This provider is useful for managing
gems needed by the ruby provided in the puppet-agent package.

Confined to: true == Puppet.runtime[:facter].value(:aio_agent_version)
Supported features: versionable, install_options, uninstall_options

puppetserver_gem 

Puppet Server Ruby Gem support. If a URL is passed via source, then
that URL is appended to the list of remote gem repositories which by default
contains rubygems.org; To ensure that only the specified source is used also
pass --clear-sources in via install_options; if a source is present but
is not a valid URL, it will be interpreted as the path to a local gem file.
If source is not present at all, the gem will be installed from the default
gem repositories.

Confined to: feature == hocon, fips_enabled == false
Supported features: versionable, install_options, uninstall_options

rpm 

RPM packaging support; should work anywhere with a working rpm
binary.
This provider supports the install_options and uninstall_options
attributes, which allow command-line flags to be passed to rpm.
These options should be specified as an array where each element is either a string or a hash.

Required binaries: rpm
Supported features: versionable, install_options, uninstall_options, virtual_packages, install_only

rug 

Support for suse rug package manager.

Required binaries: /usr/bin/rug, rpm
Confined to: operatingsystem == [:suse, :sles]
Supported features: versionable

sun 

Sun's packaging system.  Requires that you specify the source for
the packages you're managing.
This provider supports the install_options attribute, which allows command-line flags to be passed to pkgadd.
These options should be specified as an array where each element is either a string
or a hash.

Required binaries: /usr/bin/pkginfo, /usr/sbin/pkgadd, /usr/sbin/pkgrm
Confined to: osfamily == solaris
Default for: ["osfamily", "solaris"] == 
Supported features: install_options

sunfreeware 

Package management using sunfreeware.com's pkg-get command on Solaris.
At this point, support is exactly the same as blastwave support and
has not actually been tested.

Required binaries: pkg-get
Confined to: osfamily == solaris

tdnf 

Support via tdnf.
This provider supports the install_options attribute, which allows command-line flags to be passed to tdnf.
These options should be spcified as a string (e.g. '--flag'), a hash (e.g. {'--flag' => 'value'}), or an
array where each element is either a string or a hash.

Required binaries: tdnf, rpm
Default for: ["operatingsystem", "PhotonOS"] == 
Supported features: install_options, versionable, virtual_packages

up2date 

Support for Red Hat's proprietary up2date package update
mechanism.

Required binaries: /usr/sbin/up2date-nox
Confined to: osfamily == redhat
Default for: ["osfamily", "redhat"] == ["lsbdistrelease", "["2.1", "3", "4"]"]

urpmi 

Support via urpmi.

Required binaries: urpmi, urpmq, rpm, urpme
Default for: ["operatingsystem", "[:mandriva, :mandrake]"] == 
Supported features: versionable

windows 

Windows package management.
This provider supports either MSI or self-extracting executable installers.
This provider requires a source attribute when installing the package.
It accepts paths to local files, mapped drives, or UNC paths.
This provider supports the install_options and uninstall_options
attributes, which allow command-line flags to be passed to the installer.
These options should be specified as an array where each element is either
a string or a hash.
If the executable requires special arguments to perform a silent install or
uninstall, then the appropriate arguments should be specified using the
install_options or uninstall_options attributes, respectively.  Puppet
will automatically quote any option that contains spaces.

Confined to: operatingsystem == windows
Default for: ["operatingsystem", "windows"] == 
Supported features: installable, uninstallable, install_options, uninstall_options, versionable

yum 

Support via yum.
Using this provider's uninstallable feature will not remove dependent packages. To
remove dependent packages with this provider use the purgeable feature, but note this
feature is destructive and should be used with the utmost care.
This provider supports the install_options attribute, which allows command-line flags to be passed to yum.
These options should be specified as an array where each element is either a string or a hash.

Required binaries: yum, rpm
Default for: ["operatingsystem", "amazon"] == , ["osfamily", "redhat"] == ["operatingsystemmajrelease", "(4..7).to_a"]
Supported features: install_options, versionable, virtual_packages, install_only

zypper 

Support for SuSE zypper package manager. Found in SLES10sp2+ and SLES11.
This provider supports the install_options attribute, which allows command-line flags to be passed to zypper.
These options should be specified as an array where each element is either a
string or a hash.

Required binaries: /usr/bin/zypper
Confined to: operatingsystem == [:suse, :sles, :sled, :opensuse]
Default for: ["operatingsystem", "[:suse, :sles, :sled, :opensuse]"] == 
Supported features: versionable, install_options, virtual_packages

Provider Features 

Available features:

disableable --- The provider can disable packages. This feature is used by specifying disabled as the desired value for the package.
holdable --- The provider is capable of placing packages on hold such that they are not automatically upgraded as a result of other package dependencies unless explicit action is taken by a user or another package.
install_only --- The provider accepts options to only install packages never update (kernels, etc.)
install_options --- The provider accepts options to be passed to the installer command.
installable --- The provider can install packages.
package_settings --- The provider accepts package_settings to be ensured for the given package. The meaning and format of these settings is provider-specific.
purgeable --- The provider can purge packages.  This generally means that all traces of the package are removed, including existing configuration files.  This feature is thus destructive and should be used with the utmost care.
reinstallable --- The provider can reinstall packages.
supports_flavors --- The provider accepts flavors, which are specific variants of packages.
targetable --- The provider accepts a targeted package management command.
uninstall_options --- The provider accepts options to be passed to the uninstaller command.
uninstallable --- The provider can uninstall packages.
upgradeable --- The provider can upgrade to the latest version of a package.  This feature is used by specifying latest as the desired value for the package.
version_ranges --- The provider can ensure version ranges.
versionable --- The provider is capable of interrogating the package database for installed version(s), and can select which out of a set of available versions of a package to install if asked.
virtual_packages --- The provider accepts virtual package names for install and uninstall.

Provider support:

aix - versionable
appdmg - No supported Provider features
apple - No supported Provider features
apt - versionable, install options, virtual packages
aptitude - versionable
aptrpm - versionable
blastwave - No supported Provider features
dnf - install options, versionable, virtual packages, install only
dnfmodule - installable, uninstallable, versionable, supports flavors, disableable
dpkg - holdable, virtual packages
fink - versionable
freebsd - No supported Provider features
gem - versionable, install options, uninstall options, targetable, version ranges
hpux - No supported Provider features
macports - installable, uninstallable, upgradeable, versionable
nim - versionable
openbsd - versionable, install options, uninstall options, upgradeable, supports flavors
opkg - No supported Provider features
pacman - install options, uninstall options, upgradeable, virtual packages
pip - installable, uninstallable, upgradeable, versionable, version ranges, install options, targetable
pip2 - installable, uninstallable, upgradeable, versionable, install options, targetable
pip3 - installable, uninstallable, upgradeable, versionable, install options, targetable
pkg - versionable, upgradable, holdable, install options
pkgdmg - No supported Provider features
pkgin - installable, uninstallable, upgradeable, versionable
pkgng - versionable, upgradeable, install options
pkgutil - No supported Provider features
portage - install options, purgeable, reinstallable, uninstall options, versionable, virtual packages
ports - No supported Provider features
portupgrade - No supported Provider features
puppet_gem - versionable, install options, uninstall options
puppetserver_gem - versionable, install options, uninstall options
rpm - versionable, install options, uninstall options, virtual packages, install only
rug - versionable
sun - install options
sunfreeware - No supported Provider features
tdnf - install options, versionable, virtual packages
up2date - No supported Provider features
urpmi - versionable
windows - installable, uninstallable, install options, uninstall options, versionable
yum - install options, versionable, virtual packages, install only
zypper - versionable, install options, virtual packages

 




          Was this page helpful?
        
Yes
No







              Don’t fill this out if you’re human: 






Thank you for your feedback!

            Feel free to add a comment or suggestion.
            





Send
Please enter your feedback





              Don’t fill this out if you’re human: 







            We’re sorry to hear that! 
            Please tell us why so we can help.
          

            Enter your feedback and email. This form is sent to the Puppet docs team.
            We ask for your email as we might contact you regarding your feedback.
          

            If you need help with the product itself, visit Puppet Support
            or ask in Puppet Community on Slack.
          

            Feedback:
            






            Email Address:
            






            To learn about how Puppet uses your personal information,
            visit our privacy policy.
          


Send
Please enter your feedback and contact email

          If you leave us your email, we may contact you regarding your feedback.
          For more information on how Puppet uses your personal information, see
          our
          privacy policy.
        





            Don’t fill this out if you’re human: 








    See an issue? Please file a JIRA ticket in our
    [DOCUMENTATION]
      project.
  











Puppet by Perforce gives IT operations teams back their time and offers peace of mind with infrastructure automation that enables security and compliance.






Legal
Privacy Policy
Terms of Use
Security


©  Puppet, Inc., a Perforce company. All rights reserved.




Puppet and other identified trademarks are the property of Puppet, Inc., Perforce Software, Inc., or an affiliate. Such trademarks are claimed and/or registered in the U.S. and other countries and regions. All third-party trademarks are the property of their respective holders. References to third-party trademarks do not imply endorsement or sponsorship of any products or services by the trademark holder. Contact Puppet, Inc., for further details.

