Title: Puppet agent on *nix systems
URL: https://www.puppet.com/docs/puppet/7/services_agent_unix

Puppet.com
Forge
Education


                                    Try Puppet
                                


































        Docs
        






Products
Puppet Enterprise
Open Source Puppet
Bolt
Security Compliance Management
Continuous Delivery
Puppet Development Kit
Puppet DB
Puppet Plugin for VMware



        Support
        






Get
Technical Support Plans
Support Lifecycle Policy
New Puppet Enterprise Customer?



        Community
        






About Puppet
Company
Developer Experience
Community
Puppet Champions
Puppet Test Pilots
Community Calendar
Slack Channel







 









































PRODUCT AND VERSION


      Current product
      










      Current version
      








Puppet  7.34.0

Release notes

Puppet release notes
Puppet  7.34.0Security


Puppet known issues
Puppet Server release notes
Puppet Server known Issues
PuppetDB release notes (link)

Facter release notes
Facter 4.10.0
Facter 4.9.0
Facter 4.8.0
Facter 4.7.1
Facter 4.7.0
Facter 4.6.1
Facter 4.6.0
Facter 4.5.2


Facter known issues
What's new since Puppet 6?
Upgrading from Puppet 6 to Puppet 7

Experimental featuresMsgpack support

Archived documentation



Puppet overview
What is Puppet?
Why use Puppet desired state management?
Key concepts behind Puppet
The Puppet platform 
Puppet platform lifecycle 
Open source Puppet vs Puppet Enterprise (PE)
The Puppet ecosystem
Use cases
Glossary
Navigating the documentation



Set up Puppet

Install Puppet
System requirements
Installing Puppet  
Installing and configuring agents
Manually verify packages
Managing Platform versions



Configure Puppet settings
Puppet settings
Key configuration settings

Puppet's configuration files
puppet.conf: The main config file
environment.conf: Per-environment settings
fileserver.conf: Custom fileserver mount points
puppetdb.conf: PuppetDB server locations
autosign.conf: Basic certificate autosigning 
csr_attributes.yaml: Certificate extensions 
custom_trusted_oid_mapping.yaml: Short names for cert extension OIDs
device.conf: Network hardware access
routes.yaml: Advanced plugin routing


Adding file server mount points
Checking the values of settings
Editing settings on the command line
Configuration Reference



Upgrading
Upgrade Puppet Server

Upgrade agents
Upgrade agents using the puppet_agent module
Upgrade *nix agents
Upgrade Windows agents
Upgrade macOS agents


Upgrade PuppetDB



Environments
About environments
Creating environments
Environment isolation



Directories and files
Code and data directory (codedir)
Config directory (confdir)
Main manifest directory
The modulepath
SSL directory (ssldir)
Cache directory (vardir)


Report reference



Platform components

Puppet Server
About Puppet Server
Deprecated features
Server and agent compatibility
Installing Puppet Server

Configuring Puppet Server
Configuring Puppet Server

Puppet Server configuration files
auth.conf
ca.conf
global.conf
logback.xml
metrics.conf
product.conf
puppetserver.conf
web-routes.conf
webserver.conf


Migrating to the HOCON auth.conf format
Advanced logging configuration
Differing behavior in puppet.conf



Using and extending Puppet Server
Subcommands
Using Ruby gems
Intermediate CA
Infrastructure certificate revocation list (CRL)
External SSL termination

Server metrics
Monitoring Puppet Server metrics
HTTP Client Metrics


Tuning guide
Applying metrics to improve performance
Submitting usage telemetry
Scaling Puppet Server
Restarting Puppet Server"



Developer information
Developer debugging
Running from source
Tracing code events



Puppet Server HTTP API
Puppet Server HTTP API overview
PSON

Puppet v3 API
Catalog
Node
Facts
File Bucket File
File Content
File Metadata
Report



Puppet v4 APICatalog API


CA v1 API
Certificate
Certificate Request
Certificate Status
Certificate Revocation List
Expirations
Certificate Clean


Schemas (JSON)



API endpoints

Metrics API endpoints
v1 metrics
v2 (Jolokia) metrics



Status API endpoints
Services endpoint
Simple endpoint



Administrative API endpoints
Environment cache
JRuby pool



Server-specific Puppet API endpoints
Environment classes
Environment modules
Static file content





Certificate authority and SSL
Puppet Server CA commands
Intermediate CA
Autosigning certificate requests
CSR attributes and certificate extensions
Regenerating certificates in a Puppet deployment
External CA
External SSL termination





Facter  
Facter: CLI
Facter: Core Facts

Custom facts overviewEnvironment facts 

Writing custom facts
External facts
Configuring Facter with facter.conf


PuppetDB

Puppet services and tools
Puppet commands
Running Puppet commands on Windows  

primary Puppet serverAbout Puppet Server

Puppet agent on *nix systems
Puppet agent on Windows
Puppet apply
Puppet device



Puppet reports
Reporting
Report reference
Writing custom report processors
Report format



Life cycle of a Puppet run
Agent-server HTTPS communications
Catalog compilation
Static catalogs 





Using Puppet code
Classifying nodes
Managing environment content with a Puppetfile
Using content from Puppet Forge

Designing system configs (roles and profiles)
The roles and profiles method 
Roles and profiles example 
Designing advanced profiles 
Designing convenient roles 



Separating data (Hiera)
About Hiera  
Getting started with Hiera  
Configuring Hiera
Creating and editing data 
Looking up data with Hiera  
Writing new data backends 

Debugging Hiera
Unexpected values
Common errors


Upgrading to Hiera 5 



Use case examples
Manage NTP
Manage sudo 
Manage DNS
Manage firewall rules
Forge examples





Syntax and settings

The Puppet language
Puppet language overview
Puppet language syntax examples
The Puppet language style guide 
Files and paths on Windows  
Code comments 
Variables
Resources

Resource types
Resource Type Reference (Single-Page)
Built-in types
Optional resource types for Windows
Resource Type: exec
Using exec on Windows  
Resource Type: file
Using file on Windows
Resource Type: filebucket
Resource Type: group
Using user and group on Windows
Resource types overview
Resource Type: notify
Resource Type: package
Using package on Windows  
Resource Type: resources
Resource Type: schedule
Resource Type: service
Using service
Resource Type: stage
Resource Type: tidy
Resource Type: user


Relationships and ordering
Classes
Defined resource types
Bolt tasks
Expressions and operators
Conditional statements and expressions
Function calls
Built-in function reference
Node definitions

Facts and built-in variables
Accessing facts from Puppet code
Built-in variables


Reserved words and acceptable names

Custom resources

Develop types and providers with the Resource APIResource API reference


Low-level method for developing types and providers
Type development
Provider development
Creating resources





Custom functions
Custom functions overview 
Writing custom functions in the Puppet language

Writing custom functions in Ruby
Custom functions in Ruby overview
Ruby function signatures
Using special features in implementation methods
Iterative functions
Refactoring legacy 3.x functions



Deferring a function
Deferred functions overview
Using a template with Deferred values
Write a deferred function to store secrets
Integrations with secret stores





Values, data types, and aliases
Type aliases
Typecasting
Abstract data types
Arrays
Binary
Booleans
Data type syntax
Default
Error data type
Hashes
Numbers
Regular expressions
Resource and class references
Resource types
Sensitive
Strings
Time-related data types
Undef



Templates
Creating templates using Embedded Puppet
Creating templates using Embedded Ruby



Advanced constructs
Iteration and loops
Lambdas
Resource default statements
Resource collectors
Virtual resources
Exported resources
Tags
Run stages



Details of complex behaviors
Containment
Scope
Namespaces and autoloading


Securing sensitive data


Metaparameter reference
Configuration Reference
Built-in function reference

Puppet Man Pages

Core tools
Man Page: puppet agent
Man Page: puppet apply
Man Page: puppet module
Man Page: puppet resource
Man Page: puppet lookup



Occasionally useful
Man Page: puppet config
Man Page: puppet describe
Man Page: puppet device
Man Page: puppet doc
Man Page: puppet help
Man Page: puppet node
Man Page: puppet parser



Niche
Man Page: puppet catalog
Man Page: puppet facts
Man Page: puppet filebucket
Man Page: puppet report







Developing modules

Modules
Modules overview
Plug-ins in modules
Module cheat sheet
Installing and managing modules from the command line
Beginner's guide to writing modules
Module metadata
Documenting modules
Documenting modules with Puppet Strings  
Puppet Strings style guide

Publishing modulesUsing the Forge API

Contributing to Puppet modules


Puppet Development Kit (PDK)
Puppet VSCode extension

PowerShell DSC Resources
Converting DSC Resources
Distributing arbitrary DSC resources
Upgrading Puppet DSC modules 
Troubleshooting DSC Resources 


Ruby API for developing extensions



Puppet agent on *nix systems

Puppet agent is the
        application that manages the configurations on your nodes. It requires a Puppet primary server to fetch configuration catalogs
        from.
Depending on your infrastructure and needs, you can manage systems
            with Puppet agent as a service, as a cron job, or on
            demand.
For more information about running the puppet agent command, see the puppet agent man page.


Puppet agent's run environment


Puppet agent runs as a specific user, (usually root) and initiates outbound connections on port
        8140.
Ports

Puppetâ€™s HTTPS traffic uses port 8140. Your operating
                system and firewall must allow Puppet agent to
                initiate outbound connections on this port.
If you want to use a non-default port, you have to change the serverport setting on all agent nodes, and ensure
                that you change your primary Puppet serverâ€™s port as
                well.
User

Puppet agent runs as root, which lets it manage the
                configuration of the entire system.

Puppet agent can also run as a non-root user, as long
                as it is started by that user. However, this restricts the resources that Puppet agent can manage, and requires you to run Puppet agent as a cron job instead of a
                service.
If you need to install packages into a directory
                controlled by a non-root user, use an exec to unzip a tarball or use a
                    recursive file resource to copy a directory into place.
When running without root permissions, most of Puppetâ€™s resource providers cannot use sudo to elevate
                permissions. This means Puppet can only manage
                resources that its user can modify without using sudo.
Out of the
                core resource types listed in the resource type reference, only the
                following types are available to non-root agents: 







Resource type
Details





augeas





cron

Only non-root cron jobs can be viewed
                                    or set.



exec

Cannot run as another user or
                                    group.



file

Only if the non-root user has
                                    read/write privileges.



notify





schedule





service

For services that donâ€™t require root.
                                    You can also use the start, stop,
                                        and status attributes to specify
                                    how non-root users can control the service.



ssh_authorized_key





ssh_key








Manage systems with Puppet agent

In a standard Puppet
        configuration, each node periodically does configuration runs to revert unwanted changes and
        to pick up recent updates.
On *nix nodes, there are three main ways
            to do this:
Run Puppet agent as a
                        service.
The easiest method. The Puppet agent daemon does configuration runs
                        at a set interval, which can be configured.
Make a cron job that runs Puppet agent.
Requires more manual configuration, but a good choice if
                        you want to reduce the number of persistent processes on your systems.
Only run Puppet agent on
                        demand.
You can also deploy MCollective to run on demand on many nodes.


Choose whichever one works best for your infrastructure and
            culture.


Run Puppet agent as a service

The puppet agent command can start a long-lived daemon process that does
      configuration runs at a set interval.



Note: If you are running Puppet agent as a non-root user, use a cron job
               instead.




Start the service.

The best method is with Puppet
                  agentâ€™s init script / service configuration. When you install Puppet with packages, included is an init script or
                  service configuration for controlling Puppet agent,
                  usually with the service name puppet (for both open source and Puppet Enterprise).
In open source Puppet, enable
                  the service by running this
                  command:sudo puppet resource service puppet ensure=running enable=true

You can also run the sudo puppet agent command with no additional
                  options which causes the Puppet agent to start
                  running and daemonize, however you wonâ€™t have an interface for restarting or
                  stopping it. To stop the daemon, use the process ID from the agentâ€™s  
pidfile
:sudo kill $(puppet config print pidfile --section agent)




(Optional) Configure the run interval.

The Puppet agent service
                  defaults to doing a configuration run every 30 minutes. You can configure this
                  with the 
runinterval
 setting in  

puppet.conf

:# /etc/puppetlabs/puppet/puppet.conf
[agent]
  runinterval = 2h

If you donâ€™t need frequent configuration runs, a longer run interval lets your
                  primary Puppet server handle many more agent
                  nodes.





Run Puppet agent as a cron
        job

Run Puppet agent as a cron
        job when running as a non-root user. 
If the 
onetime
 setting is set to true, the Puppet agent
                command does one configuration run and then quits. If the daemonize setting is set
                    to false,
                the command stays in the foreground until the run is finished. If set
                    to true, it
                does the run in the background.
This behavior is good for
                building a cron job that does configuration runs. You can use the splay and splaylimit settings to keep the primaryPuppet server from getting overwhelmed, because the
                system time is probably synchronized across all of your agent nodes.

To set up a cron job, run the puppet resource
                    command:

sudo puppet resource cron puppet-agent ensure=present user=root minute=30 command='/opt/puppetlabs/bin/puppet agent --onetime --no-daemonize --splay --splaylimit 60'The
                        above example runs Puppet one time every
                        hour.  



Run Puppet agent on demand

Some sites prefer to run Puppet agent on-demand, and others use scheduled runs along
        with the occasional on-demand run.

You can start Puppet agent
                runs while logged in to the target system, or remotely with Bolt or MCollective.


Run Puppet agent on
                    one machine, using SSH to log into it:
ssh ops@magpie.example.com sudo puppet agent --test

Results
To run remotely
                on multiple machines, you need some form of orchestration or parallel
                execution tool, such as Bolt or MCollective
                with the puppet agent plugin.

Note: As of Puppet agent 5.5.4, MCollective is deprecated and will be removed in a future
                    version of Puppet agent. If you use open source
                        Puppet, migrate MCollective agents and filters using tools like Bolt and PuppetDBâ€™s Puppet Query Language.


Disable and re-enable Puppet
                runs

Whether youâ€™re troubleshooting errors, working in a
                maintenance window, or developing in a sandbox environment, you might need to
                temporarily disable the Puppet agent from
                running.


To disable the agent, run:
sudo puppet agent --disable "<MESSAGE>"


To enable the agent, run:
sudo puppet agent --enable




Configuring Puppet
                agent

The Puppet agent comes
                with a default configuration that you might want to change.
Configure Puppet agent with puppet.conf using the [agent] section, the [main] section, or both. For information on settings
                        relevant to Puppet agent, see important settings.
Logging for Puppet agent on *nix systems
When running as a service, Puppet agent
                                logs messages to syslog. Your syslog configuration determines where
                                these messages are saved, but the default location is /var/log/messages on Linux, and /var/log/system.log on Mac OS X.
You can adjust how verbose the logs are with the log_level setting, which defaults
                                        to notice.
When running in the foreground with the --verbose, --debug, or --test options, Puppet agent logs directly to the
                                terminal instead of to syslog.
When started with the --logdest
                                        <FILE> option, Puppet agent logs to the file
                                specified by <FILE>.

Reporting for Puppet agent on *nix systems
In addition to local logging, Puppet agent
                                submits a report to the primary Puppet server after each run.
                                This can be disabled by setting report =
                                        false in puppet.conf.)


 




          Was this page helpful?
        
Yes
No







              Donâ€™t fill this out if youâ€™re human: 






Thank you for your feedback!

            Feel free to add a comment or suggestion.
            





Send
Please enter your feedback





              Donâ€™t fill this out if youâ€™re human: 







            Weâ€™re sorry to hear that! 
            Please tell us why so we can help.
          

            Enter your feedback and email. This form is sent to the Puppet docs team.
            We ask for your email as we might contact you regarding your feedback.
          

            If you need help with the product itself, visit Puppet Support
            or ask in Puppet Community on Slack.
          

            Feedback:
            






            Email Address:
            






            To learn about how Puppet uses your personal information,
            visit our privacy policy.
          


Send
Please enter your feedback and contact email

          If you leave us your email, we may contact you regarding your feedback.
          For more information on how Puppet uses your personal information, see
          our
          privacy policy.
        





            Donâ€™t fill this out if youâ€™re human: 








    See an issue? Please file a JIRA ticket in our
    [DOCUMENTATION]
      project.
  











Puppet by Perforce gives IT operations teams back their time and offers peace of mind with infrastructure automation that enables security and compliance.






Legal
Privacy Policy
Terms of Use
Security


Â©  Puppet, Inc., a Perforce company. All rights reserved.




Puppet and other identified trademarks are the property of Puppet, Inc., Perforce Software, Inc., or an affiliate. Such trademarks are claimed and/or registered in the U.S. and other countries and regions. All third-party trademarks are the property of their respective holders. References to third-party trademarks do not imply endorsement or sponsorship of any products or services by the trademark holder. Contact Puppet, Inc., for further details.

