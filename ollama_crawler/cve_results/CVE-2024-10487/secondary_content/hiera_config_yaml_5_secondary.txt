Title: Configuring Hiera
URL: https://www.puppet.com/docs/puppet/7/hiera_config_yaml_5

Puppet.com
Forge
Education


                                    Try Puppet
                                


































        Docs
        






Products
Puppet Enterprise
Open Source Puppet
Bolt
Security Compliance Management
Continuous Delivery
Puppet Development Kit
Puppet DB
Puppet Plugin for VMware



        Support
        






Get
Technical Support Plans
Support Lifecycle Policy
New Puppet Enterprise Customer?



        Community
        






About Puppet
Company
Developer Experience
Community
Puppet Champions
Puppet Test Pilots
Community Calendar
Slack Channel







 









































PRODUCT AND VERSION


      Current product
      










      Current version
      








Puppet  7.34.0

Release notes

Puppet release notes
Puppet  7.34.0Security


Puppet known issues
Puppet Server release notes
Puppet Server known Issues
PuppetDB release notes (link)

Facter release notes
Facter 4.10.0
Facter 4.9.0
Facter 4.8.0
Facter 4.7.1
Facter 4.7.0
Facter 4.6.1
Facter 4.6.0
Facter 4.5.2


Facter known issues
What's new since Puppet 6?
Upgrading from Puppet 6 to Puppet 7

Experimental featuresMsgpack support

Archived documentation



Puppet overview
What is Puppet?
Why use Puppet desired state management?
Key concepts behind Puppet
The Puppet platform 
Puppet platform lifecycle 
Open source Puppet vs Puppet Enterprise (PE)
The Puppet ecosystem
Use cases
Glossary
Navigating the documentation



Set up Puppet

Install Puppet
System requirements
Installing Puppet  
Installing and configuring agents
Manually verify packages
Managing Platform versions



Configure Puppet settings
Puppet settings
Key configuration settings

Puppet's configuration files
puppet.conf: The main config file
environment.conf: Per-environment settings
fileserver.conf: Custom fileserver mount points
puppetdb.conf: PuppetDB server locations
autosign.conf: Basic certificate autosigning 
csr_attributes.yaml: Certificate extensions 
custom_trusted_oid_mapping.yaml: Short names for cert extension OIDs
device.conf: Network hardware access
routes.yaml: Advanced plugin routing


Adding file server mount points
Checking the values of settings
Editing settings on the command line
Configuration Reference



Upgrading
Upgrade Puppet Server

Upgrade agents
Upgrade agents using the puppet_agent module
Upgrade *nix agents
Upgrade Windows agents
Upgrade macOS agents


Upgrade PuppetDB



Environments
About environments
Creating environments
Environment isolation



Directories and files
Code and data directory (codedir)
Config directory (confdir)
Main manifest directory
The modulepath
SSL directory (ssldir)
Cache directory (vardir)


Report reference



Platform components

Puppet Server
About Puppet Server
Deprecated features
Server and agent compatibility
Installing Puppet Server

Configuring Puppet Server
Configuring Puppet Server

Puppet Server configuration files
auth.conf
ca.conf
global.conf
logback.xml
metrics.conf
product.conf
puppetserver.conf
web-routes.conf
webserver.conf


Migrating to the HOCON auth.conf format
Advanced logging configuration
Differing behavior in puppet.conf



Using and extending Puppet Server
Subcommands
Using Ruby gems
Intermediate CA
Infrastructure certificate revocation list (CRL)
External SSL termination

Server metrics
Monitoring Puppet Server metrics
HTTP Client Metrics


Tuning guide
Applying metrics to improve performance
Submitting usage telemetry
Scaling Puppet Server
Restarting Puppet Server"



Developer information
Developer debugging
Running from source
Tracing code events



Puppet Server HTTP API
Puppet Server HTTP API overview
PSON

Puppet v3 API
Catalog
Node
Facts
File Bucket File
File Content
File Metadata
Report



Puppet v4 APICatalog API


CA v1 API
Certificate
Certificate Request
Certificate Status
Certificate Revocation List
Expirations
Certificate Clean


Schemas (JSON)



API endpoints

Metrics API endpoints
v1 metrics
v2 (Jolokia) metrics



Status API endpoints
Services endpoint
Simple endpoint



Administrative API endpoints
Environment cache
JRuby pool



Server-specific Puppet API endpoints
Environment classes
Environment modules
Static file content





Certificate authority and SSL
Puppet Server CA commands
Intermediate CA
Autosigning certificate requests
CSR attributes and certificate extensions
Regenerating certificates in a Puppet deployment
External CA
External SSL termination





Facter  
Facter: CLI
Facter: Core Facts

Custom facts overviewEnvironment facts 

Writing custom facts
External facts
Configuring Facter with facter.conf


PuppetDB

Puppet services and tools
Puppet commands
Running Puppet commands on Windows  

primary Puppet serverAbout Puppet Server

Puppet agent on *nix systems
Puppet agent on Windows
Puppet apply
Puppet device



Puppet reports
Reporting
Report reference
Writing custom report processors
Report format



Life cycle of a Puppet run
Agent-server HTTPS communications
Catalog compilation
Static catalogs 





Using Puppet code
Classifying nodes
Managing environment content with a Puppetfile
Using content from Puppet Forge

Designing system configs (roles and profiles)
The roles and profiles method 
Roles and profiles example 
Designing advanced profiles 
Designing convenient roles 



Separating data (Hiera)
About Hiera  
Getting started with Hiera  
Configuring Hiera
Creating and editing data 
Looking up data with Hiera  
Writing new data backends 

Debugging Hiera
Unexpected values
Common errors


Upgrading to Hiera 5 



Use case examples
Manage NTP
Manage sudo 
Manage DNS
Manage firewall rules
Forge examples





Syntax and settings

The Puppet language
Puppet language overview
Puppet language syntax examples
The Puppet language style guide 
Files and paths on Windows  
Code comments 
Variables
Resources

Resource types
Resource Type Reference (Single-Page)
Built-in types
Optional resource types for Windows
Resource Type: exec
Using exec on Windows  
Resource Type: file
Using file on Windows
Resource Type: filebucket
Resource Type: group
Using user and group on Windows
Resource types overview
Resource Type: notify
Resource Type: package
Using package on Windows  
Resource Type: resources
Resource Type: schedule
Resource Type: service
Using service
Resource Type: stage
Resource Type: tidy
Resource Type: user


Relationships and ordering
Classes
Defined resource types
Bolt tasks
Expressions and operators
Conditional statements and expressions
Function calls
Built-in function reference
Node definitions

Facts and built-in variables
Accessing facts from Puppet code
Built-in variables


Reserved words and acceptable names

Custom resources

Develop types and providers with the Resource APIResource API reference


Low-level method for developing types and providers
Type development
Provider development
Creating resources





Custom functions
Custom functions overview 
Writing custom functions in the Puppet language

Writing custom functions in Ruby
Custom functions in Ruby overview
Ruby function signatures
Using special features in implementation methods
Iterative functions
Refactoring legacy 3.x functions



Deferring a function
Deferred functions overview
Using a template with Deferred values
Write a deferred function to store secrets
Integrations with secret stores





Values, data types, and aliases
Type aliases
Typecasting
Abstract data types
Arrays
Binary
Booleans
Data type syntax
Default
Error data type
Hashes
Numbers
Regular expressions
Resource and class references
Resource types
Sensitive
Strings
Time-related data types
Undef



Templates
Creating templates using Embedded Puppet
Creating templates using Embedded Ruby



Advanced constructs
Iteration and loops
Lambdas
Resource default statements
Resource collectors
Virtual resources
Exported resources
Tags
Run stages



Details of complex behaviors
Containment
Scope
Namespaces and autoloading


Securing sensitive data


Metaparameter reference
Configuration Reference
Built-in function reference

Puppet Man Pages

Core tools
Man Page: puppet agent
Man Page: puppet apply
Man Page: puppet module
Man Page: puppet resource
Man Page: puppet lookup



Occasionally useful
Man Page: puppet config
Man Page: puppet describe
Man Page: puppet device
Man Page: puppet doc
Man Page: puppet help
Man Page: puppet node
Man Page: puppet parser



Niche
Man Page: puppet catalog
Man Page: puppet facts
Man Page: puppet filebucket
Man Page: puppet report







Developing modules

Modules
Modules overview
Plug-ins in modules
Module cheat sheet
Installing and managing modules from the command line
Beginner's guide to writing modules
Module metadata
Documenting modules
Documenting modules with Puppet Strings  
Puppet Strings style guide

Publishing modulesUsing the Forge API

Contributing to Puppet modules


Puppet Development Kit (PDK)
Puppet VSCode extension

PowerShell DSC Resources
Converting DSC Resources
Distributing arbitrary DSC resources
Upgrading Puppet DSC modules 
Troubleshooting DSC Resources 


Ruby API for developing extensions


Configuring Hiera

The Hiera configuration
        file is called hiera.yaml.
        It configures the hierarchy for a given layer of data.

Related information
Hiera configuration layers
Hiera hierarchies


Location of hiera.yaml files 

There are several hiera.yaml files in a typical deployment. Hiera uses three layers of configuration, and the module and
        environment layers typically have multiple instances.
The
                configuration file locations for each layer:









Layer 
Location 
Example




Global 

$confdir/hiera.yaml


/etc/puppetlabs/puppet/hiera.yaml
C:\ProgramData\PuppetLabs\puppet\etc\hiera.yaml



Environment 

<ENVIRONMENT>/hiera.yaml


/etc/puppetlabs/code/environments/production/hiera.yaml
C:\ProgramData\PuppetLabs\code\environments\production\hiera.yaml



Module 

<MODULE>/hiera.yaml


/etc/puppetlabs/code/environments/production/modules/ntp/hiera.yaml
C:\ProgramData\PuppetLabs\code\environments\production\modules\ntp\hiera.yaml






Note: To change the location for the global
                    layer’s hiera.yaml set the hiera_config setting in your puppet.conf file.


Hiera searches for data in the following order:
                global → environment → module. For more information, see 
Hiera configuration layers.
Related topics: codedir, Environments, Modules fundamentals.


Config file syntax 

The hiera.yaml file is a YAML file, containing a hash with up to four top-level
    keys.
The following keys are in a hiera.yaml file:


version - Required.
        Must be the number 5, with no quotes.

defaults - A hash,
        which can set a default datadir, backend, and options for hierarchy levels.

hierarchy - An array
        of hashes, which configures the levels of the hierarchy.

default_hierarchy -
        An array of hashes, which sets a default hierarchy to be used only if the normal hierarchy
        entries do not result in a value. Only allowed in a module's hiera.yaml.


version: 5
defaults:  # Used for any hierarchy level that omits these keys.
  datadir: data         # This path is relative to hiera.yaml's directory.
  data_hash: yaml_data  # Use the built-in YAML backend.

hierarchy:
  - name: "Per-node data"                   # Human-readable name.
    path: "nodes/%{trusted.certname}.yaml"  # File path, relative to datadir.
                                   # ^^^ IMPORTANT: include the file extension!

  - name: "Per-datacenter business group data" # Uses custom facts.
    path: "location/%{facts.whereami}/%{facts.group}.yaml"

  - name: "Global business group data"
    path: "groups/%{facts.group}.yaml"

  - name: "Per-datacenter secret data (encrypted)"
    lookup_key: eyaml_lookup_key   # Uses non-default backend.
    path: "secrets/nodes/%{trusted.certname}.eyaml"
    options:
      pkcs7_private_key: /etc/puppetlabs/puppet/eyaml/private_key.pkcs7.pem
      pkcs7_public_key:  /etc/puppetlabs/puppet/eyaml/public_key.pkcs7.pem

  - name: "Per-OS defaults"
    path: "os/%{facts.os.family}.yaml"

  - name: "Common data"
    path: "common.yaml"

Note: When writing in Hiera YAML files, do not use hard tabs for
        indentation. 
The default configuration
If you omit the hierarchy or defaults keys, Hiera uses the following default
        values.version: 5
hierarchy:
  - name: Common
    path: common.yaml
defaults:
  data_hash: yaml_data
  datadir: dataThese defaults are only used if the file is present and specifies
          version: 5. If hiera.yaml is absent, it
        disables Hiera for that layer. If it specifies a different
        version, different defaults apply.

The defaults key
The defaults key sets default values for the
          lookup function and datadir keys, which lets you omit those keys in your hierarchy levels. The
        value of defaults must be a hash, which can have up to three keys: datadir, options, and one of the
        mutually exclusive lookup function keys.
datadir: a default value for datadir, used for any file-based hierarchy
        level that doesn't specify its own. If not given, the datadir is the
        directory data in the same directory as the hiera.yaml
        configuration file.
options: a default value for options, used for any
        hierarchy level that does not specify its own.
The lookup function keys: used for any hierarchy level that doesn't specify its own. This
        must be one of:


data_hash - produces a hash of key-value pairs (typically from a data
          file)

lookup_key - produces values key by key (typically for a custom data
          provider)

data_dig - produces values key by key (for a more advanced data
          provider)

hiera3_backend - a data provider that calls out to a legacy Hiera 3 backend (global layer only). 

For the built-in data providers — YAML, JSON, and HOCON — the key is always
          data_hash and the value is one of yaml_data,
          json_data, or hocon_data. To set a custom data provider
        as the default, see the data provider documentation. Whichever key you use, the value must
        be the name of the custom Puppet function that implements the
        lookup function.

The hierarchy key
The hierarchy key configures the levels of the hierarchy. The value of
          hierarchy must be an array of hashes.
Indent the hash's keys by four spaces, so they line up with the first key. Put an empty
        line between hashes, to visually distinguish them. For example:

hierarchy:
  - name: "Per-node data"
    path: "nodes/%{trusted.certname}.yaml"

  - name: "Per-datacenter business group data"
    path: "location/%{facts.whereami}/%{facts.group}.yaml"


The default_hierarchy key
The default_hierarchy key is a top-level key. It
        is initiated when, and only when, the lookup in the regular hierarchy does not
        find a value. Within this default hierarchy, the normal merging rules apply.
          The default_hierarchy is not permitted in environment
        or global layers.
If lookup_options is used, the values found in the regular
        hierarchy have no effect on the values found in the default_hierarchy, and vice versa. A merge parameter, given in a call to lookup,
        is only used in the regular hierarchy. It does not affect how a value in the default
        hierarchy is assembled. The only way to influence that, is to use lookup_options, found in the default hierarchy.
For more information about the YAML file, see YAML.



Related informationHiera hierarchies

Configuring a hierarchy level: built-in backends 

Hiera has three built-in backends: YAML,
        JSON, and HOCON. All of these use files as data sources.
You can use any combination of these
                backends in a hierarchy, and can also combine them with custom backends. But if most
                of your data is in one file format, set default values for the datadir and data_hash keys.
Each
                YAML/JSON/HOCON hierarchy level needs the following keys:


name — A
                    name for this level, shown in debug messages and --explain output.

path,
                        paths, glob, globs, or mapped_paths (choose one) — The data files to use for this
                    hierarchy level.
These paths are relative to the datadir, they support
                            variable interpolation, and they require a file extension. See
                            “Specifying file paths” for more details.

mapped_paths does not support glob
                            expansion.



data_hash —
                    Which backend to use. Can be omitted if you set a default. The value must be one
                    of the following:

yaml_data for YAML.

json_data for JSON.

hocon_data for HOCON.



datadir —
                    The directory where data files are kept. Can be omitted if you set a default.
This path is relative to hiera.yaml's directory: if the
                            config file is at /etc/puppetlabs/code/environments/production/hiera.yaml
                            and the datadir is set to data, the full path to the data
                            directory is /etc/puppetlabs/code/environments/production/data.
In the global layer, you can optionally set the
                                datadir to an absolute path; in the other layers, it must
                            always be relative.

datadir supports variable interpolation.



For more information on built-in backends, see YAML, JSON, HOCON.


Related informationInterpolate a Puppet variable

Specifying file paths 

Options for specifying a file path.









Key 
Data type 
Expected value





path

String 
One file path.



paths

Array 
Any number of file paths. This
                            acts like a sub-hierarchy: if multiple files exist, Hiera searches all of them, in the order
                            in which they're written.



glob

String 
One shell-like glob pattern,
                            which might match any number of files. If multiple files are found, Hiera searches all of them in
                            alphanumerical order.



globs

Array 
Any number of shell-like glob
                            patterns. If multiple files are found, Hiera searches all of them in
                            alphanumerical order (ignoring the order of the globs).



mapped_paths

Array or Hash 
A fact that is a collection
                            (array or hash) of values. Hiera expands
                            these values to produce an array of paths.





Note: You can only use one of these keys in a given
                hierarchy level.

Explicit file extensions are required, for example, common.yaml, not common.
File paths are relative to the datadir: if the full datadir is /etc/puppetlabs/code/environments/production/data and the file path is set
            to "nodes/%{trusted.certname}.yaml",
            the full path to the file is /etc/puppetlabs/code/environments/production/data/nodes/<NODE
                NAME>.yaml.


Note: Hierarchy levels should interpolate variables
                into the path.

Globs are implemented with Ruby's
                Dir.glob method:

One asterisk (*) matches a run of characters.
Two asterisks (**) matches any depth of nested directories.
A question mark (?) matches one character.
Comma-separated lists in curly braces ({one,two}) match any option in the list.
Sets of characters in square brackets ([abcd]) match any character in the set.
A backslash (\)
                escapes special characters.

Example:
- name: "Domain or network segment"
    glob: "network/**/{%{facts.networking.domain},%{facts.networking.interfaces.en0.bindings.0.network}}.yaml"
The mapped_paths key
            must contain three string elements, in the following order:

A scope variable that points to a collection of strings.
The variable name that is mapped to each element of the
                collection.
A template where that variable can be used in interpolation
                expressions.

For example, a fact named $services contains the array ["a",
                "b", "c"]. The following configuration has the same results as if paths had
            been specified to be [service/a/common.yaml,
                service/b/common.yaml, service/c/common.yaml].
- name: Example
    mapped_paths: [services, tmp, "service/%{tmp}/common.yaml"]


Related information
Interpolation
The hierarchy


Configuring a hierarchy level: hiera-eyaml



Hiera 5 ( Puppet 4.9.3 and later)
    includes a native interface for the Hiera eyaml extension, which
    keeps data encrypted on disk but lets Puppet read it during
    catalog compilation.
To learn how to create keys and edit
        encrypted files, see the Hiera eyaml
        documentation.
Within hiera.yaml, the eyaml backend resembles the standard built-in backends, with a
        few differences: it uses lookup_key instead
        of data_hash, and requires an options key to locate decryption keys. Note that
        the eyaml backend can read regular yaml files as well as yaml files with encrypted
        data.


Important: To use the eyaml backend, you must have the
            hiera-eyaml gem installed where Puppet can use it. It's included in Puppet Server since
          version 5.2.0, so you just need to make it available for command line usage. To enable
          eyaml on the command line and with puppet
            apply, use sudo
            /opt/puppetlabs/puppet/bin/gem install hiera-eyaml.Each eyaml hierarchy
        level needs the following keys:


name — A name for this level, shown in
          debug messages and --explain output.

lookup_key — Which backend to use. The
          value must be eyaml_lookup_key. Use this
          instead of the data_hash setting.

path, paths, mapped_paths, glob, or
            globs (choose one) — The data files to
          use for this hierarchy level. These paths are relative to the datadir, they support
          variable interpolation, and they require a file extension. In this case, you'll usually
          use .eyaml. They work the same way they
          do for the standard backends.

datadir — The directory where data files
          are kept. Can be omitted if you set a default. Works the same way it does for the standard
          backends.

options — A hash of options specific to
            hiera-eyaml, mostly used to configure
          decryption. For the default encryption method, this hash must have the following keys: 

pkcs7_private_key — The location of
              the PKCS7 private key to use. 

pkcs7_public_key — The location of
              the PKCS7 public key to use. 
If you use an alternate encryption plugin, search the plugin's
              docs for the encryption options. Set an encrypt_method option, plus some plugin-specific options to replace the
                pkcs7 ones. 
You can use normal strings as keys in this hash; you don't need
              to use symbols.



The file path key and the options key both support variable
        interpolation.
An example hierarchy
      level:
hierarchy:
  - name: "Per-datacenter secret data (encrypted)"
    lookup_key: eyaml_lookup_key
    path: "secrets/%{facts.whereami}.eyaml"
    options:
      pkcs7_private_key: /etc/puppetlabs/puppet/eyaml/private_key.pkcs7.pem
      pkcs7_public_key:  /etc/puppetlabs/puppet/eyaml/public_key.pkcs7.pem


Related informationInterpolation

Configuring a hierarchy level: legacy Hiera 3 backends 

If you rely on custom data backends designed for Hiera 3, you can use them in your global hierarchy. They are not
    supported at the environment or module layers.


Note: This feature is a temporary measure to let you start using new features while waiting for
          backend updates.Each legacy hierarchy level needs the following keys:


name — A name for
          this level, shown in debug messages and --explain output.

path or paths (choose one) — The data files to use for
          this hierarchy level.
For file-based backends, include the file extension, even though
              you would have omitted it in the v3 hiera.yaml file.
For non-file backends, don't use a file extension.



hiera3_backend —
          The legacy backend to use. This is the same name you'd use in the v3 config file's :backends key.

datadir — The
          directory where data files are kept. Set this only if your backend required a :datadir setting in its backend-specific
            options.
This path is relative to hiera.yaml's directory: if the config file is at /etc/puppetlabs/code/environments/production/hiera.yaml and the datadir is
              set to data, the full path to the
              data directory is /etc/puppetlabs/code/environments/production/data. Note that Hiera v3 uses 'hieradata' instead of 'data'.
In the global layer, you can optionally set the datadir to an absolute path.



options — A hash,
          with any backend-specific options (other than datadir) required by your backend. In the v3 config, this would have been in a
          top-level key named after the backend. You can use normal strings as keys. Hiera converts them to symbols for the backend.

The following example shows roughly equivalent v3 and v5 hiera.yaml files using legacy
        backends:# hiera.yaml v3
---
:backends:
  - mongodb
  - xml

:mongodb:
  :connections:
    :dbname: hdata
    :collection: config
    :host: localhost

:xml:
  :datadir: /some/other/dir

:hierarchy:
  - "%{trusted.certname}"
  - "common"


# hiera.yaml v5
---
version: 5
hierarchy:
  - name: MongoDB
    hiera3_backend: mongodb
    paths:
      - "%{trusted.certname}"
      - common
    options:
      connections:
        dbname: hdata
        collection: config
        host: localhost

  - name: Data in XML
    hiera3_backend: xml
    datadir: /some/other/dir
    paths:
      - "%{trusted.certname}.xml"
      - common.xml




Configuring a hierarchy level: general format 

Hiera supports custom
        backends.
Each hierarchy level is represented
                by a hash which needs the following keys:


name — A
                    name for this level, shown in debug messages and --explain output.
A backend key, which must be one of:
data_hash
lookup_key

data_dig — a more specialized form of lookup_key, suitable when the
                            backend is for a database. data_dig resolves dot separated keys, whereas lookup_key does not.

hiera3_backend (global layer only)


A path or URI key — only if required by the backend. These
                    keys support variable interpolation. The following path/URI keys are
                        available:
path
paths
mapped_paths
glob
globs
uri

uris - these paths or URIs work the same way they do for
                            the built-in backends. Hiera handles the
                            work of locating files, so any backend that supports path automatically supports paths, glob, and globs. uri (string) and uris (array) can represent any kind of data source. Hiera does not ensure URIs are resolvable
                            before calling the backend, and does not need to understand any given
                            URI schema. A backend can omit the path/URI key, and rely wholly on the
                                options key to
                            locate its data.



datadir —
                    The directory where data files are kept: the path is relative to hiera.yaml's
                    directory. Only required if the backend uses the path(s) and glob(s) keys, and can be omitted if you set a default.

options — A
                    hash of extra options for the backend; for example, database credentials or the
                    location of a decryption key. All values in the options hash support variable interpolation.

Whichever key you use, the value must be the name of a
                function that implements the backend API. Note that the choice here is made by the
                implementer of the particular backend, not the user.
For
                more information, see custom Puppet function.


Related information
Custom backends overview
Interpolation

 




          Was this page helpful?
        
Yes
No







              Don’t fill this out if you’re human: 






Thank you for your feedback!

            Feel free to add a comment or suggestion.
            





Send
Please enter your feedback





              Don’t fill this out if you’re human: 







            We’re sorry to hear that! 
            Please tell us why so we can help.
          

            Enter your feedback and email. This form is sent to the Puppet docs team.
            We ask for your email as we might contact you regarding your feedback.
          

            If you need help with the product itself, visit Puppet Support
            or ask in Puppet Community on Slack.
          

            Feedback:
            






            Email Address:
            






            To learn about how Puppet uses your personal information,
            visit our privacy policy.
          


Send
Please enter your feedback and contact email

          If you leave us your email, we may contact you regarding your feedback.
          For more information on how Puppet uses your personal information, see
          our
          privacy policy.
        





            Don’t fill this out if you’re human: 








    See an issue? Please file a JIRA ticket in our
    [DOCUMENTATION]
      project.
  











Puppet by Perforce gives IT operations teams back their time and offers peace of mind with infrastructure automation that enables security and compliance.






Legal
Privacy Policy
Terms of Use
Security


©  Puppet, Inc., a Perforce company. All rights reserved.




Puppet and other identified trademarks are the property of Puppet, Inc., Perforce Software, Inc., or an affiliate. Such trademarks are claimed and/or registered in the U.S. and other countries and regions. All third-party trademarks are the property of their respective holders. References to third-party trademarks do not imply endorsement or sponsorship of any products or services by the trademark holder. Contact Puppet, Inc., for further details.

