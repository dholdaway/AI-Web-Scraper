Title: Catalog compilation
URL: https://www.puppet.com/docs/puppet/7/subsystem_catalog_compilation

Puppet.com
Forge
Education


                                    Try Puppet
                                


































        Docs
        






Products
Puppet Enterprise
Open Source Puppet
Bolt
Security Compliance Management
Continuous Delivery
Puppet Development Kit
Puppet DB
Puppet Plugin for VMware



        Support
        






Get
Technical Support Plans
Support Lifecycle Policy
New Puppet Enterprise Customer?



        Community
        






About Puppet
Company
Developer Experience
Community
Puppet Champions
Puppet Test Pilots
Community Calendar
Slack Channel







 









































PRODUCT AND VERSION


      Current product
      










      Current version
      








Puppet  7.34.0

Release notes

Puppet release notes
Puppet  7.34.0Security


Puppet known issues
Puppet Server release notes
Puppet Server known Issues
PuppetDB release notes (link)

Facter release notes
Facter 4.10.0
Facter 4.9.0
Facter 4.8.0
Facter 4.7.1
Facter 4.7.0
Facter 4.6.1
Facter 4.6.0
Facter 4.5.2


Facter known issues
What's new since Puppet 6?
Upgrading from Puppet 6 to Puppet 7

Experimental featuresMsgpack support

Archived documentation



Puppet overview
What is Puppet?
Why use Puppet desired state management?
Key concepts behind Puppet
The Puppet platform 
Puppet platform lifecycle 
Open source Puppet vs Puppet Enterprise (PE)
The Puppet ecosystem
Use cases
Glossary
Navigating the documentation



Set up Puppet

Install Puppet
System requirements
Installing Puppet  
Installing and configuring agents
Manually verify packages
Managing Platform versions



Configure Puppet settings
Puppet settings
Key configuration settings

Puppet's configuration files
puppet.conf: The main config file
environment.conf: Per-environment settings
fileserver.conf: Custom fileserver mount points
puppetdb.conf: PuppetDB server locations
autosign.conf: Basic certificate autosigning 
csr_attributes.yaml: Certificate extensions 
custom_trusted_oid_mapping.yaml: Short names for cert extension OIDs
device.conf: Network hardware access
routes.yaml: Advanced plugin routing


Adding file server mount points
Checking the values of settings
Editing settings on the command line
Configuration Reference



Upgrading
Upgrade Puppet Server

Upgrade agents
Upgrade agents using the puppet_agent module
Upgrade *nix agents
Upgrade Windows agents
Upgrade macOS agents


Upgrade PuppetDB



Environments
About environments
Creating environments
Environment isolation



Directories and files
Code and data directory (codedir)
Config directory (confdir)
Main manifest directory
The modulepath
SSL directory (ssldir)
Cache directory (vardir)


Report reference



Platform components

Puppet Server
About Puppet Server
Deprecated features
Server and agent compatibility
Installing Puppet Server

Configuring Puppet Server
Configuring Puppet Server

Puppet Server configuration files
auth.conf
ca.conf
global.conf
logback.xml
metrics.conf
product.conf
puppetserver.conf
web-routes.conf
webserver.conf


Migrating to the HOCON auth.conf format
Advanced logging configuration
Differing behavior in puppet.conf



Using and extending Puppet Server
Subcommands
Using Ruby gems
Intermediate CA
Infrastructure certificate revocation list (CRL)
External SSL termination

Server metrics
Monitoring Puppet Server metrics
HTTP Client Metrics


Tuning guide
Applying metrics to improve performance
Submitting usage telemetry
Scaling Puppet Server
Restarting Puppet Server"



Developer information
Developer debugging
Running from source
Tracing code events



Puppet Server HTTP API
Puppet Server HTTP API overview
PSON

Puppet v3 API
Catalog
Node
Facts
File Bucket File
File Content
File Metadata
Report



Puppet v4 APICatalog API


CA v1 API
Certificate
Certificate Request
Certificate Status
Certificate Revocation List
Expirations
Certificate Clean


Schemas (JSON)



API endpoints

Metrics API endpoints
v1 metrics
v2 (Jolokia) metrics



Status API endpoints
Services endpoint
Simple endpoint



Administrative API endpoints
Environment cache
JRuby pool



Server-specific Puppet API endpoints
Environment classes
Environment modules
Static file content





Certificate authority and SSL
Puppet Server CA commands
Intermediate CA
Autosigning certificate requests
CSR attributes and certificate extensions
Regenerating certificates in a Puppet deployment
External CA
External SSL termination





Facter  
Facter: CLI
Facter: Core Facts

Custom facts overviewEnvironment facts 

Writing custom facts
External facts
Configuring Facter with facter.conf


PuppetDB

Puppet services and tools
Puppet commands
Running Puppet commands on Windows  

primary Puppet serverAbout Puppet Server

Puppet agent on *nix systems
Puppet agent on Windows
Puppet apply
Puppet device



Puppet reports
Reporting
Report reference
Writing custom report processors
Report format



Life cycle of a Puppet run
Agent-server HTTPS communications
Catalog compilation
Static catalogs 





Using Puppet code
Classifying nodes
Managing environment content with a Puppetfile
Using content from Puppet Forge

Designing system configs (roles and profiles)
The roles and profiles method 
Roles and profiles example 
Designing advanced profiles 
Designing convenient roles 



Separating data (Hiera)
About Hiera  
Getting started with Hiera  
Configuring Hiera
Creating and editing data 
Looking up data with Hiera  
Writing new data backends 

Debugging Hiera
Unexpected values
Common errors


Upgrading to Hiera 5 



Use case examples
Manage NTP
Manage sudo 
Manage DNS
Manage firewall rules
Forge examples





Syntax and settings

The Puppet language
Puppet language overview
Puppet language syntax examples
The Puppet language style guide 
Files and paths on Windows  
Code comments 
Variables
Resources

Resource types
Resource Type Reference (Single-Page)
Built-in types
Optional resource types for Windows
Resource Type: exec
Using exec on Windows  
Resource Type: file
Using file on Windows
Resource Type: filebucket
Resource Type: group
Using user and group on Windows
Resource types overview
Resource Type: notify
Resource Type: package
Using package on Windows  
Resource Type: resources
Resource Type: schedule
Resource Type: service
Using service
Resource Type: stage
Resource Type: tidy
Resource Type: user


Relationships and ordering
Classes
Defined resource types
Bolt tasks
Expressions and operators
Conditional statements and expressions
Function calls
Built-in function reference
Node definitions

Facts and built-in variables
Accessing facts from Puppet code
Built-in variables


Reserved words and acceptable names

Custom resources

Develop types and providers with the Resource APIResource API reference


Low-level method for developing types and providers
Type development
Provider development
Creating resources





Custom functions
Custom functions overview 
Writing custom functions in the Puppet language

Writing custom functions in Ruby
Custom functions in Ruby overview
Ruby function signatures
Using special features in implementation methods
Iterative functions
Refactoring legacy 3.x functions



Deferring a function
Deferred functions overview
Using a template with Deferred values
Write a deferred function to store secrets
Integrations with secret stores





Values, data types, and aliases
Type aliases
Typecasting
Abstract data types
Arrays
Binary
Booleans
Data type syntax
Default
Error data type
Hashes
Numbers
Regular expressions
Resource and class references
Resource types
Sensitive
Strings
Time-related data types
Undef



Templates
Creating templates using Embedded Puppet
Creating templates using Embedded Ruby



Advanced constructs
Iteration and loops
Lambdas
Resource default statements
Resource collectors
Virtual resources
Exported resources
Tags
Run stages



Details of complex behaviors
Containment
Scope
Namespaces and autoloading


Securing sensitive data


Metaparameter reference
Configuration Reference
Built-in function reference

Puppet Man Pages

Core tools
Man Page: puppet agent
Man Page: puppet apply
Man Page: puppet module
Man Page: puppet resource
Man Page: puppet lookup



Occasionally useful
Man Page: puppet config
Man Page: puppet describe
Man Page: puppet device
Man Page: puppet doc
Man Page: puppet help
Man Page: puppet node
Man Page: puppet parser



Niche
Man Page: puppet catalog
Man Page: puppet facts
Man Page: puppet filebucket
Man Page: puppet report







Developing modules

Modules
Modules overview
Plug-ins in modules
Module cheat sheet
Installing and managing modules from the command line
Beginner's guide to writing modules
Module metadata
Documenting modules
Documenting modules with Puppet Strings  
Puppet Strings style guide

Publishing modulesUsing the Forge API

Contributing to Puppet modules


Puppet Development Kit (PDK)
Puppet VSCode extension

PowerShell DSC Resources
Converting DSC Resources
Distributing arbitrary DSC resources
Upgrading Puppet DSC modules 
Troubleshooting DSC Resources 


Ruby API for developing extensions


Catalog compilation

When configuring a node, the agent uses a document called
        a catalog, which it downloads from the primary server. For each resource under management, the
        catalog describes its desired state and can specify ordered dependency
        information.

Puppet manifests are concise because they can express
            variation between nodes with conditional logic, templates, and functions. Puppet resolves these on the primary server and gives the agent a
            specific catalog.
This allows Puppet to:


Separate privileges, because each node receives only its own
                    resources.
Reduce the agentâ€™s CPU and memory consumption.
Simulate changes by running the agent in no-op mode,
                    checking the agent's current state and reporting what would have changed without
                    making any changes.
Query PuppetDB for
                    information about managed resources on any node.




Note: The puppet apply command compiles the catalog on its own node and then
                applies it, so it plays the role of both primary server and agent. To compile a catalog on
                the primary server for testing, run puppet catalog
                    compile on the puppetserver with access to your environments, modules, manifests, and
                    Hiera data.For more information about PuppetDB queries, see 
PuppetDB API.

Puppet compiles a catalog using three sources of
            configuration information: 

Agent-provided data


External data


Manifests and modules, including associated templates and file sources

These sources are used by both agent-server deployments and by stand-alone puppet apply nodes. 
Agent-provided data
When an agent requests a catalog, it sends four pieces of information to the primary
                server:


The node's name, which is almost always the same as the node's certname
                        and is embedded in the request URL. For example, /puppet/v3/catalog/web01.example.com?environment=production.

The node's certificate, which contains its certname and sometimes
                            additional information that can be used for policy-based autosigning and
                            adding new trusted facts. This is the one item not used by puppet apply.


The node's facts.

The node's requested environment, which is embedded in the request URL.
                        For example, /puppet/v3/catalog/web01.example.com?environment=production.
                        Before requesting a catalog, the agent requests its environment from the
                        primary server. If the primary server doesn't provide an environment, the
                        environment information in the agent's config file is used.


For more information about additional data in certs see SSL
                    configuration: CSR attributes and certificate extensions


External data

Puppet uses two main kinds of external data during
                catalog compilation: 


Data from an external node classifier (ENC) or other node terminus, which is
                        available before compilation starts. This data is in the form of a node
                        object and can contain any of the following: 
Classes
Class configuration parameters
Top-scope variables for the node
Environment information, which overrides the environment information
                                in the agent's configuration 


Data from other sources, which can be invoked by the main manifest or by
                        classes or defined types in modules. This kind of data includes: 
Exported resources queried from PuppetDB. 
The results of functions, which can access data sources including
                                    Hiera or an external
                                configuration management database.




For more information about ENCs, see Writing
                    external node classifiers


Manifests and modules
Manifests and modules are at the center of a Puppet
                deployment, including the main manifest, modules downloaded from the 
Forge
, and modules written specifically for your site. 
For more information about manifests and modules, see The main manifest
                    directory and Module fundamentals.

The catalog compilation process 
This simplified description doesnâ€™t delve into the internals of the parser, model,
                and the evaluator. Some items are presented out of order for the sake of clarity.
                This process begins after the catalog request has been received. 


Note: For practical purposes, treat puppet apply nodes
                    as a combined agent and primary server.




Retrieve the node object. 
After the primary server has received the agent-provided
                                    information for this request, it asks its configured node
                                    terminus for a node object. 
By default, the primary server uses the plain node terminus, which returns a blank node
                                    object. In this case, only manifests and agent-provided
                                    information are used in compilation. 
The next most common node terminus is the exec node terminus, which requests data from an
                                    ENC. This can return classes, variables, an environment, or a
                                    combination of the three, depending on how the ENC is designed. 
You can also write a custom node terminus that retrieves
                                    classes, variables, and environments from an external
                                    system.




Set variables from the node object, from facts, and from the certificate. 
All of these variables are available for use by any manifest or
                                    template during subsequent stages of compilation. 
The nodeâ€™s facts are set as top-scope variables.
The nodeâ€™s facts are set in the protected $facts hash, and certain data from the nodeâ€™s
                                    certificate is set in the protected $trusted hash. 
Any variables provided by the primary server are set. 




Evaluate the main manifest. 

Puppet parses the main manifest.
                                    The nodeâ€™s environment can specify a main manifest; if it
                                    doesnâ€™t, the primary server uses the main manifest from the
                                    agent's config file. 
If there are node definitions in the manifest, Puppet must find one that matches
                                    the nodeâ€™s name. If at least one node definition is present and
                                        Puppet cannot find a match,
                                    it fails compilation. 
Code outside of node definitions is evaluated. Resources in the
                                    code are added to the are added to the node's catalog, and any
                                    classes declared in the code are loaded and declared.
Note: Classes are usually classes are defined in
                                        modules, although the main manifest can also contain class
                                        definitions.

If a matching node definition is found, the code in it is
                                    evaluated at node scope, overriding any top-scope variables.
                                    Resources in the code are added to the are added to the node's
                                    catalog, and any classes declared in the code are loaded and
                                    declared.




Load and evaluate classes from modules 

If classes were declared in the main manifest and their
                                        definitions were not present, Puppet loads the manifests
                                        containing them from its collection of modules. It follows
                                        the normal manifest naming conventions to find the files it
                                        should load. The set of locations Puppet loads modules from is
                                        called the modulepath. The primary server serves each
                                        environment with its own modulepath. When a class is loaded,
                                        the Puppet code in it is
                                        evaluated, and any resources in it are added to the catalog.
                                        If it was declared at node scope, it has access to
                                        node-scope variables; otherwise, it has access to only
                                        top-scope variables. Classes can also declare other classes;
                                        if they do, Puppet loads and
                                        evaluates those in the same way. 





Evaluate classes from the node object 


Puppet loads from modules and
                                        evaluate any classes that were specified by the node object.
                                        Resources from those classes are added to the catalog. If a
                                        matching node definition was found when the main manifest
                                        was evaluated, these classes are evaluated at node scope,
                                        which means that they can access any node-scope variables
                                        set by the main manifest. If no node definitions were
                                        present in the main manifest, they are evaluated at top
                                        scope. 









Related information
Classifying nodes
Scope
Node definitions
The modulepath
Exported resources

 




          Was this page helpful?
        
Yes
No







              Donâ€™t fill this out if youâ€™re human: 






Thank you for your feedback!

            Feel free to add a comment or suggestion.
            





Send
Please enter your feedback





              Donâ€™t fill this out if youâ€™re human: 







            Weâ€™re sorry to hear that! 
            Please tell us why so we can help.
          

            Enter your feedback and email. This form is sent to the Puppet docs team.
            We ask for your email as we might contact you regarding your feedback.
          

            If you need help with the product itself, visit Puppet Support
            or ask in Puppet Community on Slack.
          

            Feedback:
            






            Email Address:
            






            To learn about how Puppet uses your personal information,
            visit our privacy policy.
          


Send
Please enter your feedback and contact email

          If you leave us your email, we may contact you regarding your feedback.
          For more information on how Puppet uses your personal information, see
          our
          privacy policy.
        





            Donâ€™t fill this out if youâ€™re human: 








    See an issue? Please file a JIRA ticket in our
    [DOCUMENTATION]
      project.
  











Puppet by Perforce gives IT operations teams back their time and offers peace of mind with infrastructure automation that enables security and compliance.






Legal
Privacy Policy
Terms of Use
Security


Â©  Puppet, Inc., a Perforce company. All rights reserved.




Puppet and other identified trademarks are the property of Puppet, Inc., Perforce Software, Inc., or an affiliate. Such trademarks are claimed and/or registered in the U.S. and other countries and regions. All third-party trademarks are the property of their respective holders. References to third-party trademarks do not imply endorsement or sponsorship of any products or services by the trademark holder. Contact Puppet, Inc., for further details.

