Title: Conditional statements and expressions
URL: https://www.puppet.com/docs/puppet/7/lang_conditional

Puppet.com
Forge
Education


                                    Try Puppet
                                


































        Docs
        






Products
Puppet Enterprise
Open Source Puppet
Bolt
Security Compliance Management
Continuous Delivery
Puppet Development Kit
Puppet DB
Puppet Plugin for VMware



        Support
        






Get
Technical Support Plans
Support Lifecycle Policy
New Puppet Enterprise Customer?



        Community
        






About Puppet
Company
Developer Experience
Community
Puppet Champions
Puppet Test Pilots
Community Calendar
Slack Channel







 









































PRODUCT AND VERSION


      Current product
      










      Current version
      








Puppet  7.34.0

Release notes

Puppet release notes
Puppet  7.34.0Security


Puppet known issues
Puppet Server release notes
Puppet Server known Issues
PuppetDB release notes (link)

Facter release notes
Facter 4.10.0
Facter 4.9.0
Facter 4.8.0
Facter 4.7.1
Facter 4.7.0
Facter 4.6.1
Facter 4.6.0
Facter 4.5.2


Facter known issues
What's new since Puppet 6?
Upgrading from Puppet 6 to Puppet 7

Experimental featuresMsgpack support

Archived documentation



Puppet overview
What is Puppet?
Why use Puppet desired state management?
Key concepts behind Puppet
The Puppet platform 
Puppet platform lifecycle 
Open source Puppet vs Puppet Enterprise (PE)
The Puppet ecosystem
Use cases
Glossary
Navigating the documentation



Set up Puppet

Install Puppet
System requirements
Installing Puppet  
Installing and configuring agents
Manually verify packages
Managing Platform versions



Configure Puppet settings
Puppet settings
Key configuration settings

Puppet's configuration files
puppet.conf: The main config file
environment.conf: Per-environment settings
fileserver.conf: Custom fileserver mount points
puppetdb.conf: PuppetDB server locations
autosign.conf: Basic certificate autosigning 
csr_attributes.yaml: Certificate extensions 
custom_trusted_oid_mapping.yaml: Short names for cert extension OIDs
device.conf: Network hardware access
routes.yaml: Advanced plugin routing


Adding file server mount points
Checking the values of settings
Editing settings on the command line
Configuration Reference



Upgrading
Upgrade Puppet Server

Upgrade agents
Upgrade agents using the puppet_agent module
Upgrade *nix agents
Upgrade Windows agents
Upgrade macOS agents


Upgrade PuppetDB



Environments
About environments
Creating environments
Environment isolation



Directories and files
Code and data directory (codedir)
Config directory (confdir)
Main manifest directory
The modulepath
SSL directory (ssldir)
Cache directory (vardir)


Report reference



Platform components

Puppet Server
About Puppet Server
Deprecated features
Server and agent compatibility
Installing Puppet Server

Configuring Puppet Server
Configuring Puppet Server

Puppet Server configuration files
auth.conf
ca.conf
global.conf
logback.xml
metrics.conf
product.conf
puppetserver.conf
web-routes.conf
webserver.conf


Migrating to the HOCON auth.conf format
Advanced logging configuration
Differing behavior in puppet.conf



Using and extending Puppet Server
Subcommands
Using Ruby gems
Intermediate CA
Infrastructure certificate revocation list (CRL)
External SSL termination

Server metrics
Monitoring Puppet Server metrics
HTTP Client Metrics


Tuning guide
Applying metrics to improve performance
Submitting usage telemetry
Scaling Puppet Server
Restarting Puppet Server"



Developer information
Developer debugging
Running from source
Tracing code events



Puppet Server HTTP API
Puppet Server HTTP API overview
PSON

Puppet v3 API
Catalog
Node
Facts
File Bucket File
File Content
File Metadata
Report



Puppet v4 APICatalog API


CA v1 API
Certificate
Certificate Request
Certificate Status
Certificate Revocation List
Expirations
Certificate Clean


Schemas (JSON)



API endpoints

Metrics API endpoints
v1 metrics
v2 (Jolokia) metrics



Status API endpoints
Services endpoint
Simple endpoint



Administrative API endpoints
Environment cache
JRuby pool



Server-specific Puppet API endpoints
Environment classes
Environment modules
Static file content





Certificate authority and SSL
Puppet Server CA commands
Intermediate CA
Autosigning certificate requests
CSR attributes and certificate extensions
Regenerating certificates in a Puppet deployment
External CA
External SSL termination





Facter  
Facter: CLI
Facter: Core Facts

Custom facts overviewEnvironment facts 

Writing custom facts
External facts
Configuring Facter with facter.conf


PuppetDB

Puppet services and tools
Puppet commands
Running Puppet commands on Windows  

primary Puppet serverAbout Puppet Server

Puppet agent on *nix systems
Puppet agent on Windows
Puppet apply
Puppet device



Puppet reports
Reporting
Report reference
Writing custom report processors
Report format



Life cycle of a Puppet run
Agent-server HTTPS communications
Catalog compilation
Static catalogs 





Using Puppet code
Classifying nodes
Managing environment content with a Puppetfile
Using content from Puppet Forge

Designing system configs (roles and profiles)
The roles and profiles method 
Roles and profiles example 
Designing advanced profiles 
Designing convenient roles 



Separating data (Hiera)
About Hiera  
Getting started with Hiera  
Configuring Hiera
Creating and editing data 
Looking up data with Hiera  
Writing new data backends 

Debugging Hiera
Unexpected values
Common errors


Upgrading to Hiera 5 



Use case examples
Manage NTP
Manage sudo 
Manage DNS
Manage firewall rules
Forge examples





Syntax and settings

The Puppet language
Puppet language overview
Puppet language syntax examples
The Puppet language style guide 
Files and paths on Windows  
Code comments 
Variables
Resources

Resource types
Resource Type Reference (Single-Page)
Built-in types
Optional resource types for Windows
Resource Type: exec
Using exec on Windows  
Resource Type: file
Using file on Windows
Resource Type: filebucket
Resource Type: group
Using user and group on Windows
Resource types overview
Resource Type: notify
Resource Type: package
Using package on Windows  
Resource Type: resources
Resource Type: schedule
Resource Type: service
Using service
Resource Type: stage
Resource Type: tidy
Resource Type: user


Relationships and ordering
Classes
Defined resource types
Bolt tasks
Expressions and operators
Conditional statements and expressions
Function calls
Built-in function reference
Node definitions

Facts and built-in variables
Accessing facts from Puppet code
Built-in variables


Reserved words and acceptable names

Custom resources

Develop types and providers with the Resource APIResource API reference


Low-level method for developing types and providers
Type development
Provider development
Creating resources





Custom functions
Custom functions overview 
Writing custom functions in the Puppet language

Writing custom functions in Ruby
Custom functions in Ruby overview
Ruby function signatures
Using special features in implementation methods
Iterative functions
Refactoring legacy 3.x functions



Deferring a function
Deferred functions overview
Using a template with Deferred values
Write a deferred function to store secrets
Integrations with secret stores





Values, data types, and aliases
Type aliases
Typecasting
Abstract data types
Arrays
Binary
Booleans
Data type syntax
Default
Error data type
Hashes
Numbers
Regular expressions
Resource and class references
Resource types
Sensitive
Strings
Time-related data types
Undef



Templates
Creating templates using Embedded Puppet
Creating templates using Embedded Ruby



Advanced constructs
Iteration and loops
Lambdas
Resource default statements
Resource collectors
Virtual resources
Exported resources
Tags
Run stages



Details of complex behaviors
Containment
Scope
Namespaces and autoloading


Securing sensitive data


Metaparameter reference
Configuration Reference
Built-in function reference

Puppet Man Pages

Core tools
Man Page: puppet agent
Man Page: puppet apply
Man Page: puppet module
Man Page: puppet resource
Man Page: puppet lookup



Occasionally useful
Man Page: puppet config
Man Page: puppet describe
Man Page: puppet device
Man Page: puppet doc
Man Page: puppet help
Man Page: puppet node
Man Page: puppet parser



Niche
Man Page: puppet catalog
Man Page: puppet facts
Man Page: puppet filebucket
Man Page: puppet report







Developing modules

Modules
Modules overview
Plug-ins in modules
Module cheat sheet
Installing and managing modules from the command line
Beginner's guide to writing modules
Module metadata
Documenting modules
Documenting modules with Puppet Strings  
Puppet Strings style guide

Publishing modulesUsing the Forge API

Contributing to Puppet modules


Puppet Development Kit (PDK)
Puppet VSCode extension

PowerShell DSC Resources
Converting DSC Resources
Distributing arbitrary DSC resources
Upgrading Puppet DSC modules 
Troubleshooting DSC Resources 


Ruby API for developing extensions


Conditional statements and expressions

Conditional statements let your Puppet code behave
    differently in different situations. They are most helpful when combined with facts or with data
    retrieved from an external source. Puppet supports
      if and unless statements, case statements, and
      selectors. 
Examples
An if statement evaluates the given
        condition and, if the condition resolves to true, executes the given code.
        This example includes an elsif condition, and gives a warning if you try to
        include the ntp class on a virtual machine or on machine running macOS:if $facts['is_virtual'] {
  warning('Tried to include class ntp on virtual machine; this node might be misclassified.')
} elsif $facts['os']['family'] == 'Darwin' {
  warning('This NTP module does not yet work on our Mac laptops.')
} else {
  include ntp
}

An
          unless statement takes a Boolean condition and an arbitrary block of Puppet code, evaluates the condition, and if the condition is
        false, execute the code block. This statement sets $maxclient to 500 unless
        the system memory is above the specified
        parameter.unless $facts['memory']['system']['totalbytes'] > 1073741824 {
  $maxclient = 500
}

A case statement evaluates a list of cases against a control expression, and executes the first
        code block where the case value matches the control expression. This example declares a role
        class on a node, but which role class it declares depends on what operating system the node
        runs:case $facts['os']['name'] {
    'RedHat', 'CentOS':  {
         include role::redhat
    }
    /^(Debian|Ubuntu)$/:  {
         include role::debian  
    }
    default:  {
         include role::generic 
    }
}

A selector statement is similar to a case statement, but instead of executing code, it returns a
        value. This example returns the value 'wheel' for the specified operating systems, but the
        value 'root' for all other operating
        systems:$rootgroup = $facts['os']['family'] ? {
  'RedHat'                     => 'wheel',
  /(Debian|Ubuntu)/  => 'wheel',
  default                      => 'root',
}

file { '/etc/passwd':
  ensure => file,
  owner  => 'root',
  group  => $rootgroup,
}




if
        statements

An  "if" statement
        takes a Boolean condition and an arbitrary block of Puppet
        code, and executes the code block only if the condition is true. Optionally, an if statement can include elsif and else clauses. 
Behavior
Puppet's if statements behave much
                like those in any other language. The if condition
                is evaluated first and, if it is true, the if code
                block is executed. If it is false, each elsif
                condition (if present) is tested in order, and if all conditions fail, the else code block (if present) is executed. If none of the
                conditions in the statement match and there is no else block, Puppet does nothing and
                moves on. If statements executes a maximum of one code block.
In addition to executing the code in a block, an if
                statement also produces a value, so the if statement
                can be used wherever a value is allowed.The value of an if expression is the value of the last expression in the executed
                block, or undef if no block was executed.

Syntax
An if statement consists of: 

The if keyword.


A condition (any expression resolving to a Boolean value).


A pair of curly braces containing any Puppet code.


Optionally: any number of elsif clauses,
                            which are processed in order.


Optionally: the else keyword and a pair
                            of curly braces containing Puppet
                            code.

An elsif clause consists of: 

 The elsif keyword.


A condition.


A pair of curly braces containing any Puppet code.




if $facts['is_virtual'] {
  # Our NTP module is not supported on virtual machines:
  warning('Tried to include class ntp on virtual machine; this node might be misclassified.')
} elsif $facts['os']['name'] == 'Darwin' {
  warning('This NTP module does not yet work on our Mac laptops.')
} else {
  # Normal node, include the class.
  include ntp
}


Conditions
The condition of an if statement can be any expression that resolves
                to a Boolean value. This includes:



Variables




Expressions, including arbitrarily
                        nested and and or expressions 



Functions that return values 


Expressions that resolve to non-Boolean values are automatically converted to
                Booleans. For more information, see the Booleans
                    documentation. 

Regex capture variables
If you use the regular expression match operator in a condition, any captures from
                parentheses in the pattern are available inside the associated code block as
                numbered variables (for example, $1, $2), and the entire match is available as $0. This example captures any digits from a hostname
                such as www01 and www02, and stores them in the $1
                variable: if $trusted['certname'] =~ /^www(\d+)\./ {
  notice("Welcome to web server number $1.")
}

Regex capture variables are different from other variables in a couple of ways: 


The values of the numbered variables do not persist outside the code block
                        associated with the pattern that set them.


In nested conditionals, each conditional has its own set of values for the
                        set of numbered variables. At the end of an interior statement, the numbered
                        variables are reset to their previous values for the remainder of the
                        outside statement. This causes conditional statements to act like local
                        scopes, but only with regard to the numbered variables.





Related information
Scope
Booleans



unless
    statements

"Unless" statements work
    like reversed if statements. They take a
    Boolean condition and an arbitrary block of Puppet code, evaluate
    the condition, and if it is false, execute the code block. They cannot include elsif clauses. 

Behavior
The condition is evaluated first and, if it is false, the code block is executed.
        If the condition is true, Puppet does nothing and moves
        on.
In addition to executing the code in a block, an unless statement is also an
        expression that produces a value, and it can be used wherever a value is allowed. The value
        of an unless expression is
        the value of the last expression in the executed block. If no block was executed, the value
        is undef.

Syntax
The general form of an unless statement is:

The unless keyword.


A condition (any expression resolving to a Boolean value).


A pair of curly braces containing any Puppet code.


Optionally: the else keyword and a pair of curly
              braces containing Puppet code.

 You cannot include an elsif clause in an
          unless statement. If you do, compilation fails with a syntax
        error.unless $facts['memory']['system']['totalbytes'] > 1073741824 {
  $maxclient = 500
}

ConditionsThe condition of an unless statement can be any expression that resolves to a Boolean value. This
        includes: 


Variables.


Expressions, including arbitrarily nested
              and and or expressions.


Functions that return values.


Expressions that resolve to non-Boolean values are automatically converted to
        Booleans. For more information, see the Booleans
          documentation. 

Regex capture variables
Although unless statements receive regex capture variables like if statements, you wouldn't usually use one, because the code in
        the statement is executed only if the condition doesn't match anything. It generally makes
        more sense to use an if statement.
      



case statements

Like if
    statements, 
case statements
 choose one of several blocks of arbitrary Puppet code to
    execute. They take a control expression and a list of cases and code blocks, and execute the
    first block whose case value matches the control expression.
Behavior
Puppet compares the control expression to each of the
                cases, in the order they are listed (except for the top-most level default case,
                which always goes last). It executes the block of code associated with the first
                matching case, and ignores the remainder of the statement.Case statements execute a
                maximum of one code block. If none of the cases match, Puppet does nothing and moves on.
In addition
                to executing the code in a block, a case statement
                is also an expression that produces a value, and can be used wherever a value is
                allowed. The value of a case expression is the value
                of the last expression in the executed block. If no block was executed, the value is
                    undef.
The control expression of a case
                statement can be any expression that resolves to a value. This includes:



Variables. 



Expressions. 



Functions that return values. 



Syntax
The general form of a case statement is:

The case keyword.
A control expression, which is any expression
            resolving to a value.
An opening curly brace.

Any number of possible matches, which consist
            of: 

A case or comma-separated list of
                cases.
A colon. 
A pair of curly braces containing any
                arbitrary Puppet code.
A closing curly brace case. 




case $facts['os']['name'] {
  'RedHat', 'CentOS':  { include role::redhat  } # Apply the redhat class
  /^(Debian|Ubuntu)$/: { include role::debian  } # Apply the debian class
  default:             { include role::generic } # Apply the generic class
}


Case matching
A case can be any expression that resolves to a value, for example, literal
        values, variables and function calls. You can use a comma-separated list of cases to
        associate multiple cases with the same block of code. To use values from a variable as
        cases, use the * splat
        operator to convert an array of values into a comma-separated list of values.
 Depending on the data type of a case's value, Puppet uses one of following behaviors to test whether the case matches:

Most data types, for example, strings and
            Booleans, are compared to the control value with the == equality operator, which is case-insensitive
            when comparing strings.
Regular expressions are compared to the
            control value with the =~ matching operator, which is case-sensitive. Regex cases only match
            strings.
Data types, such as Integer, are compared to the control value with
            the =~ matching
            operator. This tests whether the control value is an instance of that data
          type.
Arrays are recursively compared to the control
            value. First, Puppet checks whether the control and array
            are the same length, then each corresponding element is compared using these same case
            matching rules.
Hashes compare each key-value pair. To match,
            the control value and the case must have the same keys, and each corresponding value is
            compared using these same case matching rules.
 The special value default matches anything, and unless nested
            inside an array or hash, is always tested last regardless of its position in the
            list.


Regex capture variables
If you use regular expression cases, any captures
        from parentheses in the pattern are available inside the associated code block as numbered
        variables (for example, $1,
          $2), and the entire match
        is available as $0:
        case $trusted['hostname'] {
  /www(\d+)/: { notice("Welcome to web server number ${1}"); include role::web }
  default:   { include role::generic }
}

This example captures any digits from a hostname such as www01 and www02 and store them in the $1 variable.
Regex capture variables are different from other variables in a couple of ways:
        

The values of the numbered variables do not
            persist outside the code block associated with the pattern that set them.
In nested conditionals, each conditional has
            its own set of values for the set of numbered variables. At the end of an interior
            statement, the numbered variables are reset to their previous values for the remainder
            of the outside statement. This causes conditional statements to act like local scopes,
            but only with regard to the numbered variables.


Best practices
Case statements must have a default case:

 If the rest of your cases are meant to be
            comprehensive, putting a fail('message') call in the default case makes your code more robust by
            protecting against mysterious failures due to behavior changes elsewhere in your
            manifests.
If your cases aren't comprehensive and you
            want nodes that match none to do nothing, write a default case with an empty code block
              (default: {}). This
            makes your intention obvious to the next person who maintains your code.



Related information
Values, data types, and aliases
Regular expressions
Scope lookup rules


Selector expressions


Selector expressions are similar to case statements, but
    instead of executing code, they return a value. 

Behavior
The entire selector expression is treated as a single value.Puppet compares the control expression to each of the cases, in
        the order they are listed (except for the default case,
        which always goes last). When it finds a matching case, it treats that value as the value of
        the expression and ignore the remainder of the expression. If none of the cases match, Puppet fails compilation with an error, unless a default case is also provided.
The control expression of a selector can be any expression that resolves to a value. This
        includes: 


Variables. 



Expressions. 



Functions that return values 



 Selectors can be used wherever a value is expected. This includes: 

Variable assignments


Resource attributes


Function arguments


Resource titles


A value in another selector


Expressions



Tip:  For readability sake, use selectors only in variable assignments.



Syntax
Selectors resemble a cross between a case statement and the ternary operator found
        in other languages. The general form of a selector is:


A control expression, which is any expression resolving to a
            value.


The ? (question mark) keyword.


An opening curly brace.


Any number of possible matches, each of which consists of: 


A case.


The => (hash rocket) keyword.


A value, which can be any expression resolving to a value.


 A trailing comma.



 A closing curly brace. 

In this example, the value of $rootgroup is determined using the
        value of $facts['os']['family']:
        $rootgroup = $facts['os']['family'] ? {
  'Redhat'                    => 'wheel',
  /(Debian|Ubuntu)/           => 'wheel',
  default                     => 'root',
}

file { '/etc/passwd':
  ensure => file,
  owner  => 'root',
  group  => $rootgroup,
}


Case matching
In selector statements, you cannot use lists of cases. If the control expression
        is a string and you need more than one case associated with a single value, use a regular
        expression. Otherwise, use a case statement instead of a selector, because case statements
        do allow lists of cases. For more information, see Case statements. 

Regex capture variables
If you use regular expression cases, any captures
        from parentheses in the pattern are available inside the associated value as numbered
        variables ($1, $2), and the entire match is
        available as $0:

puppet
$system = $facts['os']['name'] ? {
  /(RedHat|Debian)/ => "our system is ${1}",
  default           => "our system is unknown",
}

Regex capture variables are different from other variables in a
        couple of ways: 


The values of the numbered variables do not persist outside the
            value associated with the pattern that set them.


In nested conditionals, each conditional has its own set of values
            for the set of numbered variables. At the end of an interior statement, the numbered
            variables are reset to their previous values for the remainder of the outside statement.
            This causes conditional statements to act like local scopes, but only with regard to the
            numbered variables.




Related information
Values, data types, and aliases
Regular expressions
Scope

 




          Was this page helpful?
        
Yes
No







              Don’t fill this out if you’re human: 






Thank you for your feedback!

            Feel free to add a comment or suggestion.
            





Send
Please enter your feedback





              Don’t fill this out if you’re human: 







            We’re sorry to hear that! 
            Please tell us why so we can help.
          

            Enter your feedback and email. This form is sent to the Puppet docs team.
            We ask for your email as we might contact you regarding your feedback.
          

            If you need help with the product itself, visit Puppet Support
            or ask in Puppet Community on Slack.
          

            Feedback:
            






            Email Address:
            






            To learn about how Puppet uses your personal information,
            visit our privacy policy.
          


Send
Please enter your feedback and contact email

          If you leave us your email, we may contact you regarding your feedback.
          For more information on how Puppet uses your personal information, see
          our
          privacy policy.
        





            Don’t fill this out if you’re human: 








    See an issue? Please file a JIRA ticket in our
    [DOCUMENTATION]
      project.
  











Puppet by Perforce gives IT operations teams back their time and offers peace of mind with infrastructure automation that enables security and compliance.






Legal
Privacy Policy
Terms of Use
Security


©  Puppet, Inc., a Perforce company. All rights reserved.




Puppet and other identified trademarks are the property of Puppet, Inc., Perforce Software, Inc., or an affiliate. Such trademarks are claimed and/or registered in the U.S. and other countries and regions. All third-party trademarks are the property of their respective holders. References to third-party trademarks do not imply endorsement or sponsorship of any products or services by the trademark holder. Contact Puppet, Inc., for further details.

