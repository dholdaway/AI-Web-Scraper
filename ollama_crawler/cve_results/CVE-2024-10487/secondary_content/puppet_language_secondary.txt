Title: The Puppet language
URL: https://www.puppet.com/docs/puppet/7/puppet_language

Puppet.com
Forge
Education


                                    Try Puppet
                                


































        Docs
        






Products
Puppet Enterprise
Open Source Puppet
Bolt
Security Compliance Management
Continuous Delivery
Puppet Development Kit
Puppet DB
Puppet Plugin for VMware



        Support
        






Get
Technical Support Plans
Support Lifecycle Policy
New Puppet Enterprise Customer?



        Community
        






About Puppet
Company
Developer Experience
Community
Puppet Champions
Puppet Test Pilots
Community Calendar
Slack Channel







 









































PRODUCT AND VERSION


      Current product
      










      Current version
      








Puppet  7.34.0

Release notes

Puppet release notes
Puppet  7.34.0Security


Puppet known issues
Puppet Server release notes
Puppet Server known Issues
PuppetDB release notes (link)

Facter release notes
Facter 4.10.0
Facter 4.9.0
Facter 4.8.0
Facter 4.7.1
Facter 4.7.0
Facter 4.6.1
Facter 4.6.0
Facter 4.5.2


Facter known issues
What's new since Puppet 6?
Upgrading from Puppet 6 to Puppet 7

Experimental featuresMsgpack support

Archived documentation



Puppet overview
What is Puppet?
Why use Puppet desired state management?
Key concepts behind Puppet
The Puppet platform 
Puppet platform lifecycle 
Open source Puppet vs Puppet Enterprise (PE)
The Puppet ecosystem
Use cases
Glossary
Navigating the documentation



Set up Puppet

Install Puppet
System requirements
Installing Puppet  
Installing and configuring agents
Manually verify packages
Managing Platform versions



Configure Puppet settings
Puppet settings
Key configuration settings

Puppet's configuration files
puppet.conf: The main config file
environment.conf: Per-environment settings
fileserver.conf: Custom fileserver mount points
puppetdb.conf: PuppetDB server locations
autosign.conf: Basic certificate autosigning 
csr_attributes.yaml: Certificate extensions 
custom_trusted_oid_mapping.yaml: Short names for cert extension OIDs
device.conf: Network hardware access
routes.yaml: Advanced plugin routing


Adding file server mount points
Checking the values of settings
Editing settings on the command line
Configuration Reference



Upgrading
Upgrade Puppet Server

Upgrade agents
Upgrade agents using the puppet_agent module
Upgrade *nix agents
Upgrade Windows agents
Upgrade macOS agents


Upgrade PuppetDB



Environments
About environments
Creating environments
Environment isolation



Directories and files
Code and data directory (codedir)
Config directory (confdir)
Main manifest directory
The modulepath
SSL directory (ssldir)
Cache directory (vardir)


Report reference



Platform components

Puppet Server
About Puppet Server
Deprecated features
Server and agent compatibility
Installing Puppet Server

Configuring Puppet Server
Configuring Puppet Server

Puppet Server configuration files
auth.conf
ca.conf
global.conf
logback.xml
metrics.conf
product.conf
puppetserver.conf
web-routes.conf
webserver.conf


Migrating to the HOCON auth.conf format
Advanced logging configuration
Differing behavior in puppet.conf



Using and extending Puppet Server
Subcommands
Using Ruby gems
Intermediate CA
Infrastructure certificate revocation list (CRL)
External SSL termination

Server metrics
Monitoring Puppet Server metrics
HTTP Client Metrics


Tuning guide
Applying metrics to improve performance
Submitting usage telemetry
Scaling Puppet Server
Restarting Puppet Server"



Developer information
Developer debugging
Running from source
Tracing code events



Puppet Server HTTP API
Puppet Server HTTP API overview
PSON

Puppet v3 API
Catalog
Node
Facts
File Bucket File
File Content
File Metadata
Report



Puppet v4 APICatalog API


CA v1 API
Certificate
Certificate Request
Certificate Status
Certificate Revocation List
Expirations
Certificate Clean


Schemas (JSON)



API endpoints

Metrics API endpoints
v1 metrics
v2 (Jolokia) metrics



Status API endpoints
Services endpoint
Simple endpoint



Administrative API endpoints
Environment cache
JRuby pool



Server-specific Puppet API endpoints
Environment classes
Environment modules
Static file content





Certificate authority and SSL
Puppet Server CA commands
Intermediate CA
Autosigning certificate requests
CSR attributes and certificate extensions
Regenerating certificates in a Puppet deployment
External CA
External SSL termination





Facter  
Facter: CLI
Facter: Core Facts

Custom facts overviewEnvironment facts 

Writing custom facts
External facts
Configuring Facter with facter.conf


PuppetDB

Puppet services and tools
Puppet commands
Running Puppet commands on Windows  

primary Puppet serverAbout Puppet Server

Puppet agent on *nix systems
Puppet agent on Windows
Puppet apply
Puppet device



Puppet reports
Reporting
Report reference
Writing custom report processors
Report format



Life cycle of a Puppet run
Agent-server HTTPS communications
Catalog compilation
Static catalogs 





Using Puppet code
Classifying nodes
Managing environment content with a Puppetfile
Using content from Puppet Forge

Designing system configs (roles and profiles)
The roles and profiles method 
Roles and profiles example 
Designing advanced profiles 
Designing convenient roles 



Separating data (Hiera)
About Hiera  
Getting started with Hiera  
Configuring Hiera
Creating and editing data 
Looking up data with Hiera  
Writing new data backends 

Debugging Hiera
Unexpected values
Common errors


Upgrading to Hiera 5 



Use case examples
Manage NTP
Manage sudo 
Manage DNS
Manage firewall rules
Forge examples





Syntax and settings

The Puppet language
Puppet language overview
Puppet language syntax examples
The Puppet language style guide 
Files and paths on Windows  
Code comments 
Variables
Resources

Resource types
Resource Type Reference (Single-Page)
Built-in types
Optional resource types for Windows
Resource Type: exec
Using exec on Windows  
Resource Type: file
Using file on Windows
Resource Type: filebucket
Resource Type: group
Using user and group on Windows
Resource types overview
Resource Type: notify
Resource Type: package
Using package on Windows  
Resource Type: resources
Resource Type: schedule
Resource Type: service
Using service
Resource Type: stage
Resource Type: tidy
Resource Type: user


Relationships and ordering
Classes
Defined resource types
Bolt tasks
Expressions and operators
Conditional statements and expressions
Function calls
Built-in function reference
Node definitions

Facts and built-in variables
Accessing facts from Puppet code
Built-in variables


Reserved words and acceptable names

Custom resources

Develop types and providers with the Resource APIResource API reference


Low-level method for developing types and providers
Type development
Provider development
Creating resources





Custom functions
Custom functions overview 
Writing custom functions in the Puppet language

Writing custom functions in Ruby
Custom functions in Ruby overview
Ruby function signatures
Using special features in implementation methods
Iterative functions
Refactoring legacy 3.x functions



Deferring a function
Deferred functions overview
Using a template with Deferred values
Write a deferred function to store secrets
Integrations with secret stores





Values, data types, and aliases
Type aliases
Typecasting
Abstract data types
Arrays
Binary
Booleans
Data type syntax
Default
Error data type
Hashes
Numbers
Regular expressions
Resource and class references
Resource types
Sensitive
Strings
Time-related data types
Undef



Templates
Creating templates using Embedded Puppet
Creating templates using Embedded Ruby



Advanced constructs
Iteration and loops
Lambdas
Resource default statements
Resource collectors
Virtual resources
Exported resources
Tags
Run stages



Details of complex behaviors
Containment
Scope
Namespaces and autoloading


Securing sensitive data


Metaparameter reference
Configuration Reference
Built-in function reference

Puppet Man Pages

Core tools
Man Page: puppet agent
Man Page: puppet apply
Man Page: puppet module
Man Page: puppet resource
Man Page: puppet lookup



Occasionally useful
Man Page: puppet config
Man Page: puppet describe
Man Page: puppet device
Man Page: puppet doc
Man Page: puppet help
Man Page: puppet node
Man Page: puppet parser



Niche
Man Page: puppet catalog
Man Page: puppet facts
Man Page: puppet filebucket
Man Page: puppet report







Developing modules

Modules
Modules overview
Plug-ins in modules
Module cheat sheet
Installing and managing modules from the command line
Beginner's guide to writing modules
Module metadata
Documenting modules
Documenting modules with Puppet Strings  
Puppet Strings style guide

Publishing modulesUsing the Forge API

Contributing to Puppet modules


Puppet Development Kit (PDK)
Puppet VSCode extension

PowerShell DSC Resources
Converting DSC Resources
Distributing arbitrary DSC resources
Upgrading Puppet DSC modules 
Troubleshooting DSC Resources 


Ruby API for developing extensions


The Puppet language

You'll use Puppet's declarative language to describe
        the desired state of your system. 
You'll  describe the desired state of your system in files called manifests. Manifests
            describe how your network and operating system resources, such as files, packages, and
            services, should be configured. Puppet then compiles
            those manifests into catalogs, and applies each catalog to its corresponding node to
            ensure the node is configured correctly, across your infrastructure.
Several parts of the Puppet language depend on evaluation
            order. For example, variables must be set before they are referenced. Throughout the
            language reference, we call out areas where the order of statements matters.
If you are new to Puppet, start with the Puppet language overview. 



Puppet language overviewThe following overview covers some of the key components of the Puppet language,         including catalogs, resources, classes and manifests. 

Puppet language syntax examplesA quick reference of syntax examples for the Puppet         language. 

The Puppet language style guideThis style guide promotes consistent formatting in the Puppet language, giving you a common pattern, design, and         style to follow when developing modules. This consistency in code and module structure makes         it easier to update and maintain the code.

Files and paths on Windows Puppet and Windows handle         directory separators and line endings in files somewhat differently, so you must be aware of         the differences when you are writing manifests to manage Windows systems.

Code commentsTo add comments to your Puppet code, use shell-style or hash comments. 

VariablesVariables store values so that those values can be accessed     in code later.

ResourcesResources are the fundamental unit for modeling system configurations. Each resource     describes the desired state for some aspect of a system, like a specific service or package.     When Puppet applies a catalog to the target system, it manages     every resource in the catalog, ensuring the actual state matches the desired state.

Resource typesEvery resource (file, user, service, package, and so on)         is associated with a resource type within the Puppet         language. The resource type defines the kind of configuration it manages. This section         provides information about the resource types that are built into Puppet. 

Relationships and ordering Resources are included and applied in the order they are defined in their manifest,       but only if the resource has no implicit relationship with another resource, as this can       affect the declared order. To manage a group of resources in a specific order, explicitly       declare such relationships with relationship metaparameters, chaining arrows, and the require function.

ClassesClasses are                                 named blocks of Puppet code that are                                 stored in modules and applied later when they are invoked by name.                                 You can add classes to a node’s catalog by either declaring them in                                 your manifests or assigning them from an external node classifier                                 (ENC). Classes generally configure large or medium-sized chunks of                                 functionality, such as all of the packages, configuration files, and                                 services needed to run an application. 

Defined resource typesDefined resource types,     sometimes called defined types or defines, are blocks of Puppet     code that can be evaluated multiple times with different parameters.

Bolt tasksBolt tasks are single         actions that you can run on target nodes in your infrastructure, allowing you to make         as-needed changes to remote systems. You can run tasks with the Puppet Enterprise (PE) orchestrator or with Puppet’s standalone task runner, Bolt. 

Expressions and operatorsExpressions are statements   that resolve to values. You can use expressions almost anywhere a value is required. Expressions   can be compounded with other expressions, and the entire combined expression resolves to a single   value.

Conditional statements and expressionsConditional statements let your Puppet code behave     differently in different situations. They are most helpful when combined with facts or with data     retrieved from an external source. Puppet supports       if and unless statements, case statements, and       selectors. 

Function callsFunctions are plug-ins, written in Ruby, that you can call during catalog compilation. A call to         any function is an expression that resolves to a value. Most functions accept one or more         values as arguments, and return a resulting value.

Built-in function reference


Node definitionsA node definition, also known as a node statement, is a         block of Puppet code that is included only in matching nodes'         catalogs. This allows you to assign specific configurations to specific nodes.

Facts and built-in variablesBefore requesting a catalog for a managed node, or         compiling one with puppet apply, Puppet collects system information, called facts, by using the Facter tool. The         facts are assigned as values to variables that you can use anywhere in your manifests. Puppet also sets some additional special variables, called             built-in variables, which behave a lot like facts. 

Reserved words and acceptable namesYou can use only certain characters for naming variables,         modules, classes, defined types, and other custom constructs. Additionally, some words in         the Puppet language are reserved and cannot be used as bare         word strings or names.

Custom resourcesA resource is the basic unit that is managed by Puppet. Each resource has a set of attributes describing its         state. Some attributes can be changed throughout the lifetime of the resource, whereas         others are only reported back but cannot be changed, and some can only be set one time         during initial creation. 

Custom functionsUse the Puppet language, or         the Ruby API to create custom functions.

Values, data types, and aliasesMost of the things you can do with the Puppet language         involve some form of data. An individual piece of data is called         a value, and every value has a data type, which determines         what kind of information that value can contain and how you can interact with         it.

TemplatesTemplates are written in a specialized templating       language that generates text from data. Use templates to manage the content of your Puppet configuration files via the content attribute of the file resource type. 

Advanced constructsAdvanced Puppet language constructs help you write simpler         and more effective Puppet code by reducing complexity.

Details of complex behaviorsWithin Puppet language there are complex behavior patterns         regarding classes, defined types, and specific areas of code called scopes. 

Securing sensitive data in PuppetPuppet’s catalog contains sensitive information in         clear text. Puppet uses the Sensitive data type to mark your sensitive data — for example secrets,         passwords and private keys — with a flag that hides the value from certain parts of Puppet, such as reports. However, you can still see this         information in plain text files in the cached catalog and other administrative         functions.


Related information
Puppet language overview
Puppet language syntax examples
The Puppet language style guide

 




          Was this page helpful?
        
Yes
No







              Don’t fill this out if you’re human: 






Thank you for your feedback!

            Feel free to add a comment or suggestion.
            





Send
Please enter your feedback





              Don’t fill this out if you’re human: 







            We’re sorry to hear that! 
            Please tell us why so we can help.
          

            Enter your feedback and email. This form is sent to the Puppet docs team.
            We ask for your email as we might contact you regarding your feedback.
          

            If you need help with the product itself, visit Puppet Support
            or ask in Puppet Community on Slack.
          

            Feedback:
            






            Email Address:
            






            To learn about how Puppet uses your personal information,
            visit our privacy policy.
          


Send
Please enter your feedback and contact email

          If you leave us your email, we may contact you regarding your feedback.
          For more information on how Puppet uses your personal information, see
          our
          privacy policy.
        





            Don’t fill this out if you’re human: 








    See an issue? Please file a JIRA ticket in our
    [DOCUMENTATION]
      project.
  











Puppet by Perforce gives IT operations teams back their time and offers peace of mind with infrastructure automation that enables security and compliance.






Legal
Privacy Policy
Terms of Use
Security


©  Puppet, Inc., a Perforce company. All rights reserved.




Puppet and other identified trademarks are the property of Puppet, Inc., Perforce Software, Inc., or an affiliate. Such trademarks are claimed and/or registered in the U.S. and other countries and regions. All third-party trademarks are the property of their respective holders. References to third-party trademarks do not imply endorsement or sponsorship of any products or services by the trademark holder. Contact Puppet, Inc., for further details.

