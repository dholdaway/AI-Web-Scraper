Title: Documenting modules
URL: https://www.puppet.com/docs/puppet/7/modules_documentation

Puppet.com
Forge
Education


                                    Try Puppet
                                


































        Docs
        






Products
Puppet Enterprise
Open Source Puppet
Bolt
Security Compliance Management
Continuous Delivery
Puppet Development Kit
Puppet DB
Puppet Plugin for VMware



        Support
        






Get
Technical Support Plans
Support Lifecycle Policy
New Puppet Enterprise Customer?



        Community
        






About Puppet
Company
Developer Experience
Community
Puppet Champions
Puppet Test Pilots
Community Calendar
Slack Channel







 









































PRODUCT AND VERSION


      Current product
      










      Current version
      








Puppet  7.34.0

Release notes

Puppet release notes
Puppet  7.34.0Security


Puppet known issues
Puppet Server release notes
Puppet Server known Issues
PuppetDB release notes (link)

Facter release notes
Facter 4.10.0
Facter 4.9.0
Facter 4.8.0
Facter 4.7.1
Facter 4.7.0
Facter 4.6.1
Facter 4.6.0
Facter 4.5.2


Facter known issues
What's new since Puppet 6?
Upgrading from Puppet 6 to Puppet 7

Experimental featuresMsgpack support

Archived documentation



Puppet overview
What is Puppet?
Why use Puppet desired state management?
Key concepts behind Puppet
The Puppet platform 
Puppet platform lifecycle 
Open source Puppet vs Puppet Enterprise (PE)
The Puppet ecosystem
Use cases
Glossary
Navigating the documentation



Set up Puppet

Install Puppet
System requirements
Installing Puppet  
Installing and configuring agents
Manually verify packages
Managing Platform versions



Configure Puppet settings
Puppet settings
Key configuration settings

Puppet's configuration files
puppet.conf: The main config file
environment.conf: Per-environment settings
fileserver.conf: Custom fileserver mount points
puppetdb.conf: PuppetDB server locations
autosign.conf: Basic certificate autosigning 
csr_attributes.yaml: Certificate extensions 
custom_trusted_oid_mapping.yaml: Short names for cert extension OIDs
device.conf: Network hardware access
routes.yaml: Advanced plugin routing


Adding file server mount points
Checking the values of settings
Editing settings on the command line
Configuration Reference



Upgrading
Upgrade Puppet Server

Upgrade agents
Upgrade agents using the puppet_agent module
Upgrade *nix agents
Upgrade Windows agents
Upgrade macOS agents


Upgrade PuppetDB



Environments
About environments
Creating environments
Environment isolation



Directories and files
Code and data directory (codedir)
Config directory (confdir)
Main manifest directory
The modulepath
SSL directory (ssldir)
Cache directory (vardir)


Report reference



Platform components

Puppet Server
About Puppet Server
Deprecated features
Server and agent compatibility
Installing Puppet Server

Configuring Puppet Server
Configuring Puppet Server

Puppet Server configuration files
auth.conf
ca.conf
global.conf
logback.xml
metrics.conf
product.conf
puppetserver.conf
web-routes.conf
webserver.conf


Migrating to the HOCON auth.conf format
Advanced logging configuration
Differing behavior in puppet.conf



Using and extending Puppet Server
Subcommands
Using Ruby gems
Intermediate CA
Infrastructure certificate revocation list (CRL)
External SSL termination

Server metrics
Monitoring Puppet Server metrics
HTTP Client Metrics


Tuning guide
Applying metrics to improve performance
Submitting usage telemetry
Scaling Puppet Server
Restarting Puppet Server"



Developer information
Developer debugging
Running from source
Tracing code events



Puppet Server HTTP API
Puppet Server HTTP API overview
PSON

Puppet v3 API
Catalog
Node
Facts
File Bucket File
File Content
File Metadata
Report



Puppet v4 APICatalog API


CA v1 API
Certificate
Certificate Request
Certificate Status
Certificate Revocation List
Expirations
Certificate Clean


Schemas (JSON)



API endpoints

Metrics API endpoints
v1 metrics
v2 (Jolokia) metrics



Status API endpoints
Services endpoint
Simple endpoint



Administrative API endpoints
Environment cache
JRuby pool



Server-specific Puppet API endpoints
Environment classes
Environment modules
Static file content





Certificate authority and SSL
Puppet Server CA commands
Intermediate CA
Autosigning certificate requests
CSR attributes and certificate extensions
Regenerating certificates in a Puppet deployment
External CA
External SSL termination





Facter  
Facter: CLI
Facter: Core Facts

Custom facts overviewEnvironment facts 

Writing custom facts
External facts
Configuring Facter with facter.conf


PuppetDB

Puppet services and tools
Puppet commands
Running Puppet commands on Windows  

primary Puppet serverAbout Puppet Server

Puppet agent on *nix systems
Puppet agent on Windows
Puppet apply
Puppet device



Puppet reports
Reporting
Report reference
Writing custom report processors
Report format



Life cycle of a Puppet run
Agent-server HTTPS communications
Catalog compilation
Static catalogs 





Using Puppet code
Classifying nodes
Managing environment content with a Puppetfile
Using content from Puppet Forge

Designing system configs (roles and profiles)
The roles and profiles method 
Roles and profiles example 
Designing advanced profiles 
Designing convenient roles 



Separating data (Hiera)
About Hiera  
Getting started with Hiera  
Configuring Hiera
Creating and editing data 
Looking up data with Hiera  
Writing new data backends 

Debugging Hiera
Unexpected values
Common errors


Upgrading to Hiera 5 



Use case examples
Manage NTP
Manage sudo 
Manage DNS
Manage firewall rules
Forge examples





Syntax and settings

The Puppet language
Puppet language overview
Puppet language syntax examples
The Puppet language style guide 
Files and paths on Windows  
Code comments 
Variables
Resources

Resource types
Resource Type Reference (Single-Page)
Built-in types
Optional resource types for Windows
Resource Type: exec
Using exec on Windows  
Resource Type: file
Using file on Windows
Resource Type: filebucket
Resource Type: group
Using user and group on Windows
Resource types overview
Resource Type: notify
Resource Type: package
Using package on Windows  
Resource Type: resources
Resource Type: schedule
Resource Type: service
Using service
Resource Type: stage
Resource Type: tidy
Resource Type: user


Relationships and ordering
Classes
Defined resource types
Bolt tasks
Expressions and operators
Conditional statements and expressions
Function calls
Built-in function reference
Node definitions

Facts and built-in variables
Accessing facts from Puppet code
Built-in variables


Reserved words and acceptable names

Custom resources

Develop types and providers with the Resource APIResource API reference


Low-level method for developing types and providers
Type development
Provider development
Creating resources





Custom functions
Custom functions overview 
Writing custom functions in the Puppet language

Writing custom functions in Ruby
Custom functions in Ruby overview
Ruby function signatures
Using special features in implementation methods
Iterative functions
Refactoring legacy 3.x functions



Deferring a function
Deferred functions overview
Using a template with Deferred values
Write a deferred function to store secrets
Integrations with secret stores





Values, data types, and aliases
Type aliases
Typecasting
Abstract data types
Arrays
Binary
Booleans
Data type syntax
Default
Error data type
Hashes
Numbers
Regular expressions
Resource and class references
Resource types
Sensitive
Strings
Time-related data types
Undef



Templates
Creating templates using Embedded Puppet
Creating templates using Embedded Ruby



Advanced constructs
Iteration and loops
Lambdas
Resource default statements
Resource collectors
Virtual resources
Exported resources
Tags
Run stages



Details of complex behaviors
Containment
Scope
Namespaces and autoloading


Securing sensitive data


Metaparameter reference
Configuration Reference
Built-in function reference

Puppet Man Pages

Core tools
Man Page: puppet agent
Man Page: puppet apply
Man Page: puppet module
Man Page: puppet resource
Man Page: puppet lookup



Occasionally useful
Man Page: puppet config
Man Page: puppet describe
Man Page: puppet device
Man Page: puppet doc
Man Page: puppet help
Man Page: puppet node
Man Page: puppet parser



Niche
Man Page: puppet catalog
Man Page: puppet facts
Man Page: puppet filebucket
Man Page: puppet report







Developing modules

Modules
Modules overview
Plug-ins in modules
Module cheat sheet
Installing and managing modules from the command line
Beginner's guide to writing modules
Module metadata
Documenting modules
Documenting modules with Puppet Strings  
Puppet Strings style guide

Publishing modulesUsing the Forge API

Contributing to Puppet modules


Puppet Development Kit (PDK)
Puppet VSCode extension

PowerShell DSC Resources
Converting DSC Resources
Distributing arbitrary DSC resources
Upgrading Puppet DSC modules 
Troubleshooting DSC Resources 


Ruby API for developing extensions


Documenting modules

Document any module you write, whether your module is for
        internal use only or for publication on the Forge. Complete,
        clear documentation helps your module users understand what your module can do and how to
        use it.
Write your module usage documentation in Markdown, in a README based
            on our module README template. Use Puppet Strings to
            generate reference information for your module's classes, defined types, functions,
            tasks, task plans, and resource types and providers.
Use clear and consistent language in your Module documentation. It
            should be easy to read both on the web and in the terminal. Whether you are writing your
            README or code comments for Puppet Strings docs generation,
            following some basic formatting guidelines and best writing practices can help make your
            module documentation great.
Documentation best
                practices
If you want your documentation to really
                shine, a few best practices can help make your documentation clear and readable. 
Use the second person; that is,
                            write directly to the person reading your document. For example, “If
                            you’re installing the cat module on Windows....”
Use the imperative; that is,
                            directly tell the user what they must do. For example, "Secure your dog
                            door before installing the cat module."
Use the active voice whenever
                            possible. For example, "Install the cat and bird modules on separate
                            instances" rather than "The cat and bird modules should be installed on
                            separate instances."
Use the present tense, almost
                            always. Events that regularly occur should be present tense: "This
                            parameter sets your cat to 'purebred'. The purebred cat alerts you for
                            breakfast at 6 a.m." Use future tense only when you are specifically
                            referring to something that takes place at a time in the future, such as
                            "The `tail` parameter is deprecated and will be removed in a future
                            version. Use `manx` instead." 
Avoid subjective words. For
                            example, don't write "It's quick and easy to teach an old cat new
                            tricks." Subjective words like "quick" and "easy" can frustrate and even
                            alienate a reader who finds teaching a cat difficult or
                            time-consuming.
Lists, whether ordered or
                            unordered, make things clearer for the reader. When you're writing about
                            steps that happen in a sequence, use an ordered list (1, 2, 3…). If
                            order doesn’t matter, like in a list of options or requirements, use an
                            unordered (bulleted) list.




Related information
Documenting modules with Puppet Strings
Puppet Strings style guide


Writing the module README

In your README, include basic module information and
    extended usage examples for the most common use cases.
Your README tells users what your module does and how they can use it.
      Include reference information as a separate REFERENCE.md file in the module's root directory.


Important: The Reference section of the README is
          deprecated.Puppet Strings generates a REFERENCE.md file containing all the
        reference information for your module, including a complete list of your module's
        classes, defined types, functions, resource types and providers, Puppet tasks and plans, along with parameters for each. See the
        topic about creating reference documentation for details.

Write your README in Markdown and use the .md or .markdown extension for the file. If you used Puppet Development Kit (PDK), you already have a copy of the README
      template in .md format in your
      module. For more information about Markdown usage, see the Commonmark reference.
Use the following sections in your README:


Description
What the module does and why it is useful.
Setup
Prerequisites for module use and getting started information.
Usage
Instructions and examples for common use cases or advanced
            configuration options.
Reference
If the module contains facts or type aliases, include them in a
            short supplementary reference section. All other reference information, such as classes
            and their parameters, are in the REFERENCE.md file generated by Strings.
Limitations
OS compatibility and known issues.
Development
Guide for contributing to the module.


Table of contents
The table of contents helps your users find their way around your module
        README.
 Start with the module name as a Level 1 heading at the top
        of the module, followed by "Table of Contents" as a Level 4 heading. Under the table of
        contents heading, include a numbered list of top-level sections, with any necessary
        subsections in a bulleted list below the section heading. Link each section to its
        corresponding heading in the README. 

# modulename

#### Table of Contents

1. [Module Description - What the module does and why it is useful](#module-description)
1. [Setup - The basics of getting started with [modulename]](#setup)
   * [What [modulename] affects](#what-[modulename]-affects)
   * [Setup requirements](#setup-requirements)
   * [Beginning with [modulename]](#beginning-with-[modulename])
1. [Usage - Configuration options and additional functionality](#usage)
1. [Limitations - OS compatibility, etc.](#limitations)
1. [Development - Guide for contributing to the module](#development)

Module description
In your module description, briefly tell users why they might want to use
        your module. Explain what your module does and what kind of problems users can solve with
        it.
The short description helps the user decide if your module is
        what they want. What are the most common use cases for your module? Does your module just
        install software? Does it install and configure it? Give your user information about what to
        expect from the module. 

## Module description

The `cat` module installs, configures, and maintains your cat in both apartment and residential house settings.

The cat module automates the installation of a cat to your apartment or house, and then provides options for configuring the cat to fit your environment's needs. After it's installed and configured, the cat module automates maintenance of your cat through a series of resource types and providers.

Setup section
In the setup section, detail how your user can successfully get your module
        functioning. Include requirements, steps to get started, and any other information users
        might need to know before they start using your module. 
 Module
        installation instructions are covered both on the module's Forge page and in the Puppet
        docs, so don't reiterate them here. In this section, include the following subsections, as
        applicable:


What <modulename> affects

Include this section only if: 


The module alters, overwrites, or
                      otherwise touches files, packages, services, or operations other than the
                      named software; OR 
The module's general performance can
                      overwrite, purge, or otherwise remove entries, files, or directories in a
                      user's environment. For example:
                      ## Setup

### What cat affects

* Your dog door might be overwritten if not secured before installation.





Setup requiremements
Include this section only if the module requires additional
              software or some tweak to a user's environment. For instance, the puppetlabs-firewall module uses Ruby-based providers which required pluginsync to be enabled.
Beginning with <modulename>
 Always include this section to explain the minimum steps
              required to get the module up and running in a user's environment. You can use basic
              proof of concept use cases here; it doesn't have to be something you would run in
              production. For simple modules, "Declare the main `::cat` class" is enough. 


Usage section
Include examples for common use cases in the usage section. Provide usage
        information and code examples to show your users how to use your module to solve problems.
        
If there are many use cases for your module, include three to five
        examples of the most important or common tasks a user can accomplish. The usage section is a
        good place to include more complex examples that involve different types, classes, and
        functions working together. For example, the usage section for the puppetlabs-apache module includes an example for
        setting up a virtual host with SSL, which involves several classes. 

## Usage

You can manage all interaction with your cat through the main `cat` class. With the default options, the module installs a basic cat with no optimizations.

### I just want cat, what's the minimum I need?

```
include '::cat'
```

### I want to configure my lasers

Use the following to configure your lasers for a random-pattern, 20-minute playtime at 3 a.m. local time.

```
    class { 'cat':
      laser => {
        pattern    => 'random',
        duration   => '20',
        start_time => '0300',
      }
    }
```

Limitations section
In the limitations section, list any incompatibilities, known issues, or
        other warnings. 

## Limitations

This module cannot be used with the smallchild module.

Development section
In the development section, tell other users the ground rules for
        contributing to your project and explain how they should submit their work. 


Creating reference documentation

List reference information --- a complete list of classes,
    defined types, functions, resource types and providers, tasks, and plans --- in a separate
      REFERENCE.md file in the root
    directory of your module.
Use Puppet Strings to generate this
      documentation based on your comments and module code. If you aren't yet using Strings to generate documentation, you can manually create a
        REFERENCE.md file. 


Tip: Previously, we recommended that module authors include
        reference information in the README itself. However, the reference section often became
        quite long and difficult to maintain. Moving reference information to a separate file keeps
        the README more readable, and using Strings to generate this
        file makes it easier to maintain.

 The Forge displays information from a
      module's REFERENCE.md file in
      a reference tab on the module's detail page, so the information remains easily accessible to
      users. To create a REFERENCE.md file for your module, add Strings
      comments to the code for each of your classes, defined types, functions, task plans, and
      resource types and providers, and then run Strings to generate
      documentation in Markdown. You can create a REFERENCE.md file manually, but remember that if you then generate a
        REFERENCE.md with Strings, it overwrites any existing REFERENCE.md file.
 For details on adding comments to your code, see the 
Strings style guide. For instructions on how to
      install and use Strings, see the topics about Puppet Strings.
Manually writing reference
        documentation
If you aren't using Strings yet to generate your reference documentation, you can
        manually create a REFERENCE.md file listing each of your classes, defined types, resource types
        and providers, functions, and facts, along with any parameters.
 To
        manually document reference information, start your reference document with a small table of
        contents that first lists the classes, defined types, and resource types of your module. If
        your module contains both public and private classes or defined types, list the public and
        the private separately. Include a brief description of what these items do in your
        module.## Reference

### Classes

#### Public classes

*[`pet::cat`](#petcat): Installs and configures a cat in your environment.

#### Private classes

*[`pet::cat::install`]: Handles the cat packages.
*[`pet::cat::configure`]: Handles the configuration file.After
        this table of contents, list the parameters, providers, or features for each element (class,
        defined type, function, and so on) of your module. Be sure to include valid or acceptable
        values and any defaults that apply. Each element in this list must include: 

The data type, if applicable.


A description of what the element does.


Valid values, if the data type doesn't make it obvious.


Default value, if any.




### `pet::cat`

#### Parameters

##### `purr`

Data type: Boolean.

Enables purring in your cat.

Default: `true`.

##### `meow`

Enables vocalization in your cat. Valid options: 'string'.

Default: 'medium-loud'.

#### `laser`

Specifies the type, duration, and timing of your cat's laser show.

Default: `undef`.

Valid options: A hash with the following keys:

* `pattern` - accepts 'random', 'line', or a string mapped to a custom laser_program, defaults to 'random'.
* `duration` - accepts an integer in seconds, defaults to '5'.
* `frequency` - accepts an integer, defaults to 1.
* `start_time` - accepts an integer specifying the 24-hr formatted start time for the program.


 




          Was this page helpful?
        
Yes
No







              Don’t fill this out if you’re human: 






Thank you for your feedback!

            Feel free to add a comment or suggestion.
            





Send
Please enter your feedback





              Don’t fill this out if you’re human: 







            We’re sorry to hear that! 
            Please tell us why so we can help.
          

            Enter your feedback and email. This form is sent to the Puppet docs team.
            We ask for your email as we might contact you regarding your feedback.
          

            If you need help with the product itself, visit Puppet Support
            or ask in Puppet Community on Slack.
          

            Feedback:
            






            Email Address:
            






            To learn about how Puppet uses your personal information,
            visit our privacy policy.
          


Send
Please enter your feedback and contact email

          If you leave us your email, we may contact you regarding your feedback.
          For more information on how Puppet uses your personal information, see
          our
          privacy policy.
        





            Don’t fill this out if you’re human: 








    See an issue? Please file a JIRA ticket in our
    [DOCUMENTATION]
      project.
  











Puppet by Perforce gives IT operations teams back their time and offers peace of mind with infrastructure automation that enables security and compliance.






Legal
Privacy Policy
Terms of Use
Security


©  Puppet, Inc., a Perforce company. All rights reserved.




Puppet and other identified trademarks are the property of Puppet, Inc., Perforce Software, Inc., or an affiliate. Such trademarks are claimed and/or registered in the U.S. and other countries and regions. All third-party trademarks are the property of their respective holders. References to third-party trademarks do not imply endorsement or sponsorship of any products or services by the trademark holder. Contact Puppet, Inc., for further details.

