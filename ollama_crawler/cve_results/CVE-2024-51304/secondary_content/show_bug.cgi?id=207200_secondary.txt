Title: 207200 – >sys-apps/coreutils-6.10-r1 uses lzma but lzma compressor needs C++
URL: https://bugs.gentoo.org/show_bug.cgi?id=207200

Go to: 
		Gentoo Home
Documentation
Forums
Lists
Bugs
Planet
Store
Wiki
Get Gentoo!





Gentoo's Bugzilla – Bug 207200
>sys-apps/coreutils-6.10-r1 uses lzma but lzma compressor needs C++
Last modified: 2009-12-27 16:09:11 UTC node [vulture]


Home
| New–[Ex]
| Browse
| Search
| Privacy Policy

| 





[?]
| Reports

| 
Requests

| 
Help


| 
New Account


| 
Log In





[x]



| 
Forgot Password

Login:




[x]













Bug 207200 
      - >sys-apps/coreutils-6.10-r1 uses lzma but lzma compressor needs C++


Summary:
>sys-apps/coreutils-6.10-r1 uses lzma but lzma compressor needs C++
    








Status:
    

RESOLVED
          WORKSFORME
      






Alias:


        None
    





Product:

Gentoo Linux




Classification:

Unclassified




Component:

[OLD] Core system

  (show other bugs)



Hardware:

All
        Linux
      







Importance:
      
High
       normal
      


Assignee:

Gentoo's Team for Core System packages








URL:







Whiteboard:




Keywords:








Depends on:







Blocks:




220074



 

        Show dependency tree





 





      Reported:
    
2008-01-23 18:57 UTC by Sylvain BERTRAND





      Modified:
    
2009-12-27 16:09 UTC
      (History)
    




          CC List:
        

4 
          users
          
            (show)
          



esigra
leio
qa
wolf31o2









See Also:






Package list:







Runtime testing required:

---























      Attachments
    



Add an attachment
        (proposed patch, testcase, etc.)
    








Note
              You need to
              log in
              before you can comment on or make changes to this bug.
            

















Description


Sylvain BERTRAND





          2008-01-23 18:57:22 UTC
        

Core system compressors and decompressors should not depend on more than C.




Comment 1


Jakub Moc (RETIRED)






          2008-01-23 19:41:11 UTC
        

Eh???




Comment 2


Mart Raudsepp






          2008-05-07 12:10:27 UTC
        

Reopening, as this is a big problem for small systems to workaround. Upstream provides tar.gz tarballs, use em please.




Comment 3


Mart Raudsepp






          2008-05-07 12:57:13 UTC
        

Please heavily consider using the upstream provided tar.gz files instead of tar.lzma - lzma-utils is a very bad dependency to have on a system package. It involves having to have gcc/gmp with cxx supports and that means having to have cxx providing gcc in (a custom catalyst embedded) stage1 just for that at build time, and so on. The world isn't ready for lzma tarballs like this if the world doesn't develop a light-weight decompressor tool that this can built-time dep instead of on the lzma-utils beast.




Comment 4


Mart Raudsepp






          2008-05-07 13:00:39 UTC
        

(and of course then ship the patchset packed in another way as well...)




Comment 5


Mart Raudsepp






          2008-05-07 13:02:17 UTC
        

CCing wolf31o2 for his reference, as he had desires to get rid of this dependency as well




Comment 6


Doug Goldstein (RETIRED)






          2008-05-07 14:55:25 UTC
        

I'm all for using the gzip version especially considering the following e-mail I got from the lzma-utils announce list..

A new snapshot of the git tree is available:

    http://tukaani.org/lzma/lzma-4.999.3alpha.tar.gz

The new LZMA Utils will use version numbering scheme similar to many 
other free software projects. The first stable version will be 5.0.0 
(but I don't know when). The version number of LZMA Utils will have 
nothing to do with the version number of LZMA SDK anymore.

Development has stagnated during the past few months due to bunch of 
security problems found from the file format design and some other file 
format issues. These issues aren't fixed in this snapshot.

To get the problems fixed and also the project out of alpha stage in 
this life, it is likely that the file format will change quite a bit 
and become significantly simpler. It should simplify the actual 
implementation too.

Using liblzma to encode and decode LZMA_Alone format files (the 
current/old .lzma format) should be quite OK now. The code is very 
probably not as stable as LZMA SDK is, but some people find liblzma 
working "well enough" when operation is restricted to LZMA_Alone files. 
Keep in mind that I don't track API/ABI changes yet, so upgrading 
between versions may break things.





Comment 7


Mark Loeser (RETIRED)






          2008-05-10 03:07:43 UTC
        

So, in trying to understand this problem, do any of the package managers have a problem with lzma?  Is introducing a dependency on C++ in a system package undesirable?  I think these are issues that need more discussion before QA can make any sort of decision on this issue.  (preferably on the mailing list, in the form of a generic question if depending on C++ in a system package is a bad thing)




Comment 8


SpanKY






          2008-05-10 07:26:56 UTC
        

nothing to be done here




Comment 9


Chris Gianelloni (RETIRED)






          2008-06-28 07:29:00 UTC
        

There's not really any reason, release-wise, to not allow C++ in system.

Of course, there's no C++ in GCC and such in stages 1 and 2, so it can potentially cause issues when release building due to possibly being before GCC/glibc/etc. get recompiled.  There's not really a clean solution until USE deps can be used.  So long as we're aware of the issue and can work around it, I see no reason to create such a restriction for the tree.

Just my 2 cents from the release side.




Comment 10


Mart Raudsepp






          2008-06-28 08:51:17 UTC
        

(In reply to comment #7)
> So, in trying to understand this problem, do any of the package managers have a
> problem with lzma?  Is introducing a dependency on C++ in a system package
> undesirable?

The problem is that this means a c++ compiler and libstdc++ and so on is necessary to have, which is all fine and good when you are thinking about a desktop or a server, but a seriously big issue when you think about embedded systems. Heck, libstdc++ itself could almost be bigger than the whole storage available. At least it can be purged later, but something you need might have used libstdc++ without you knowing, because you needed it for unpacking a tarball...
Anyhow, lzma-utils had a nocxx USE flag added a while ago with some changes to src_unpack too I believe, that allows to unpack lzma tarballs by portage without the C++ parts of lzma-utils around, so this bug is really FIXED, not just WORKSFORME. Just wanting to sound the embedded horn for qa@ a bit ;)









Format For Printing
 - XML
 - Clone This Bug
 - Clone In The Same 
                        Product
 - Top of page 







Home
| New–[Ex]
| Browse
| Search
| Privacy Policy

| 





[?]
| Reports

| 
Requests

| 
Help


| 
New Account


| 
Log In





[x]



| 
Forgot Password

Login:




[x]

